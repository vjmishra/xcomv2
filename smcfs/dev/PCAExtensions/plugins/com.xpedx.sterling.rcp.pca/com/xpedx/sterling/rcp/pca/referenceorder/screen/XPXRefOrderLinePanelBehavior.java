
/*
 * Created on Apr 15,2010
 *
 */
package com.xpedx.sterling.rcp.pca.referenceorder.screen;

import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;

import com.yantra.yfc.rcp.YRCApiContext;
import com.yantra.yfc.rcp.YRCBehavior;
import com.yantra.yfc.rcp.YRCEditorInput;
import com.yantra.yfc.rcp.YRCPlatformUI;
import com.yantra.yfc.rcp.YRCXmlUtils;
import com.yantra.yfc.rcp.internal.YRCScreenUtils;

/**
 * @author sdodda
 *
 * Generated by MTCE
 */
 
public class XPXRefOrderLinePanelBehavior extends YRCBehavior {

	private XPXRefOrderLinePanel page;
	private Element inputElement;
	private int primeLineNo;
	private int subLineNo;
	
	/**
	 * Constructor for the behavior class. 
	 * @param eleOrderLine 
	 */
	 
    public XPXRefOrderLinePanelBehavior(Composite ownerComposite, String formId, Object inputObject, Element eleOrderLine) {
        super(ownerComposite, formId, inputObject);
        this.page = (XPXRefOrderLinePanel) ownerComposite;
        this.inputElement = ((YRCEditorInput) inputObject).getXml();
        setModel("OrderLineTmp",eleOrderLine);
        if(YRCPlatformUI.isVoid(eleOrderLine.getAttribute("PrimeLineNo"))){
        	Composite pnlDynamicLineParent = page.getParent();
    		Control childIterator[] = pnlDynamicLineParent.getChildren();
    		int noOfChildren = childIterator.length;
        	int iPLN=0;
    		for (int k = 0; k < noOfChildren; k++) {
    			XPXRefOrderLinePanel childpnl = (XPXRefOrderLinePanel) childIterator[k];
    			if((XPXRefOrderLinePanel)ownerComposite!=childpnl){
	    			int newPLN = childpnl.getBehavior().getPrimeLineNo();
	    			if(newPLN >iPLN)
	    				iPLN = newPLN;
    			}
    		}
    		primeLineNo = iPLN+1;
        } else {
        	primeLineNo = Integer.parseInt(eleOrderLine.getAttribute("PrimeLineNo"));
        }
        
        if(YRCPlatformUI.isVoid(eleOrderLine.getAttribute("SubLineNo"))){
        	subLineNo = 1;
        } else {
        	subLineNo = Integer.parseInt(eleOrderLine.getAttribute("SubLineNo"));
        }
    }
    
	/**
	 * This method initializes the behavior class.
	 */
	public void init() {
		//TODO: write behavior init here
	}

	public int getPrimeLineNo() {
		return primeLineNo;
	}

	public int getSubLineNo() {
		return subLineNo;
	}
	
	private void callApis(String apinames[], Document inputXmls[]) {
		YRCApiContext ctx = new YRCApiContext();
		ctx.setFormId(getFormId());
		ctx.setApiNames(apinames);
		ctx.setInputXmls(inputXmls);
		if (!page.isDisposed())
			callApi(ctx, page);
	}
	
	private void callApi(String apiname, Document inputXml) {
		YRCApiContext ctx = new YRCApiContext();
		ctx.setFormId(getFormId());
		ctx.setApiName(apiname);
		ctx.setInputXml(inputXml);
		if (!page.isDisposed())
			callApi(ctx, page);
	}
	
	public void handleApiCompletion(YRCApiContext ctx) {
		if (ctx.getInvokeAPIStatus() > 0){
			if (page.isDisposed()) {
				YRCPlatformUI.trace("Page is Disposed");
			} else {
				String[] apinames = ctx.getApiNames();
				for (int i = 0; i < apinames.length; i++) {
					Document docItemInfo = ctx.getOutputXmls()[i];
					Element eleOutput = docItemInfo.getDocumentElement();
					setModel(eleOutput);
			        if (YRCPlatformUI.equals(ctx.getApiName(), "getXrefList")) {
						Element outXml = ctx.getOutputXml().getDocumentElement();
						populateLegacyItemNumber(outXml);
			        }  	
					if("XPXPandAWebService".equals(apinames[i])){
						Document docPandAInfo = ctx.getOutputXmls()[i];
						Element elePandAInfo = docPandAInfo.getDocumentElement();
						setModel("PandA",elePandAInfo);
						processPnAResponse(elePandAInfo);
					}
			        if(YRCPlatformUI.equals(ctx.getApiName(), "XPXReprocessReferenceOrderService"))
			        {
			        	Element outXml=ctx.getOutputXml().getDocumentElement();
			        }  						
				}
			}
		}
		super.handleApiCompletion(ctx);
	}

	private void populateLegacyItemNumber(Element outXml) {
		NodeList nl = outXml.getElementsByTagName("XPXItemcustXref");
		if (!YRCPlatformUI.isVoid(nl)&& nl.getLength()>0) {
			for (int j = 0; j < nl.getLength(); j++) {
				Element eleItemInfo = (Element) nl.item(j);
				if (!YRCPlatformUI.isVoid(eleItemInfo
						.getAttribute("LegacyItemNumber"))) {
					getControl("txtItemId").setFocus();
					setFieldValue("txtItemId", eleItemInfo
							.getAttribute("LegacyItemNumber"));
				} else {
					YRCPlatformUI.showError("Error","Invalid Customer Item - "+getFieldValue("txtCustItemId")+"!");
					getControl("txtCustItemId").setFocus();
					setFieldValue("txtItemId", "");
				}
				//only one item is expected
				break;
			}
		}
		else
		{
			YRCPlatformUI.showError("Error","Invalid Customer Item - "+getFieldValue("txtCustItemId")+"!");
			getControl("txtCustItemId").setFocus();
			setFieldValue("txtItemId", "");
		}
	}
	
	public void firePnA(){
			YRCApiContext context = new YRCApiContext();
		    context.setApiName("XPXPandAWebService");
		    context.setFormId(getFormId());
		    context.setInputXml(preparePnAInput());
		    callApi(context);			
	}
	private Document preparePnAInput(){
			Element orderLineElement = getTargetModel("XPXReferenceOrderLine");
			String strItemID = orderLineElement.getAttribute("ItemID");
			String orderingUOM = orderLineElement.getAttribute("TransactionalUOM");
			Element eleOrderDetails = (Element) page.getOrderLinesPanel().getPageBehavior().getOrderDetails();
			Element eleCustDetails = (Element) page.getOrderLinesPanel().getPageBehavior().getCustomerDetails();
			Element custDetailsElement = YRCXmlUtils.getChildElement(eleCustDetails, "Customer");
			Element custDetailsExtnElement = YRCXmlUtils.getChildElement(custDetailsElement, "Extn");
			Document returnDoc = null;
			
			returnDoc = YRCXmlUtils.createFromString("<PriceAndAvailability><Items></Items></PriceAndAvailability>");
			Element eleReturn = returnDoc.getDocumentElement();
			String customerID = custDetailsExtnElement.getAttribute("ExtnLegacyCustNumber");
			String envId = custDetailsExtnElement.getAttribute("ExtnEnvironmentCode");
			String orgEnvId = custDetailsExtnElement.getAttribute("ExtnOrigEnvironmentCode");
			String Company = custDetailsExtnElement.getAttribute("ExtnCompanyCode");
			String CustomerBranch = custDetailsExtnElement.getAttribute("ExtnCustomerDivision");
			String ShipToSuffix = custDetailsExtnElement.getAttribute("ExtnShipToSuffix");
			
			String OrderBranch = !YRCPlatformUI.isVoid(custDetailsExtnElement.getAttribute("ExtnCustOrderBranch"))?
					custDetailsExtnElement.getAttribute("ExtnCustOrderBranch"):
						custDetailsExtnElement.getAttribute("ExtnShipFromBranch");
			addXMLTag(returnDoc,eleReturn,"SourceIndicator","1");
			addXMLTag(returnDoc,eleReturn,"EnvironmentId",envId);
			addXMLTag(returnDoc,eleReturn,"CustomerEnvironmentId",orgEnvId);
			addXMLTag(returnDoc,eleReturn,"Company",Company);
			addXMLTag(returnDoc,eleReturn,"CustomerBranch",CustomerBranch);
			addXMLTag(returnDoc,eleReturn,"CustomerNumber",customerID);
			addXMLTag(returnDoc,eleReturn,"ShipToSuffix",ShipToSuffix);
			addXMLTag(returnDoc,eleReturn,"OrderBranch",OrderBranch);
			NodeList inputNodeList = returnDoc.getElementsByTagName("Items");
			Element inputNodeListElemt = (Element)inputNodeList.item(0);
			Element eleItem = YRCXmlUtils.createChild(inputNodeListElemt, "Item");
			addXMLTag(returnDoc,eleItem,"LineNumber","1");
			addXMLTag(returnDoc,eleItem,"LegacyProductCode",strItemID);
			addXMLTag(returnDoc,eleItem,"RequestedQtyUOM", orderingUOM);
			addXMLTag(returnDoc,eleItem,"RequestedQty","1");
			return returnDoc;
	}
	
	private static void addXMLTag(Document returnDoc, Element element, String tagName, String tagValue){
		Element textNode = YRCXmlUtils.createChild(element, tagName);
		Text txt = returnDoc.createTextNode(tagName);
		txt.setTextContent(tagValue);
		textNode.appendChild(txt);
	}
	
	private void processPnAResponse(Element pandaElement){
		String envCode = YRCXmlUtils.getXPathElement(pandaElement, "/PriceAndAvailability/EnvironmentId").getTextContent();
		Element statusElement = YRCXmlUtils.getXPathElement(pandaElement, "/PriceAndAvailability/Items/Item/LineStatusCode");
		String status = statusElement.getTextContent();
		
		//PnA is success
		if("00".equals(status))
		{
			YRCScreenUtils.applyTheme(page.txtItemId, "Text");
			YRCScreenUtils.applyTheme(page.txtCustItemId, "Text");
			YRCScreenUtils.applyTheme(page.txtOrderingUOM, "Text");
			setFieldValue("lblErr","");
			invokeReprocessRefOrderService();
		}
		else
		{
			String inputString = envCode+"_"+status;
			displayError(inputString,page);
		}
	}
	
	public void displayError(String status, XPXRefOrderLinePanel obj){
		if(!(obj.getOrderLinesPanel().getPageBehavior().StatusTable).containsKey(status)){
			setFieldValue("lblErr", "Error");
			
		}else{
			if("A_01".equals(status)||"M_01".equals(status))
			{
				YRCScreenUtils.applyTheme(page.txtItemId, "InvalidData");
				page.txtItemId.setToolTipText("Invalid Item");
			}
			else if("A_03".equals(status)||"M_03".equals(status) || "M_12".equals(status) || "M_11".equals(status))
			{
				YRCScreenUtils.applyTheme(page.txtOrderingUOM, "InvalidData");
				page.txtOrderingUOM.setToolTipText("Invalid UOM");
			}
			setFieldValue("lblErr",(page.getOrderLinesPanel().getPageBehavior().StatusTable).get(status));
		}
	}
	
	public Element getLineModel(){
		Element linesElement = getTargetModel("XPXReferenceOrderLine");
		return linesElement;
	}
	

	public void reprocessReferenceOrderForLine() {
//		invokeReprocessRefOrderService();
		this.firePnA();
	}	
	
	private void invokeReprocessRefOrderService() {
		String api[] = {"XPXReprocessReferenceOrderService"};
		Document[] docInput = {prepareInput()};
		callApis(api, docInput);
	}

	private Document prepareInput() {
		Element orderDetailsEle = this.page.getOrderLinesPanel().getPageBehavior().getOrderDetails();
		
		orderDetailsEle.setAttribute("ReSubmit", "Y");
		Element orderLineElement = getTargetModel("XPXReferenceOrderLine");
		if(!orderLineElement.hasAttribute("orderLineElement"))
			orderLineElement.setAttribute("PrimeLineNo", String.valueOf(primeLineNo));
		NodeList lineList = orderDetailsEle.getElementsByTagName("XPXRefOrderLine");
		if(!YRCPlatformUI.isVoid(lineList)&&lineList.getLength()>0)
		{
			for(int i=0;i<lineList.getLength();i++)
			{
				Element lineElement = (Element) lineList.item(i);
				if(lineElement.getAttribute("PrimeLineNo").equals(orderLineElement.getAttribute("PrimeLineNo")))
				{
					String CustomerProductCode=getFieldValue("txtCustItemId").trim();
					String PricingUOM=getFieldValue("txtPricingUOM").trim();
					lineElement.setAttribute("CustomerProductCode",CustomerProductCode);
					lineElement.setAttribute("PricingUOM",PricingUOM);
					
					lineElement.setAttribute("ItemID", orderLineElement.getAttribute("ItemID"));
					lineElement.setAttribute("TransactionalUOM", orderLineElement.getAttribute("TransactionalUOM"));
				}
			}
		}
		
		// Importing RefOrderHdr in to a List Object.
		Document docRefOrderList = YRCXmlUtils.createDocument("XPXRefOrderHdrList");
		YRCXmlUtils.importElement(docRefOrderList.getDocumentElement(), orderDetailsEle);
		
		return docRefOrderList;
	}

	public void getLegacyItemNumberItemInfo(String customerNumber) {
		Element eleOrderDetails = (Element) page.getOrderLinesPanel().getPageBehavior().getOrderDetails();
		Element eleCustDetails = (Element) page.getOrderLinesPanel().getPageBehavior().getCustomerDetails();
		Element custDetailsElement = YRCXmlUtils.getChildElement(eleCustDetails, "Customer");
		Element custDetailsExtnElement = YRCXmlUtils.getChildElement(custDetailsElement, "Extn");
		String envId = custDetailsExtnElement.getAttribute("ExtnEnvironmentCode");
		String Company = custDetailsExtnElement.getAttribute("ExtnCompanyCode");
		String customerID = custDetailsExtnElement.getAttribute("ExtnLegacyCustNumber");
		
		Document XREFInputDoc = YRCXmlUtils.createDocument("XPXItemcustXref");
        XREFInputDoc.getDocumentElement().setAttribute("EnvironmentCode", envId);
        XREFInputDoc.getDocumentElement().setAttribute("CompanyCode", Company);
        XREFInputDoc.getDocumentElement().setAttribute("CustomerNumber",customerID);
        XREFInputDoc.getDocumentElement().setAttribute("CustomerItemNumber",customerNumber);
		String api[] = {"getXrefList"};
		Document[] docInput = {XREFInputDoc};
		callApis(api, docInput);        
 	}
}