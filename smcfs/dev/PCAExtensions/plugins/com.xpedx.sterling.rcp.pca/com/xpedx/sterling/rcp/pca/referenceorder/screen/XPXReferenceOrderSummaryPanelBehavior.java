package com.xpedx.sterling.rcp.pca.referenceorder.screen;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Hashtable;

import javax.swing.text.DefaultEditorKit.CutAction;

import org.eclipse.swt.widgets.Control;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;

import com.xpedx.sterling.rcp.pca.util.XPXConstants;
import com.yantra.yfc.rcp.YRCApiContext;
import com.yantra.yfc.rcp.YRCBehavior;
import com.yantra.yfc.rcp.YRCEditorInput;
import com.yantra.yfc.rcp.YRCPlatformUI;
import com.yantra.yfc.rcp.YRCXmlUtils;

/**
 * @author sdodda
 * 
 * Generated by MTCE
 */

public class XPXReferenceOrderSummaryPanelBehavior extends YRCBehavior {

	private XPXReferenceOrderSummaryPanel page;
	private Element eleRefOrderDetails;
	private Element inputElement;
	private String enterpriseCode;
	private String sOrgCode;
	private String sBillToID;
	private String sUserID;
	private String sShipToID;
	private Element eleCustomerInfo;
	
	public Hashtable<String, String> StatusTable = new Hashtable<String, String>();
	

	/**
	 * Constructor for the behavior class.
	 */
	public XPXReferenceOrderSummaryPanelBehavior(XPXReferenceOrderSummaryPanel ownerComposite, String formId, Object inputObject) {
		super(ownerComposite, formId, inputObject);
		
		this.page = ownerComposite;
		this.inputElement = ((YRCEditorInput)inputObject).getXml();
		init();
		eleRefOrderDetails = null;
		eleCustomerInfo = null;
		this.readInput(inputObject);
		
	}

	private void readInput(Object inputObject) {
		enterpriseCode = ((YRCEditorInput) inputObject).getAttributeValue("Order/@EnterpriseCode");
		sOrgCode = ((YRCEditorInput) inputObject).getAttributeValue("Order/@SellerOrganizationCode");
		sBillToID = ((YRCEditorInput) inputObject).getAttributeValue("Order/@BillToID");
		sUserID = ((YRCEditorInput) inputObject).getAttributeValue("Order/@BuyerUserId");
		sShipToID = ((YRCEditorInput) inputObject).getAttributeValue("Order/@BuyerOrganizationCode");
	}

	/**
	 * This method initializes the behavior class.
	 */
	@Override
	public void init() {
		if(this.inputElement!=null && !YRCPlatformUI.isVoid(YRCXmlUtils.getAttribute(this.inputElement, "RefOrderHdrKey"))){
			String[] apinames = {"getXPXReferenceOrderDetailsService"};
			Document[] docInput = {
					YRCXmlUtils.createFromString("<Order RefOrderHdrKey='" + YRCXmlUtils.getAttribute(this.inputElement, "RefOrderHdrKey") + "' />")
			};
			callApis(apinames, docInput);
		}
		preparePnAStatusCodes();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.yantra.yfc.rcp.YRCBaseBehavior#handleApiCompletion(com.yantra.yfc.rcp.YRCApiContext)
	 */
	@Override
	public void handleApiCompletion(YRCApiContext ctx) {
		if (ctx.getInvokeAPIStatus() > 0){
			if (page.isDisposed()) {
				YRCPlatformUI.trace("Page is Disposed");
			} else {
				String[] apinames = ctx.getApiNames();
				for (int i = 0; i < apinames.length; i++) {
					String apiname = apinames[i];
					if ("getXPXReferenceOrderDetailsService".equals(apiname)) {
						Element outXml = ctx.getOutputXmls()[i].getDocumentElement();
						eleRefOrderDetails = outXml;
						stampLineNumberOnRefernceOrderLine(eleRefOrderDetails);
						setModel("OriginalOrder", eleRefOrderDetails, false);
						
						if(!YRCPlatformUI.isVoid(eleRefOrderDetails.getAttribute("BuyerID"))){
							this.invokeGetCustomerListAPI(eleRefOrderDetails,"","sap");
						} else {
							this.handleOrderDetails();
							page.showRootPanel(true);
						}
						
					} else if("getCustomerList".equals(apinames[i])&& "sap".equals(ctx.getUserData("CustomerType"))){
						Document docCustomerInfo = ctx.getOutputXmls()[i];
						Element eleCustomerInfo = docCustomerInfo.getDocumentElement();
						String sapCustOrgCode=null; 
						NodeList nl = eleCustomerInfo.getElementsByTagName("Customer");
						if (!YRCPlatformUI.isVoid(nl)) {
							for (int j = 0; j < nl.getLength(); j++) {
								Element sapCustomerElement = (Element) nl.item(j);
								sapCustOrgCode = sapCustomerElement.getAttribute("OrganizationCode");
								break;
							}
						}
						this.eleCustomerInfo = eleCustomerInfo;
						String etradingFlag = eleRefOrderDetails.getAttribute("IsInvalidETradingID");
						if("N".equals(etradingFlag))
						{
							this.invokeGetCustomerListAPI(eleRefOrderDetails,sapCustOrgCode,"shipto");
						} else {
							this.handleOrderDetails();
							page.showRootPanel(true);
						}
					} else if("getCustomerList".equals(apinames[i])&& "shipto".equals(ctx.getUserData("CustomerType"))){
						Document docCustomerInfo = ctx.getOutputXmls()[i];
						Element eleCustomerInfo = docCustomerInfo.getDocumentElement();
						setModel("CustomerDetails",eleCustomerInfo);
						this.handleOrderDetails();
						page.showRootPanel(true);
					}					
					if("XPXPandAWebService".equals(apinames[i])){
						Document docPandAInfo = ctx.getOutputXmls()[i];
						Element elePandAInfo = docPandAInfo.getDocumentElement();
						setModel("PandA",elePandAInfo);
						processPnAResponse(elePandAInfo);
					}
			        if(YRCPlatformUI.equals(ctx.getApiName(), "XPXReprocessReferenceOrderService"))
			        {
			        	Element outXml=ctx.getOutputXml().getDocumentElement();
			        }  							
				}
			}
		}
		//In case of Invoke API failure
		else if(ctx.getInvokeAPIStatus()==-1){
			Element outXml = ctx.getOutputXml().getDocumentElement();
			if("Errors".equals(outXml.getNodeName())){
				Element errorEle = (Element) outXml.getElementsByTagName("Error").item(0);
				if (!YRCPlatformUI.isVoid(errorEle)) {
					YRCPlatformUI.trace(errorEle.getAttribute("ErrorDescription"), outXml);
					YRCPlatformUI.showError("Failed!", errorEle.getAttribute("ErrorDescription"));
				}
			}
		}
		super.handleApiCompletion(ctx);
	}
	
	private void handleOrderDetails() {
		Element orderDetailsElem = getModel("OriginalOrder");
		page.createHeader(orderDetailsElem);
		setModel("OrderDetails", orderDetailsElem, false);
		
		Element orderLinesElement = YRCXmlUtils.getChildElement(orderDetailsElem, "XPXRefOrderLineList");
		boolean isAnyOrderLineExists = false;
		ArrayList listOrderLine = YRCXmlUtils.getChildren(orderLinesElement, "XPXRefOrderLine");
		if (listOrderLine.size() > 0) {
			isAnyOrderLineExists = true;
		}

		if (isAnyOrderLineExists) {
			page.createLines(listOrderLine);
			if(listOrderLine.size()>1 && "Y".equals(orderDetailsElem.getAttribute("IsReprocessibleFlag")))
				page.btnResubmit.setVisible(true);
		} else {
			// Do nothing.
		}
		
		setDirty(false);
	}

	private void callApi(String apinames, Document inputXml) {
		YRCApiContext ctx = new YRCApiContext();
		ctx.setFormId(getFormId());
		ctx.setApiName(apinames);
		ctx.setInputXml(inputXml);
		if (!page.isDisposed())
			callApi(ctx, page);
	}

	private void callApis(String apinames[], Document inputXmls[]) {
		YRCApiContext ctx = new YRCApiContext();
		ctx.setFormId(getFormId());
		ctx.setApiNames(apinames);
		ctx.setInputXmls(inputXmls);
		if (!page.isDisposed())
			callApi(ctx, page);
	}
	
	private void stampLineNumberOnRefernceOrderLine(Element referenceOrderElement){
		Element orderLinesElement = YRCXmlUtils.getChildElement(referenceOrderElement, "XPXRefOrderLineList");
		NodeList referenceOrderLineList = orderLinesElement.getElementsByTagName("XPXRefOrderLine");
		for(int lineCount=0;lineCount<referenceOrderLineList.getLength();lineCount++){
			Element referenceOrderLineElement = (Element)referenceOrderLineList.item(lineCount);
			referenceOrderLineElement.setAttribute("PrimeLineNo", new Integer(lineCount+1).toString());
		}
	}
	
	private void firePnA(){
		updateRefOrderDetailModel();
		invokePnA(preparePnAInput());
	}

	private void updateRefOrderDetailModel() {
		Element orderDetails=getOrderDetails();
		Control panelControl[] = page.pnlDynamicLineParent.getChildren();
		int len = panelControl.length;
		for(int i=0;i<len;i++)
		{
			XPXRefOrderLinePanel linePanel = (XPXRefOrderLinePanel)panelControl[i];
			Element orderLineElement = linePanel.getBehavior().getLineModel();
	
			NodeList lineList = orderDetails.getElementsByTagName("XPXRefOrderLine");
			if(!YRCPlatformUI.isVoid(lineList)&&lineList.getLength()>0)
			{
				for(int j=0;j<lineList.getLength();j++)
				{
					Element detailLineEle = (Element) lineList.item(j);
					if(detailLineEle.getAttribute("PrimeLineNo").equals(orderLineElement.getAttribute("PrimeLineNo")))
					{
						detailLineEle.setAttribute("ItemID", orderLineElement.getAttribute("ItemID"));
						detailLineEle.setAttribute("TransactionalUOM", orderLineElement.getAttribute("TransactionalUOM"));
						detailLineEle.setAttribute("PricingUOM", orderLineElement.getAttribute("PricingUOM"));
						break;
					}
				}
			}	
	}
		this.eleRefOrderDetails=orderDetails;
	}
	
	private Document preparePnAInput(){
		
		Element eleCustDetails = getModel("CustomerDetails");
		Element custDetailsElement = YRCXmlUtils.getChildElement(eleCustDetails, "Customer");
		Element custDetailsExtnElement = YRCXmlUtils.getChildElement(custDetailsElement, "Extn");
		Document returnDoc = null;
		
		returnDoc = YRCXmlUtils.createFromString("<PriceAndAvailability><Items></Items></PriceAndAvailability>");
		Element eleReturn = returnDoc.getDocumentElement();
		String customerID = custDetailsExtnElement.getAttribute("ExtnLegacyCustNumber");
		String envId = custDetailsExtnElement.getAttribute("ExtnEnvironmentCode");
		String orgEnvId = custDetailsExtnElement.getAttribute("ExtnOrigEnvironmentCode");
		String Company = custDetailsExtnElement.getAttribute("ExtnCompanyCode");
		String CustomerBranch = custDetailsExtnElement.getAttribute("ExtnShipFromBranch");
		String ShipToSuffix = custDetailsExtnElement.getAttribute("ExtnShipToSuffix");
		
		
		
		String OrderBranch = !YRCPlatformUI.isVoid(custDetailsExtnElement.getAttribute("ExtnCustOrderBranch"))?
				custDetailsExtnElement.getAttribute("ExtnCustOrderBranch"):
					custDetailsExtnElement.getAttribute("ExtnShipFromBranch");
		addXMLTag(returnDoc,eleReturn,"SourceIndicator","1");
		addXMLTag(returnDoc,eleReturn,"EnvironmentId",envId);
		addXMLTag(returnDoc,eleReturn,"CustomerEnvironmentId",orgEnvId);
		addXMLTag(returnDoc,eleReturn,"Company",Company);
		addXMLTag(returnDoc,eleReturn,"CustomerBranch",CustomerBranch);
		addXMLTag(returnDoc,eleReturn,"CustomerNumber",customerID);
		addXMLTag(returnDoc,eleReturn,"ShipToSuffix",ShipToSuffix);
		addXMLTag(returnDoc,eleReturn,"OrderBranch",OrderBranch);
		NodeList inputNodeList = returnDoc.getElementsByTagName("Items");
		Element inputNodeListElemt = (Element)inputNodeList.item(0);
		
		NodeList referenceLineNodeList = getOrderDetails().getElementsByTagName("XPXRefOrderLine");
		int nodeLength = referenceLineNodeList.getLength();
		for(int i=0;i<nodeLength;i++){
			Element referenceLineElement = (Element)referenceLineNodeList.item(i);
			String strItemID = referenceLineElement.getAttribute("ItemID");
			String orderingUOM = referenceLineElement.getAttribute("TransactionalUOM");
			Element eleItem = YRCXmlUtils.createChild(inputNodeListElemt, "Item");
			addXMLTag(returnDoc,eleItem,"LineNumber","1");
			addXMLTag(returnDoc,eleItem,"LegacyProductCode",strItemID);
			addXMLTag(returnDoc,eleItem,"RequestedQtyUOM", orderingUOM);
			addXMLTag(returnDoc,eleItem,"RequestedQty","1");
		}
		return returnDoc;
	}

	private void invokePnA(Document returnDoc) {
		YRCApiContext context = new YRCApiContext();
	    context.setApiName("XPXPandAWebService");
	    context.setFormId(getFormId());
	    context.setInputXml(returnDoc);
	    callApi(context);
	}
	private static void addXMLTag(Document returnDoc, Element element, String tagName, String tagValue){
		Element textNode = YRCXmlUtils.createChild(element, tagName);
		Text txt = returnDoc.createTextNode(tagName);
		txt.setTextContent(tagValue);
		textNode.appendChild(txt);
	}
	
	private void invokeGetCustomerListAPI(Element orderElement,String sapCustOrgCode,String customerType) {
		Document customerDoc = YRCXmlUtils.createDocument("Customer");
		Element inputCustomerElement = customerDoc.getDocumentElement();
		Element inputExtnElement = customerDoc.createElement("Extn");
		if(!"sap".equals(customerType))
		{
			inputCustomerElement.setAttribute("OrganizationCode", sapCustOrgCode);
			inputExtnElement.setAttribute("ExtnETradingID", orderElement.getAttribute("EtradingID"));
		}
		else
		{
			inputExtnElement.setAttribute("ExtnBuyerID", orderElement.getAttribute("BuyerID"));			
		}
		inputCustomerElement.appendChild(inputExtnElement);
		YRCApiContext context = new YRCApiContext();
	    context.setApiName("getCustomerList");
	    context.setFormId(getFormId());
	    context.setInputXml(customerDoc);
	    context.setUserData("CustomerType", customerType);
	    callApi(context);
	}
	
	private void processPnAResponse(Element pnaElement){
		Hashtable<String, String> htPandAResponse = new Hashtable<String, String>();
		setEachLineStatus(pnaElement,htPandAResponse);

		Control panelControl[] = page.pnlDynamicLineParent.getChildren();
		int len = panelControl.length;
		
		boolean isPnASuccess =true;
		
		for(int i=0;i<len;i++){
			XPXRefOrderLinePanel linePanel = (XPXRefOrderLinePanel)panelControl[i];
			Element lineElement = linePanel.getBehavior().getLineModel();
			String lineNumber = lineElement.getAttribute("PrimeLineNo");
			String statusCode = htPandAResponse.get(lineNumber);
			if(!"A_00".equals(statusCode)&&!"M_00".equals(statusCode))
			{
				isPnASuccess=false;			
			}
			linePanel.getBehavior().displayError(statusCode, linePanel);
		}
		if(isPnASuccess)
		{
			invokeReprocessRefOrderService();
		}
	
	}
	
	private void invokeReprocessRefOrderService() {
		Element orderDetailsEle = this.getOrderDetails();
		orderDetailsEle.setAttribute("Resubmit", "Y");
		
		// Importing RefOrderHdr in to a List Object.
		Document docRefOrderList = YRCXmlUtils.createDocument("XPXRefOrderHdrList");
		YRCXmlUtils.importElement(docRefOrderList.getDocumentElement(), orderDetailsEle);
		
		String api[] = {"XPXReprocessReferenceOrderService"};
		Document[] docInput = {docRefOrderList};
		callApis(api, docInput);
	}
	
	private void setEachLineStatus(Element pandAElement,Hashtable<String,String> htPandA){
		String envId = YRCXmlUtils.getXPathElement(pandAElement, "/PriceAndAvailability/EnvironmentId").getTextContent();
		NodeList itemsList = pandAElement.getElementsByTagName("Item");
		int itemLength = itemsList.getLength();
		if(itemLength != 0){
			for(int i=0;i<itemLength;i++){
				Element itemElement = (Element)itemsList.item(i);
				Element lineNumberElement = YRCXmlUtils.getXPathElement(itemElement, "/Item/LineNumber");
				String line = lineNumberElement.getTextContent();
				Element lineStatusElement = YRCXmlUtils.getXPathElement(itemElement, "/Item/LineStatusCode");
				String lineStatus = lineStatusElement.getTextContent();
				String status = envId+"_"+lineStatus;
				htPandA.put(line, status);
			}
		}
	}
	public Element getInputElement(){
		return this.inputElement;
	}
	public Element getOrderDetails(){
		return this.eleRefOrderDetails;
	}
	
	public Element getCustomerDetails(){
		Element customerElement = getModel("CustomerDetails");
		return customerElement;
	}

	public void reprocessReferenceOrder() {
		// TODO Auto-generated method stub
		this.firePnA();
	}
	
	private void preparePnAStatusCodes(){
		StatusTable.put("A_00", "");
		StatusTable.put("A_01", "Invalid Item Number");
		StatusTable.put("A_03", "Bad UOM Not a Access primary or alternate UOM");
		StatusTable.put("M_00", "");
		StatusTable.put("M_01", "Invalid Item Number");
		StatusTable.put("M_03", "Bad UOM Not a Max primary or alternate UOM");
		StatusTable.put("M_12", "Requested UOM not in eComm UOM file");
		StatusTable.put("M_11", "Requested UOM missing (blank)");
	}

	public Element getCustomerInfo() {
		return eleCustomerInfo;
	}

}