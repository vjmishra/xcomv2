	
/*
 * Created on Jul 12,2010
 *
 */
package com.xpedx.sterling.rcp.pca.divisionMaintainance.screen;

import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.custom.StyledText;
import org.eclipse.swt.events.FocusAdapter;
import org.eclipse.swt.events.FocusEvent;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.Widget;

import com.xpedx.sterling.rcp.pca.util.XPXConstants;
import com.yantra.yfc.rcp.IYRCComposite;
import com.yantra.yfc.rcp.IYRCPanelHolder;
import com.yantra.yfc.rcp.YRCButtonBindingData;
import com.yantra.yfc.rcp.YRCComboBindingData;
import com.yantra.yfc.rcp.YRCConstants;
import com.yantra.yfc.rcp.YRCEditorInput;
import com.yantra.yfc.rcp.YRCPlatformUI;
import com.yantra.yfc.rcp.YRCScrolledCompositeListener;
import com.yantra.yfc.rcp.YRCTableBindingData;
import com.yantra.yfc.rcp.YRCTblClmBindingData;
import com.yantra.yfc.rcp.YRCTextBindingData;

/**
 * @author jkotha
 *
 * Generated by Sterling RCP Tools
 * Copyright © 2005, 2006 Sterling Commerce, Inc. All Rights Reserved.
 */

public class DivisionMaintainancePanel extends Composite implements IYRCComposite {

	private Composite pnlRoot = null;
    private DivisionMaintainancePanelBehavior myBehavior;
    public static final String FORM_ID = "com.xpedx.sterling.rcp.pca.divisionMaintainance.screen.DivisionMaintainancePanel";
    
    private Composite DataPnl;
    private ScrolledComposite scrollComposite;
    
    private Label lblName;
	private Text txtName;
	private Label lblDivisionType;
	private Combo cmbDivisionType;
	private Label lblDivisionBrand;
	private Text txtDivisionBrand;
	private Label lblAddressLine1;
	private Text txtAddressLine1;
	private Label lblAddressLine2;
	private Text txtAddressLine2;
	private Label lblAddressLine3;
	private Text txtAddressLine3;
	private Label lblCity;
	private Text txtCity;
	private Label lblStateOrProvince;
	private Text txtStateOrProvince;
	private Label lblZipOrPostalCode;
	private Text txtZipOrPostalCode;
	private Label lblPhone1,lblPhone2;
	private Text txtPhone1,txtPhone2;
	private Label lblFax1,lblFax2;
	private Text txtFax1,txtFax2;
	private Label lblDivisionContact;
	private Combo cmbDivisionContact;
	private Label lblMaxOrderAmount,lblMinOrderAmount,lblSmallOrderFee;
	private Text txtMaxOrderAmount,txtMinOrderAmount,txtSmallOrderFee;
	private Label lblWillCallInformation,lblDeliveryInformation,lblDivEmailForPaper, lblDivEmailForNonPaper,lblDeliveryCutoffTime;
	private Text txtWillCallInformation,txtDeliveryInformation,txtDivEmailForPaper, txtDivEmailForNonPaper,txtDeliveryCutoffTime;
	private Label lblPricingWarehouse,lblCountryCode,lblCurrencyCode;
	private Text txtPricingWarehouse,txtCountryCode,txtCurrencyCode;
	private Label lblLastModifiedBy;
	private Text txtLastModifiedBy;
	
	// fix for JIRA 1540 - added LastModifiedData field
	private Label lblLastModifiedData;
	private Text txtLastModifiedData;
	
	
	Table tblTransferCircles;
	
	private Text txtGeoCode,txtJDECode,txtETradingID;
	private Text txtDivisionEmailID,txtSmapleRoomEmailId;
	private Text txtNextDayCutoffTime;
	
	private Button btnUpdate;
	private Button btnCancel;
	private StyledText stxtCurrencyCode;
	private FocusAdapter focusListener;

	public DivisionMaintainancePanel(Composite parent, int style, Object inputObject) {
		super(parent, style);
		YRCEditorInput input = (YRCEditorInput) inputObject;
		
		focusListener = new FocusAdapter(){
			public void focusGained(FocusEvent e) {
				Widget ctrl = e.widget;
				String ctrlName = (String) ctrl.getData("name");
				if (ctrlName != null) {
					if (YRCPlatformUI.equals(ctrlName, "txtSmallOrderFee")) {
						txtSmallOrderFee.setText(txtSmallOrderFee.getText().replaceAll(",", ""));
						txtSmallOrderFee.setTextLimit(16);
					}
					if (YRCPlatformUI.equals(ctrlName, "txtMaxOrderAmount")) {
						txtMaxOrderAmount.setText(txtMaxOrderAmount.getText().replaceAll(",", ""));
						txtMaxOrderAmount.setTextLimit(16);
					}
					if (YRCPlatformUI.equals(ctrlName, "txtMinOrderAmount")) {
						txtMinOrderAmount.setText(txtMinOrderAmount.getText().replaceAll(",", ""));
						txtMinOrderAmount.setTextLimit(16);
					}

				}
			}

			public void focusLost(FocusEvent e) {
				Widget ctrl = e.widget;
				String ctrlName = (String) ctrl.getData("name");
				if (ctrlName != null) {
					if (YRCPlatformUI.equals(ctrlName, "txtSmallOrderFee")) {
						txtSmallOrderFee.setTextLimit(20);
					}
					if (YRCPlatformUI.equals(ctrlName, "txtMaxOrderAmount")) {
						txtMaxOrderAmount.setTextLimit(20);
					}
					if (YRCPlatformUI.equals(ctrlName, "txtMinOrderAmount")) {
						txtMinOrderAmount.setTextLimit(20);
					}
				}
			}
		};
		initialize();
        setBindingForComponents();
        myBehavior = new DivisionMaintainancePanelBehavior(this, FORM_ID,input);
        checkUserPermissions();
        updateNonBindedComponents();
        adjustScrollPnl(scrollComposite, DataPnl,
				getRootPanel(), true, true);
	}

	private void initialize() {
		createRootPanel();
		this.setLayout(new FillLayout());
		setSize(new Point(600,1200));
	}
	
    private void setBindingForComponents() {
		YRCTextBindingData tbd = null;
		YRCComboBindingData cbd = null;
		setBindingForButton();
		
		//Division Detail Screen Binding
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/@OrganizationCode;Organization:/Organization/@OrganizationName");
		tbd.setKey("DisplayDivisionNameKey");
//		tbd.setTargetBinding("SaveOrganization:/Organization/@OrganizationName");
		tbd.setName("txtName");
		txtName.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
		cbd = new YRCComboBindingData();
		cbd.setCodeBinding("TypeCode");
		cbd.setDescriptionBinding("TypeDescription");
		cbd.setListBinding("DivisionTypes:/Types/Type");
		cbd.setSourceBinding("Organization:/Organization/Extn/@ExtnDivisionType");
		cbd.setTargetBinding("SaveOrganization:/Organization/Extn/@ExtnDivisionType");
		cbd.setName("cmbDivisionType");
		cmbDivisionType.setData(YRCConstants.YRC_COMBO_BINDING_DEFINATION, cbd);
		
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/Extn/@ExtnBrandCode");
//		tbd.setTargetBinding("SaveOrganization:/Organization/Extn/@ExtnLegacySystem");
		tbd.setName("txtDivisionBrand");
		txtDivisionBrand.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
        
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/CorporatePersonInfo/@AddressLine1");
//		tbd.setTargetBinding("SaveOrganization:/Organization/CorporatePersonInfo/@AddressLine1");
		tbd.setName("txtAddressLine1");
		txtAddressLine1.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/CorporatePersonInfo/@AddressLine2");
//		tbd.setTargetBinding("SaveOrganization:/Organization/CorporatePersonInfo/@AddressLine2");
		tbd.setName("txtAddressLine2");
		txtAddressLine2.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/CorporatePersonInfo/@AddressLine3");
//		tbd.setTargetBinding("SaveOrganization:/Organization/CorporatePersonInfo/@AddressLine3");
		tbd.setName("txtAddressLine3");
		txtAddressLine3.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/CorporatePersonInfo/@City");
//		tbd.setTargetBinding("SaveOrganization:/Organization/CorporatePersonInfo/@City");
		tbd.setName("txtCity");
		txtCity.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/CorporatePersonInfo/@State");
//		tbd.setTargetBinding("SaveOrganization:/Organization/CorporatePersonInfo/@State");
		tbd.setName("txtStateOrProvince");
		txtStateOrProvince.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/CorporatePersonInfo/@ZipCode");
//		tbd.setTargetBinding("SaveOrganization:/Organization/CorporatePersonInfo/@ZipCode");
		tbd.setName("txtZipOrPostalCode");
		txtZipOrPostalCode.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

//Country Code
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/CorporatePersonInfo/@Country");
//		tbd.setTargetBinding("SaveOrganization:/Organization/CorporatePersonInfo/@Country");
		tbd.setName("txtCountryCode");
		txtCountryCode.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
//Currency Code
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/Extn/@ExtnCurrencyCode");
//		tbd.setTargetBinding("SaveOrganization:/Organization/Extn/@ExtnCurrencyCode");
		tbd.setName("txtCurrencyCode");
		txtCurrencyCode.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
//pricing Warehouse
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/Extn/@ExtnPriceWarehouse;Organization:/Organization/Extn/@ExtnPriceWareHouseName");
		tbd.setKey("DisplayDivisionNameKey");
//		tbd.setTargetBinding("SaveOrganization:/Organization/Extn/@ExtnPriceWarehouse");
		tbd.setName("txtPricingWarehouse");
		
		txtPricingWarehouse.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/CorporatePersonInfo/@DayPhone");
//		tbd.setTargetBinding("SaveOrganization:/Organization/CorporatePersonInfo/@DayPhone");
		tbd.setName("txtPhone1");
		txtPhone1.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/CorporatePersonInfo/@EveningPhone");
		tbd.setTargetBinding("SaveOrganization:/Organization/CorporatePersonInfo/@EveningPhone");
		tbd.setName("txtPhone2");
		txtPhone2.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/CorporatePersonInfo/@DayFaxNo");
//		tbd.setTargetBinding("SaveOrganization:/Organization/CorporatePersonInfo/@DayFaxNo");
		tbd.setName("txtFax1");
		txtFax1.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/CorporatePersonInfo/@EveningFaxNo");
		tbd.setTargetBinding("SaveOrganization:/Organization/CorporatePersonInfo/@EveningFaxNo");
		tbd.setName("txtFax2");
		txtFax2.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
		cbd = new YRCComboBindingData();
		cbd.setCodeBinding("Loginid");
		cbd.setDescriptionBinding("@Loginid;@Username");
		cbd.setListBinding("ContactList:/UserList/User");
		cbd.setKey("DisplayDivisionContactKey");
		cbd.setSourceBinding("Organization:/Organization/Extn/@ExtnDivisionContact");
		cbd.setTargetBinding("SaveOrganization:/Organization/Extn/@ExtnDivisionContact");
		cbd.setName("cmbDivisionContact");
		cmbDivisionContact.setData(YRCConstants.YRC_COMBO_BINDING_DEFINATION, cbd);
		
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/Extn/@ExtnMinOrderAmt");
		tbd.setTargetBinding("SaveOrganization:/Organization/Extn/@ExtnMinOrderAmt");
		tbd.setDataType("Price");
		tbd.setName("txtMinOrderAmount");
		txtMinOrderAmount.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/Extn/@ExtnMaxOrderAmt");
		tbd.setTargetBinding("SaveOrganization:/Organization/Extn/@ExtnMaxOrderAmt");
		tbd.setDataType("Price");
		tbd.setName("txtMaxOrderAmount");
		txtMaxOrderAmount.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/Extn/@ExtnSmallOrderFee");
		tbd.setTargetBinding("SaveOrganization:/Organization/Extn/@ExtnSmallOrderFee");
		tbd.setDataType("Price");
		tbd.setName("txtSmallOrderFee");
		txtSmallOrderFee.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
		
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/Extn/@ExtnWillCallInfo");
		tbd.setTargetBinding("SaveOrganization:/Organization/Extn/@ExtnWillCallInfo");
		tbd.setName("txtWillCallInformation");
		txtWillCallInformation.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/Extn/@ExtnDeliveryInfo");
		tbd.setTargetBinding("SaveOrganization:/Organization/Extn/@ExtnDeliveryInfo");
		tbd.setName("txtDeliveryInformation");
		txtDeliveryInformation.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/Extn/@ExtnDivEmailPaper");
		tbd.setTargetBinding("SaveOrganization:/Organization/Extn/@ExtnDivEmailPaper");
		tbd.setName("txtDivEmailForPaper");
		txtDivEmailForPaper.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/Extn/@ExtnDivEmailNonPaper");
		tbd.setTargetBinding("SaveOrganization:/Organization/Extn/@ExtnDivEmailNonPaper");
		tbd.setName("txtDivEmailForNonPaper");
		txtDivEmailForNonPaper.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("Organization:/Organization/Extn/@ExtnDeliveryCutOffTime");
		tbd.setTargetBinding("SaveOrganization:/Organization/Extn/@ExtnDeliveryCutOffTime");
		tbd.setName("txtDeliveryCutoffTime");
		txtDeliveryCutoffTime.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		
		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("ModifiedByUser:/UserList/User/@Loginid;ModifiedByUser:/UserList/User/@Username");
		tbd.setKey("DisplayCSRUserKey");
		tbd.setName("txtLastModifiedBy");
		txtLastModifiedBy.setData("YRCTextBindingDefination", tbd);
		
		// fix for JIRA 1540 - added txtLastModifiedData field
		tbd = new YRCTextBindingData();
		tbd.setName("txtLastModifiedData");
		tbd.setSourceBinding("Organization:/Organization/@Modifyts");
		txtLastModifiedData.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

//		tblTransferCircles
		YRCTableBindingData bindingData = new YRCTableBindingData();
        YRCTblClmBindingData colBindings[] = new YRCTblClmBindingData[tblTransferCircles.getColumnCount()];
        colBindings[0] = new YRCTblClmBindingData();
        colBindings[0].setAttributeBinding("DivisionNo");
        colBindings[0].setColumnBinding("DivisionNo");
        colBindings[0].setSortReqd(true);
        colBindings[1] = new YRCTblClmBindingData();
        colBindings[1].setAttributeBinding("DivisionName");
        colBindings[1].setColumnBinding("DivisionName");
        colBindings[1].setSortReqd(true);
        colBindings[2] = new YRCTblClmBindingData();
        colBindings[2].setAttributeBinding("NoOfDays");
        colBindings[2].setColumnBinding("NoOfDays");
        colBindings[2].setSortReqd(true);
        colBindings[3] = new YRCTblClmBindingData();
        colBindings[3].setAttributeBinding("OrderCutOffTime");
        colBindings[3].setColumnBinding("OrderCutOffTime");
        colBindings[3].setSortReqd(true);        
        bindingData.setSortRequired(true);
        bindingData.setSourceBinding("Organization:/Organization/Extn/XPXXferCircleList/XPXXferCircle");
        bindingData.setName("tblTransferCircles");
        bindingData.setTblClmBindings(colBindings);
        tblTransferCircles.setData(YRCConstants.YRC_TABLE_BINDING_DEFINATION, bindingData);
        
    }
    
    private void setBindingForButton() {
    	YRCButtonBindingData bbd = new YRCButtonBindingData();
		bbd.setName("btnUpdate");
		bbd.setActionHandlerEnabled(true);
		bbd.setActionId("com.xpedx.sterling.rcp.pca.divisionMaintainance.action.XPXUpdateDivisionInfo");
		btnUpdate.setData(YRCConstants.YRC_BUTTON_BINDING_DEFINATION, bbd);
	}
    
    private void updateNonBindedComponents() {
		setControlsEnabled(readOnlyFields(), false);
		
	}
    
    private Control[] readOnlyFields() {
		return new Control[] { txtName,txtDivisionBrand,txtAddressLine1,
				txtAddressLine2,txtAddressLine3,txtCity,txtStateOrProvince,txtZipOrPostalCode,
				txtCountryCode,txtCurrencyCode,txtPricingWarehouse,txtGeoCode,txtJDECode,
				txtETradingID,txtPhone1,txtFax1};
	}
    
    private void setControlsEnabled(Control[] controls, boolean enabled) {
		for (Control control : controls) {
			if (null != control)
				control.setEnabled(enabled);
		}

	}

	public String getFormId() {
        return FORM_ID;
    }
    
    public Composite getRootPanel() {
        return pnlRoot;
    }

	private void createRootPanel() {
		GridLayout pnlRootLayout = new GridLayout();
		pnlRootLayout.horizontalSpacing=2;
		pnlRootLayout.verticalSpacing=2;
		pnlRootLayout.marginWidth = 0;
		pnlRootLayout.marginHeight = 0;
		pnlRoot = new Composite(this, SWT.NONE);
		pnlRoot.setData("name", "pnlRoot");
        pnlRoot.setLayout(pnlRootLayout);
        showRootPanel(true);
        createCompsite();
        
	}

	void showRootPanel(boolean show) {
		pnlRoot.setVisible(show);
		
	}

	private void createCompsite() {

//		Body
		createScrolledComposite();
//		Buttons
		createButtonComposite();
	}

	/**
	 * 
	 */
	private void createButtonComposite() {
		GridLayout buttonLayout = new GridLayout();
		buttonLayout.numColumns =2;
		buttonLayout.horizontalSpacing =2;
		
		GridData gridData16 = new GridData();
		gridData16.horizontalAlignment = 3;
		gridData16.grabExcessHorizontalSpace = true;
		gridData16.horizontalSpan = ((GridLayout)getRootPanel().getLayout()).numColumns;
		gridData16.horizontalIndent = 0;
		gridData16.verticalAlignment = 2;
		
		Composite buttonComposite = new Composite(getRootPanel(),SWT.NONE);
		buttonComposite.setLayout(buttonLayout);
		buttonComposite.setLayoutData(gridData16);
		buttonComposite.setData("name", "buttonCompsote");
		btnUpdate = new Button(buttonComposite,SWT.BUTTON1);
		btnUpdate.setData("name", "btnUpdate");
		btnUpdate.setText("Update");
		btnUpdate.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { 
			public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) {    
				myBehavior.updateDivision();
			}
		});
		btnCancel = new Button(buttonComposite,SWT.BUTTON1);
		btnCancel.setData("name","btnCancel");
		btnCancel.setText("Cancel");
		btnCancel.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { 
			public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) {    
				myBehavior.cancelUpdate();
			}
		});
	}

	private void createScrolledComposite() {
		GridData gridData1 = new GridData();
		gridData1.horizontalAlignment = GridData.FILL;
		gridData1.grabExcessHorizontalSpace = true;
		gridData1.grabExcessVerticalSpace = true;
		gridData1.verticalAlignment = GridData.FILL;
		
		scrollComposite = new ScrolledComposite(getRootPanel(),SWT.V_SCROLL);
		scrollComposite.setLayoutData(gridData1);
		scrollComposite.setExpandHorizontal(true);
		scrollComposite.setExpandVertical(true);
		scrollComposite.setMinHeight(100);
		scrollComposite.setAlwaysShowScrollBars(true);
		scrollComposite.addListener(SWT.CURSOR_SIZEALL, new YRCScrolledCompositeListener(scrollComposite));
		createDataPnlComposite();
		scrollComposite.setLayout(new GridLayout());
		scrollComposite.setContent(DataPnl);
		scrollComposite.setData("name", "scrolledComposite");
		addControlsToDataPnl();
	}
	
	private void createDataPnlComposite(){
		GridLayout gridLayout = new GridLayout();
		gridLayout.numColumns = 2;
		gridLayout.verticalSpacing = 1;
		gridLayout.marginWidth = 0;
		gridLayout.marginHeight = 0;
		gridLayout.horizontalSpacing = 5;
		GridData gridData0 = new GridData();
		gridData0.horizontalAlignment = GridData.FILL;
		gridData0.grabExcessVerticalSpace = true;
		gridData0.grabExcessHorizontalSpace = true;
		gridData0.verticalAlignment = GridData.FILL;
		
		DataPnl = new Composite(scrollComposite, SWT.NONE);
		DataPnl.setLayoutData(gridData0);
		DataPnl.setLayout(gridLayout);
		DataPnl.setData("name", "DataPnl");
	}

	private void addControlsToDataPnl() {
		
		
		lblName = new Label(DataPnl,SWT.None);
		lblName.setData("name", "lblName");
		lblName.setText("Division Name");
		txtName = new Text(DataPnl,2048);
		txtName.setData("name", "txtName");
		txtName.setEditable(false);
		
		this.setLayoutDateForControl(txtName, 256);
		
		
		lblDivisionType = new Label(DataPnl,SWT.None);
		lblDivisionType.setData("name", "lblDivisionType");
		lblDivisionType.setText("Division Type");
		cmbDivisionType = new Combo(DataPnl,8);
		cmbDivisionType.setData("name","cmbDivisionType");
		this.setLayoutDateForControl(cmbDivisionType, 256);
		
		lblDivisionBrand = new Label(DataPnl,SWT.None);
		lblDivisionBrand.setData("name", "lblDivisionBrand");
		lblDivisionBrand.setText("Division Brand");
		txtDivisionBrand = new Text(DataPnl,2048);
		txtDivisionBrand.setData("name","txtDivisionBrand");
		this.setLayoutDateForControl(txtDivisionBrand, 256);
		
		lblAddressLine1 = new Label(DataPnl,SWT.None);
		lblAddressLine1.setData("name","lblAddressLine1");
		lblAddressLine1.setText("Address Line 1");
		txtAddressLine1 = new Text(DataPnl,2048);
		txtAddressLine1.setData("name", "txtAddressLine1");
		this.setLayoutDateForControl(txtAddressLine1, 256);
		
		lblAddressLine2 = new Label(DataPnl,SWT.None);
		lblAddressLine2.setData("name","lblAddressLine2");
		lblAddressLine2.setText("Address Line 2");
		txtAddressLine2 = new Text(DataPnl,2048);
		txtAddressLine2.setData("name", "txtAddressLine2");
		this.setLayoutDateForControl(txtAddressLine2, 256);
		
		lblAddressLine3 = new Label(DataPnl,SWT.None);
		lblAddressLine3.setData("name","lblAddressLine3");
		lblAddressLine3.setText("Address Line 3");
		txtAddressLine3 = new Text(DataPnl,2048);
		txtAddressLine3.setData("name", "txtAddressLine3");
		this.setLayoutDateForControl(txtAddressLine3, 256);
		
		lblCity = new Label(DataPnl,SWT.None);
		lblCity.setData("name","lblCity");
		lblCity.setText("City");
		txtCity = new Text(DataPnl,2048);
		txtCity.setData("name","txtCity");
		this.setLayoutDateForControl(txtCity, 256);
		
		lblStateOrProvince = new Label(DataPnl,SWT.None);
		lblStateOrProvince.setData("name","lblStateOrProvince");
		lblStateOrProvince.setText("State/Province");
		txtStateOrProvince = new Text(DataPnl,2048);
		txtStateOrProvince.setData("name","txtStateOrProvince");
		this.setLayoutDateForControl(txtStateOrProvince, 256);
		
		lblZipOrPostalCode = new Label(DataPnl,SWT.None);
		lblZipOrPostalCode.setData("name", "lblZipOrPostalCode");
		lblZipOrPostalCode.setText("Zip/Postal Code");
		txtZipOrPostalCode = new Text(DataPnl,2048);
		txtZipOrPostalCode.setData("name","txtZipOrPostalCode");
		this.setLayoutDateForControl(txtZipOrPostalCode, 256);
		
		lblPhone1 = new Label(DataPnl,SWT.None);
		lblPhone1.setData("name", "lblPhone1");
		lblPhone1.setText("Phone 1");
		txtPhone1 = new Text(DataPnl,2048);
		txtPhone1.setData("name","txtPhone1");
		this.setLayoutDateForControl(txtPhone1, 256);
		
		lblPhone2 = new Label(DataPnl,SWT.None);
		lblPhone2.setData("name", "lblPhone2");
		lblPhone2.setText("Phone 2");
		txtPhone2 = new Text(DataPnl,2048);
		txtPhone2.setData("name","txtPhone2");
		txtPhone2.setTextLimit(255);
		this.setLayoutDateForControl(txtPhone2, 256);
		
		lblFax1 = new Label(DataPnl,SWT.None);
		lblFax1.setData("name", "lblFax1");
		lblFax1.setText("Fax 1");
		txtFax1 = new Text(DataPnl,2048);
		txtFax1.setData("name","txtFax1");
		this.setLayoutDateForControl(txtFax1, 256);
		
		lblFax2 = new Label(DataPnl,SWT.None);
		lblFax2.setData("name", "lblFax2");
		lblFax2.setText("Fax 2");
		txtFax2 = new Text(DataPnl,2048);
		txtFax2.setData("name","txtFax2");
		txtFax2.setTextLimit(255);
		this.setLayoutDateForControl(txtFax2, 256);
		
		lblDivisionContact = new Label(DataPnl,SWT.None);
		lblDivisionContact.setData("name", "lblDivisionContact");
		lblDivisionContact.setText("Division Contact");
		cmbDivisionContact = new Combo(DataPnl,8);
		cmbDivisionContact.setData("name", "cmbDivisionContact");
		this.setLayoutDateForControl(cmbDivisionContact, 256);
		
		lblCountryCode = new Label(DataPnl,SWT.None);
		lblCountryCode.setData("name", "lblCountryCode");
		lblCountryCode.setText("Country Code");
		txtCountryCode = new Text(DataPnl,2048);
		txtCountryCode.setData("name","txtCountryCode");
		this.setLayoutDateForControl(txtCountryCode, 256);
		
		lblCurrencyCode = new Label(DataPnl,SWT.None);
		lblCurrencyCode.setData("name", "lblCurrencyCode");
		lblCurrencyCode.setText("Currency Code");
		txtCurrencyCode = new Text(DataPnl,2048);
		txtCurrencyCode.setData("name","txtCurrencyCode");
		this.setLayoutDateForControl(txtCurrencyCode, 256);
		
		lblPricingWarehouse = new Label(DataPnl,SWT.None);
		lblPricingWarehouse.setData("name", "lblPricingWarehouse");
		lblPricingWarehouse.setText("Pricing Warehouse");
		txtPricingWarehouse = new Text(DataPnl,2048);
		txtPricingWarehouse.setData("name","txtPricingWarehouse");
		this.setLayoutDateForControl(txtPricingWarehouse, 256);
		
		lblDivEmailForPaper = new Label(DataPnl, SWT.None);
        lblDivEmailForPaper.setText("Div_Emails_For_Paper");
        lblDivEmailForPaper.setData("name", "lblDivEmailForPaper");
        txtDivEmailForPaper = new Text(DataPnl, SWT.BORDER);
        txtDivEmailForPaper.setData("name", "txtDivEmailForPaper");
        txtDivEmailForPaper.setText("");
        txtDivEmailForPaper.setToolTipText("Comma Seperated Value; To notify on missing/invalid e Trading IDs.");
        txtDivEmailForPaper.setTextLimit(255);
        this.setLayoutDateForControl(txtDivEmailForPaper, 256);
        
        lblDivEmailForNonPaper = new Label(DataPnl, SWT.None);
        lblDivEmailForNonPaper.setText("Div_Emails_For_Non_Paper");
        lblDivEmailForNonPaper.setData("name", "lblDivEmailForNonPaper");
        txtDivEmailForNonPaper = new Text(DataPnl, SWT.BORDER);
        txtDivEmailForNonPaper.setData("name", "txtDivEmailForNonPaper");
        txtDivEmailForNonPaper.setText("");
        txtDivEmailForNonPaper.setToolTipText("Comma Seperated Value; To notify on missing/invalid e Trading IDs.");
        txtDivEmailForNonPaper.setTextLimit(255);
        this.setLayoutDateForControl(txtDivEmailForNonPaper, 256);
        
		lblMinOrderAmount = new Label(DataPnl,SWT.None);
		lblMinOrderAmount.setData("name", "lblMinOrderAmount");
		lblMinOrderAmount.setText("Minimum Order Amount");	
		
		GridLayout gridLayout1 = new GridLayout();
		gridLayout1.horizontalSpacing = 0;
		gridLayout1.verticalSpacing = 0;
		gridLayout1.numColumns = 2;
		gridLayout1.marginWidth = 0;
		gridLayout1.marginHeight = 0;

		GridData gridDataPnl1 = new GridData();
		gridDataPnl1.horizontalAlignment = SWT.FILL;
		gridDataPnl1.grabExcessHorizontalSpace = true;
		gridDataPnl1.verticalAlignment = 4;

		Composite pnlMinOrderAmount = new Composite(DataPnl, 0);
		pnlMinOrderAmount.setLayoutData(gridDataPnl1);
		pnlMinOrderAmount.setLayout(gridLayout1);
		pnlMinOrderAmount.setData("name", "pnlMainData");
		txtMinOrderAmount = new Text(pnlMinOrderAmount,2048);
		txtMinOrderAmount.addFocusListener(focusListener);
		txtMinOrderAmount.setData("name","txtMinOrderAmount");
		this.setLayoutDateForControl(txtMinOrderAmount, 256);
		txtMinOrderAmount.setTextLimit(20);
		stxtCurrencyCode = new StyledText(pnlMinOrderAmount, SWT.SIMPLE);
		stxtCurrencyCode.setText("$");
		stxtCurrencyCode.setEditable(false);
		stxtCurrencyCode.setData("name", "stxtCurrencyCode");
			
		lblMaxOrderAmount = new Label(DataPnl,SWT.None);
		lblMaxOrderAmount.setData("name", "lblMaxOrderAmount");
		lblMaxOrderAmount.setText("Maximum Order Amount");	
		Composite pnlMaxOrderAmount = new Composite(DataPnl, 0);
		pnlMaxOrderAmount.setLayoutData(gridDataPnl1);
		pnlMaxOrderAmount.setLayout(gridLayout1);
		pnlMaxOrderAmount.setData("name", "pnlMainData");
		txtMaxOrderAmount = new Text(pnlMaxOrderAmount,2048);
		txtMaxOrderAmount.setData("name","txtMaxOrderAmount");
		txtMaxOrderAmount.addFocusListener(focusListener);
		this.setLayoutDateForControl(txtMaxOrderAmount, 256);
		txtMaxOrderAmount.setTextLimit(20);
		stxtCurrencyCode = new StyledText(pnlMaxOrderAmount, SWT.SIMPLE);
		stxtCurrencyCode.setText("$");
		stxtCurrencyCode.setEditable(false);
		stxtCurrencyCode.setData("name", "stxtCurrencyCode");		

		
		lblSmallOrderFee = new Label(DataPnl,SWT.None);
		lblSmallOrderFee.setData("name", "lblSmallOrderFee");
		lblSmallOrderFee.setText("Small Order Fee");	
		Composite pnlSmallOrderFee = new Composite(DataPnl, 0);
		pnlSmallOrderFee.setLayoutData(gridDataPnl1);
		pnlSmallOrderFee.setLayout(gridLayout1);
		pnlSmallOrderFee.setData("name", "pnlMainData");
		txtSmallOrderFee = new Text(pnlSmallOrderFee,2048);
		txtSmallOrderFee.setData("name","txtSmallOrderFee");
		txtSmallOrderFee.setTextLimit(20);
		txtSmallOrderFee.addFocusListener(focusListener);
		this.setLayoutDateForControl(txtSmallOrderFee, 256);
		stxtCurrencyCode = new StyledText(pnlSmallOrderFee, SWT.SIMPLE);
		stxtCurrencyCode.setText("$");
		stxtCurrencyCode.setEditable(false);
		stxtCurrencyCode.setData("name", "stxtCurrencyCode");		

		lblWillCallInformation = new Label(DataPnl,SWT.None);
		lblWillCallInformation.setData("name", "lblWillCallInformation");
		lblWillCallInformation.setText("Will Call Information");
		txtWillCallInformation = new Text(DataPnl,2048 | SWT.WRAP);
		txtWillCallInformation.setData("name","txtWillCallInformation");
		txtWillCallInformation.setTextLimit(255);
		this.setLayoutDateForControl(txtWillCallInformation, 270, 100);
		
		lblDeliveryInformation = new Label(DataPnl,SWT.None);
		lblDeliveryInformation.setData("name", "lblDeliveryInformation");
		lblDeliveryInformation.setText("Delivery_Information");
		txtDeliveryInformation = new Text(DataPnl,2048 | SWT.WRAP);
		txtDeliveryInformation.setData("name","txtDeliveryInformation");
		txtDeliveryInformation.setTextLimit(255);
		this.setLayoutDateForControl(txtDeliveryInformation, 270, 100);
		
		lblDeliveryCutoffTime = new Label(DataPnl,SWT.None);
		lblDeliveryCutoffTime.setData("name", "lblDeliveryCutoffTime");
		lblDeliveryCutoffTime.setText("Delivery_CutOff_Time");	
		
		txtDeliveryCutoffTime = new Text(DataPnl,2048);
		txtDeliveryCutoffTime.setData("name","txtDeliveryCutoffTime");
		txtDeliveryCutoffTime.setTextLimit(10);
		this.setLayoutDateForControl(txtDeliveryCutoffTime, 256);
		
		
		GridData gdTransferCirclesHdr = new org.eclipse.swt.layout.GridData();
		gdTransferCirclesHdr.horizontalSpan = 2;
		gdTransferCirclesHdr.horizontalAlignment = SWT.FILL;
        
        Label lblGeneralInfo = new Label(DataPnl, SWT.LEFT);
		lblGeneralInfo.setLayoutData(gdTransferCirclesHdr);
		lblGeneralInfo.setText("Transfer_Circles");
		lblGeneralInfo.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "PanelHeader");
		
		this.createTblTransferCircles();
		
		lblLastModifiedBy = new Label(DataPnl,SWT.None);
		lblLastModifiedBy.setData("name", "lblLastModifiedBy");
		lblLastModifiedBy.setText("Last_Modified_By");		
		txtLastModifiedBy = new Text(DataPnl,SWT.READ_ONLY);
		txtLastModifiedBy.setData("name","txtLastModifiedBy");
		
		// fix for JIRA 1540 - added LastModifiedData field
		lblLastModifiedData = new Label(DataPnl, SWT.LEFT);
		lblLastModifiedData.setText("Last_Modified_Date");
		lblLastModifiedData.setData("name", "lblLastModifiedData");
		txtLastModifiedData = new Text(DataPnl, 72);
		txtLastModifiedData.setData("name","txtLastModifiedData");

	}
	
	private void setLayoutDateForControl(Control ctrl, int widthHint) {
		GridData gridData = new GridData();
		gridData.horizontalAlignment = GridData.BEGINNING;
		gridData.widthHint = widthHint;
		ctrl.setLayoutData(gridData);
	}
	private void setLayoutDateForControl(Control ctrl, int widthHint, int heightHint) {
		GridData gridData = new GridData();
		gridData.horizontalAlignment = GridData.BEGINNING;
		gridData.widthHint = widthHint;
		gridData.heightHint = heightHint;
		ctrl.setLayoutData(gridData);
	}
	
	
	private void createTblTransferCircles(){
		
		GridData gdTransferCircles = new org.eclipse.swt.layout.GridData();
        gdTransferCircles.horizontalSpan = 2;
        
        tblTransferCircles = new Table(DataPnl, SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL);
		
		TableColumn clmDivisionCode = new TableColumn(tblTransferCircles, SWT.NONE);
		clmDivisionCode.setWidth(130);
		
		TableColumn clmDivisionName = new TableColumn(tblTransferCircles, SWT.NONE);
		clmDivisionName.setWidth(130);
		
		TableColumn clmNoOfDays = new TableColumn(tblTransferCircles, SWT.NONE);
		clmNoOfDays.setWidth(130);
		
		TableColumn clmOrderCutOffTime = new TableColumn(tblTransferCircles, SWT.NONE);
		clmOrderCutOffTime.setWidth(130);
		
		gdTransferCircles.verticalAlignment = org.eclipse.swt.layout.GridData.FILL;
		gdTransferCircles.heightHint = 100;
		tblTransferCircles.setLayoutData(gdTransferCircles);
		tblTransferCircles.setHeaderVisible(true);
		tblTransferCircles.setLinesVisible(true);
		

	}

	public IYRCPanelHolder getPanelHolder() {
        // TODO Complete getPanelHolder
        return null;
    }
    
    public String getHelpId() {
		// TODO Complete getHelpId
		return null;
	}
	/**
	 * This method validates the user authorization
	 * to update the screen controls
	 */	
	private void checkUserPermissions() {
		if (!YRCPlatformUI.hasPermission(XPXConstants.RES_ID_MANAGE_DIVISION)) {
			setControlsEnabled(getAllEditableControls(), false);
		}
	}
	private Control[] getAllEditableControls() {
		return new Control[] { txtName, cmbDivisionType,
				txtDivisionBrand, txtAddressLine1,
				txtAddressLine2, txtAddressLine3, txtCity, txtStateOrProvince,
				txtZipOrPostalCode, txtPhone1, txtPhone2, txtFax1, txtFax2,
				cmbDivisionContact,
				btnUpdate, txtCountryCode, txtCurrencyCode,
				txtPricingWarehouse, txtGeoCode, txtJDECode, txtETradingID,
				txtDivisionEmailID, txtMaxOrderAmount, txtMinOrderAmount,
				txtSmallOrderFee, txtSmapleRoomEmailId, txtWillCallInformation,
				txtDeliveryCutoffTime, txtNextDayCutoffTime,
				txtDeliveryInformation,txtDivEmailForPaper,txtDivEmailForNonPaper};
	}
	public void adjustScrollPnl(ScrolledComposite scrPnl, Composite scrChild,
			Composite scrParent, boolean isHScrollReqd, boolean isVScrollReqd) {
		Control childIterator[] = scrChild.getChildren();
		int noOfChildren = childIterator.length;
		int HEIGHT = 5;
		int WIDTH = 5;
		int selectedHeight = 0;
		
		int selectedPanelHeight = 0;
		for (int k = 0; k < noOfChildren; k++) {
			int boundHeight = childIterator[k].getBounds().height;
			int boundWidth = childIterator[k].getBounds().width;
			if (isVScrollReqd) {

				HEIGHT += boundHeight + 5;
				if (WIDTH < boundWidth)
					WIDTH = boundWidth;
			}
			if (!isHScrollReqd)
				continue;
			WIDTH += boundWidth + 5;
			if (HEIGHT < boundHeight)
				HEIGHT = boundHeight;
		}
		scrPnl.setMinSize(WIDTH, HEIGHT);
		if (isVScrollReqd
				&& (selectedHeight < scrPnl.getOrigin().y || selectedHeight
						+ selectedPanelHeight > scrPnl.getSize().y
						+ scrPnl.getOrigin().y))
			scrPnl.setOrigin(0, selectedHeight);
		scrParent.layout(true, true);
	}
	

}  //  @jve:decl-index=0:visual-constraint="147,-35"