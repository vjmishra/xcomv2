var SVGAnnotator = {
	imageDirectory : "/images",
	makeRoundedBackground : function(A, G) {
		if (Ext) {
			if (G) {
				var E = Ext.query(A);
				for ( var C = 0; C < E.length; C++) {
					var F = Ext.get(E[C]);
					F.setStyle("borderWidth", "0");
					var D = this.inferFromContext(F, {
						width : null,
						height : null,
						curve : G,
						fillColor : null,
						borderColor : null,
						outsideOpacityPct : null
					});
					var B = this.getImageDirectory() + "/shape.svg_png?"
							+ Ext.urlEncode(D);
					F.setStyle("backgroundImage", "url(" + B + ")");
					F.setStyle("backgroundRepeat", "no-repeat");
					F.setStyle("backgroundColor", "transparent")
				}
			} else {
				this.mkRoundedBackground(A)
			}
		}
	},
	mkRoundedBackground : function(H, K, F) {
		var A, J, E, C, D, B, L, G;
		if (Ext) {
			if (K == null) {
				K = {}
			}
			if (!F) {
				F = ""
			}
			A = Ext.query(H);
			K = this.mergeOnto(K, {
				width : null,
				height : null,
				fillColor : null,
				borderColor : null,
				curve : null,
				outsideColor : null,
				outsideOpacityPct : null
			});
			for ( var I = 0; I < A.length; I++) {
				J = Ext.get(A[I]);
				D = Ext.id(J);
				L = D + F;
				G = "ss-" + L;
				Ext.util.CSS.removeStyleSheet("ss-" + D);
				J.setStyle("borderWidth", "0");
				E = this.inferFromContext(J, K);
				C = this.getImageDirectory() + "/shape.svg_png?"
						+ Ext.urlEncode(E);
				B = "#" + L + " {";
				B += "background-image: url(" + C + ");";
				B += "background-repeat: no-repeat;";
				if (E.outsideOpacityPct == 0) {
					B += "background-color: transparent;"
				}
				B += "}";
				Ext.util.CSS.createStyleSheet(B, G)
			}
		}
	},
	makeTopRoundedBackground : function(A, D, H) {
		if (Ext) {
			var F = Ext.query(A);
			for ( var C = 0; C < F.length; C++) {
				if (!D) {
					D = true
				}
				var G = Ext.get(F[C]);
				G.setStyle("borderWidth", "0");
				var E = this.inferFromContext(G, {
					width : null,
					height : null,
					curve : H,
					fillColor : null,
					borderColor : null,
					borderWidth : 1
				});
				E.clipY2 = E.height;
				E.height = E.height + E.curve + 2;
				var B = this.getImageDirectory() + "/shape.svg_png?"
						+ Ext.urlEncode(E);
				G.setStyle("backgroundImage", "url(" + B + ")");
				G.setStyle("backgroundRepeat", "no-repeat");
				G.setStyle("backgroundColor", "transparent")
			}
		}
	},
	mkTopRoundedBackground : function(A, D) {
		if (Ext) {
			if (D == null) {
				D = {}
			}
			var F = Ext.query(A);
			for ( var C = 0; C < F.length; C++) {
				var G = Ext.get(F[C]);
				G.setStyle("borderWidth", "0");
				D = this.mergeOnto(D, {
					width : null,
					height : null,
					fillColor : null,
					borderColor : null,
					curve : null,
					outsideColor : null,
					outsideOpacityPct : 100,
					borderWidth : 1
				});
				var E = this.inferFromContext(G, D);
				E.clipY2 = E.height;
				E.height = E.height + E.curve + 2;
				var B = this.getImageDirectory() + "/shape.svg_png?"
						+ Ext.urlEncode(E);
				G.setStyle("backgroundImage", "url(" + B + ")");
				G.setStyle("backgroundRepeat", "no-repeat")
			}
		}
	},
	make3QRoundedBackground : function(A, H, B) {
		if (Ext) {
			var F = Ext.query(A);
			for ( var D = 0; D < F.length; D++) {
				var G = Ext.get(F[D]);
				G.setStyle("borderWidth", "0");
				var E = this.inferFromContext(G, {
					width : null,
					height : null,
					curve : H,
					fillColor : null,
					borderColor : null,
					outsideOpacityPct : 0,
					shape : "3qRoundedRect",
					dropShadowOffset : B,
					borderWidth : 1
				});
				var C = this.getImageDirectory() + "/shape.svg_png?"
						+ Ext.urlEncode(E);
				G.setStyle("backgroundImage", "url(" + C + ")");
				G.setStyle("backgroundRepeat", "no-repeat");
				G.setStyle("backgroundColor", "transparent")
			}
		}
	},
	mk3QRoundedBackground : function(A, D) {
		if (Ext) {
			if (D == null) {
				D = {}
			}
			var F = Ext.query(A);
			for ( var C = 0; C < F.length; C++) {
				var G = Ext.get(F[C]);
				G.setStyle("borderWidth", "0");
				var E = this.inferFromContext(G, this.mergeOnto(D, {
					width : null,
					height : null,
					curve : null,
					fillColor : null,
					outsideColor : null,
					outsideOpacityPct : 100,
					borderColor : null,
					shape : "3qRoundedRect",
					dropShadowOffset : null,
					borderWidth : 1
				}));
				var B = this.getImageDirectory() + "/shape.svg_png?"
						+ Ext.urlEncode(E);
				G.setStyle("backgroundImage", "url(" + B + ")");
				G.setStyle("backgroundRepeat", "no-repeat")
			}
		}
	},
	makeRoundedNoBorder : function(A, G) {
		if (Ext) {
			var E = Ext.query(A);
			for ( var C = 0; C < E.length; C++) {
				var F = Ext.get(E[C]);
				var D = this.inferFromContext(F, {
					width : null,
					height : null,
					curve : G,
					outsideColor : null,
					outsideOpacityPct : 100,
					fillColor : null,
					borderWidth : 0
				});
				var B = this.getImageDirectory() + "/shape.svg_png?"
						+ Ext.urlEncode(D);
				F.setStyle("backgroundImage", "url(" + B + ")");
				F.setStyle("backgroundRepeat", "no-repeat");
				F.setStyle("backgroundColor", "transparent")
			}
		}
	},
	makeLightedRoundedRect : function(A, G, H) {
		if (Ext) {
			var E = Ext.query(A);
			for ( var C = 0; C < E.length; C++) {
				var F = Ext.get(E[C]);
				var D = this.inferFromContext(F, {
					width : null,
					height : null,
					curve : G,
					borderWidth : 0,
					fillColor : H,
					outsideColor : null,
					outsideOpacityPct : 100,
					shadingStyle : "spotlight"
				});
				var B = this.getImageDirectory() + "/shape.svg_png?"
						+ Ext.urlEncode(D);
				F.setStyle("backgroundImage", "url(" + B + ")");
				F.setStyle("backgroundRepeat", "no-repeat");
				F.setStyle("backgroundColor", "transparent")
			}
		}
	},
	makeShadedRoundedRect : function(G, F, J, E, D) {
		if (Ext) {
			var A = Ext.query(G);
			for ( var I = 0; I < A.length; I++) {
				var H = Ext.get(A[I]);
				var C = this.inferFromContext(H, {
					width : null,
					height : null,
					pShadeType : J,
					curve : F,
					borderWidth : null,
					outsideColor : null,
					outsideOpacityPct : 100,
					fillColor : D,
					shadingStyle : J,
					shadingLevelPct : E
				});
				var B = this.getImageDirectory() + "/shape.svg_png?"
						+ Ext.urlEncode(C);
				H.setStyle("backgroundImage", "url(" + B + ")");
				H.setStyle("backgroundRepeat", "no-repeat");
				H.setStyle("backgroundColor", "transparent")
			}
		}
	},
	make3dBarBackground : function(B, H, A) {
		if (A == null) {
			A = 90
		}
		if (Ext) {
			var F = Ext.query(B);
			for ( var D = 0; D < F.length; D++) {
				var G = Ext.get(F[D]);
				var E = this.inferFromContext(G, {
					width : 1,
					height : null,
					fillColor : H,
					shadingStyle : "highlight",
					shadingLevelPct : A,
					curve : 0,
					borderWidth : 0
				});
				var C = this.getImageDirectory() + "/shape.svg_png?"
						+ Ext.urlEncode(E);
				G.setStyle("backgroundImage", "url(" + C + ")");
				G.setStyle("backgroundRepeat", "repeat-x")
			}
		}
	},
	makeRoundedGradientBackground : function(E, I, H, D, J) {
		if (Ext) {
			var A = Ext.query(E);
			for ( var G = 0; G < A.length; G++) {
				var F = Ext.get(A[G]);
				var C = this.inferFromContext(F, {
					width : null,
					height : null,
					curve : D,
					fillColor : I,
					fillGradientType : J,
					fillGradientTargetColor : H,
					outsideColor : null,
					outsideOpacityPct : 100,
					borderColor : null
				});
				var B = this.getImageDirectory() + "/shape.svg_png?"
						+ Ext.urlEncode(C);
				F.setStyle("backgroundImage", "url(" + B + ")");
				F.setStyle("backgroundRepeat", "no-repeat");
				F.setStyle("backgroundColor", "transparent")
			}
		}
	},
	makeSimpleGradientBackground : function(D, H, G, I) {
		if (Ext) {
			var A = Ext.query(D);
			for ( var F = 0; F < A.length; F++) {
				var E = Ext.get(A[F]);
				var C = this.inferFromContext(E, {
					width : null,
					height : null,
					curve : 0,
					borderWidth : 0,
					fillColor : H,
					fillGradientType : I,
					fillGradientTargetColor : G
				});
				var B = this.getImageDirectory() + "/shape.svg_png?"
						+ Ext.urlEncode(C);
				E.setStyle("backgroundImage", "url(" + B + ")");
				E.setStyle("backgroundRepeat", "no-repeat")
			}
		}
	},
	makeSplat : function(A, F) {
		if (Ext) {
			var E = Ext.query(A);
			for ( var C = 0; C < E.length; C++) {
				var G = Ext.get(E[C]);
				var D = this.inferFromContext(G, {
					width : null,
					height : null,
					shadowColor : F
				});
				var B = this.getImageDirectory() + "/splat.svg_png?"
						+ Ext.urlEncode(D);
				G.setStyle("backgroundImage", "url(" + B + ")");
				G.setStyle("backgroundRepeat", "no-repeat");
				G.setStyle("backgroundColor", "transparent");
				G.setStyle("borderWidth", "0")
			}
		}
	},
	makeGeneralShape : function(A, B) {
		if (Ext) {
			var F = Ext.query(A);
			for ( var D = 0; D < F.length; D++) {
				var G = Ext.get(F[D]);
				var E = this.inferFromContext(G, B);
				var C = this.getImageDirectory() + "/shape.svg_png?"
						+ Ext.urlEncode(E);
				G.setStyle("backgroundImage", "url(" + C + ")");
				G.setStyle("backgroundRepeat", "no-repeat")
			}
		}
	},
	mkGeneralShapeRuleSet : function(F, J, E) {
		var I, A, H, D, K, B, G;
		if (!E) {
			E = ""
		}
		I = "";
		if (Ext) {
			A = Ext.query(F);
			for (G = 0; G < A.length; G++) {
				H = Ext.get(A[G]);
				D = Ext.id(H);
				K = D + E;
				var C = this.inferFromContext(H, J);
				B = this.getImageDirectory() + "/shape.svg_png?"
						+ Ext.urlEncode(C);
				I += "#" + K + " {\n";
				I += "background-image: url(" + B + ");\n";
				if (C.outsideOpacityPct == 0) {
					I += "background-color: transparent;\n"
				}
				I += "}\n"
			}
		}
		return I
	},
	mkTopRoundRuleSet : function(F, J, E) {
		var I, A, H, D, K, B, G;
		if (!E) {
			E = ""
		}
		I = "";
		if (Ext) {
			A = Ext.query(F);
			for (G = 0; G < A.length; G++) {
				H = Ext.get(A[G]);
				D = Ext.id(H);
				K = D + E;
				var C = this.inferFromContext(H, J);
				C.clipY2 = C.height;
				C.height = C.height + C.curve + 2;
				B = this.getImageDirectory() + "/shape.svg_png?"
						+ Ext.urlEncode(C);
				I += "#" + K + " {\n";
				I += "background-image: url(" + B + ");\n";
				I += "background-repeat: no-repeat;\n";
				if (C.outsideOpacityPct == 0) {
					I += "background-color: transparent;\n"
				}
				I += "}\n"
			}
		}
		return I
	},
	inferFromContext : function(H, B) {
		var A = {};
		for ( var D in B) {
			var F = B[D];
			if (F == null) {
				switch (D) {
				case "width":
					A.width = H.getComputedWidth();
					if (A.width < 5) {
						A.width = 5
					}
					break;
				case "height":
					A.height = H.getComputedHeight();
					if (A.height < 5) {
						A.height = 5
					}
					break;
				case "curve":
					var G = H.getPadding("l");
					if (G) {
						A.curve = G * 2
					} else {
						A.curve = 5
					}
					break;
				case "fillColor":
					A.fillColor = H.getColor("backgroundColor", "#ffffff");
					break;
				case "borderColor":
					A.borderColor = H.getColor("borderLeftColor", H.getColor(
							"color", "#000000"));
					break;
				case "borderWidth":
					A.borderWidth = H.getBorderWidth("l");
					if (A.borderWidth == "") {
						A.borderWidth = "0"
					}
					break;
				case "outsideColor":
					var E = H.parent();
					if (E) {
						A.outsideColor = E.getColor("backgroundColor",
								"#ffffff")
					} else {
						A.outsideColor = "white"
					}
					break;
				case "outsideOpacityPct":
					if (E) {
						A.outsideOpacityPct = 100
					} else {
						A.outsideOpacityPct = 0
					}
					break;
				case "style":
					var C = this.inferFromContext(H, {
						fillColor : null,
						borderColor : null
					});
					A.style = "fill:" + C.fillColor + ";stroke:"
							+ C.borderColor;
					break;
				case "fillGradientType":
					A.fillGradientType = "ll2ur";
					break;
				case "fillGradientTargetColor":
					A.fillGradientTargetColor = "white";
					break;
				case "shadingStyle":
					A.shadingStyle = "highlight";
					break;
				case "shadingLevelPct":
					A.shadingLevelPct = 50;
					break;
				case "dropShadowOffset":
					A.dropShadowOffset = 10;
					break
				}
			} else {
				A[D] = F
			}
		}
		if (A.outsideColor == "transparent") {
			A.outsideOpacityPct = "0";
			A.outsideColor = "white"
		}
		if (B.margin) {
			if (A.width) {
				A.width -= (2 * B.margin)
			}
			if (A.height) {
				A.height -= (2 * B.margin)
			}
		}
		return A
	},
	getImageDirectory : function() {
		var A, B;
		B = Ext.query("meta[name='webapp-context']")[0];
		if (B == null) {
			A = ""
		} else {
			A = B.getAttribute("content")
		}
		return A + this.imageDirectory
	},
	mergeOnto : function(C, B) {
		for ( var A in B) {
			if (C[A] == null && C[A] !== null) {
				C[A] = B[A]
			}
		}
		return C
	},
	toString : function(C) {
		var B = "{";
		for ( var A in C) {
			B += A + ":" + C[A] + ","
		}
		B += "}";
		return B
	}
};
function initOpenClose() {
	var D = document.getElementsByTagName("li");
	for ( var C = 0; C < D.length; C++) {
		if (D[C].className == "roll") {
			if (D[C].className.indexOf("close") == -1) {
				D[C].className += " close"
			}
			var B = D[C].getElementsByTagName("a");
			for ( var A = 0; A < B.length; A++) {
				if (B[A].className == "button") {
					B[A].onclick = function() {
						if (this.parentNode.className.indexOf("close") != -1) {
							this.parentNode.className = this.parentNode.parentNode.className
									.replace("close", "")
						} else {
							this.parentNode.className += " close"
						}
						svg_classhandlers_decoratePage();
						return false
					}
				}
			}
		}
	}
}
function initNav() {
	if (typeof document.body.style.maxHeight == "undefined") {
		var C = document.getElementById("navigate");
		if (C != null) {
			var A = C.getElementsByTagName("li");
			for ( var B = 0; B < A.length; B++) {
				A[B].onmouseover = function() {
					this.className += " hover"
				};
				A[B].onmouseout = function() {
					this.className = this.className.replace(" hover", "")
				}
			}
		}
	}
}
if (window.addEventListener) {
	window.addEventListener("load", initOpenClose, false)
} else {
	if (window.attachEvent) {
		window.attachEvent("onload", initOpenClose);
		window.attachEvent("onload", initNav)
	}
}
sfHover = function() {
	var A = document.getElementById("navigate");
	if (A != null) {
		var C = document.getElementById("navigate").getElementsByTagName("LI");
		for ( var B = 0; B < C.length; B++) {
			C[B].onmouseover = function() {
				this.className += " sfhover"
			};
			C[B].onmouseout = function() {
				this.className = this.className.replace(new RegExp(
						" sfhover\\b"), "")
			}
		}
	}
};
if (window.attachEvent) {
	window.attachEvent("onload", sfHover)
}
Ext.onReady(function() {
	var B = Ext.query(".showMoreInfo");
	for ( var A = 0; A < B.length; A++) {
		Ext.get(B[A]).on("click", function() {
			var C = Ext.get("MoreInfo");
			C.setDisplayed("inline")
		})
	}
	B = Ext.query(".hideMoreInfo");
	for ( var A = 0; A < B.length; A++) {
		Ext.get(B[A]).on("click", function() {
			var C = Ext.get("MoreInfo");
			C.setDisplayed("none")
		})
	}
});
function tabObj(B) {
	var A;
	this.div = null;
	this.newMainTabClass = "tab-1";
	this.startindex = 0;
	if (B.startindex) {
		this.startindex = B.startindex
	}
	this.classTab = "tabContent";
	this.classTabHide = "hidetab";
	this.classNavActive = "selected";
	this.classNavInactive = "selectable";
	this.defaultTabClass = "default_tab";
	for (A in B) {
		this[A] = B[A]
	}
	this.REclassMain = new RegExp("\\b" + this.classMainTab + "\\b", "gi");
	this.REclassTabHide = new RegExp("\\b" + this.classTabHide + "\\b", "gi");
	this.REclassTabDefault = new RegExp("\\b" + this.defaultTabClass + "\\b",
			"gi");
	this.REclassTab = new RegExp("\\b" + this.classTab + "\\b", "gi");
	this.tabs = new Array();
	this.addEvents( {
		showTab : true
	});
	if (this.div) {
		this.init(this.div);
		this.div = null
	}
}
Ext.extend(tabObj, Ext.util.Observable);
tabObj.prototype.init = function(E) {
	var I, C, J, G = 0, A, D, H, B, F;
	this.tabs.length = 0;
	F = Ext.DomQuery.selectNode("." + this.mainClass);
	I = F.childNodes;
	for (C = 0; C < I.length; C++) {
		if (I[C].className && I[C].className.match(this.REclassTab)) {
			J = new Object();
			J.div = I[C];
			this.tabs[this.tabs.length] = J;
			if (I[C].className.match(this.REclassTabDefault)) {
				G = this.tabs.length - 1
			}
		}
	}
	A = document.createElement("ul");
	A.className = this.classNav;
	for (C = 0; C < this.tabs.length; C++) {
		J = this.tabs[C];
		J.headingText = J.div.title;
		J.div.title = "";
		D = document.createElement("li");
		D.className = this.classNavInactive;
		J.li = D;
		H = document.createElement("a");
		H.appendChild(document.createTextNode(J.headingText));
		H.href = "javascript:void(null);";
		H.title = J.headingText;
		if (typeof this.eventHandlers[C] == "function") {
			Ext.EventManager.addListener(H, "click", this.eventHandlers[C])
		}
		Ext.EventManager.addListener(H, "click", this.navClick);
		H.tabber = this;
		H.tabIndex = C + this.startindex;
		D.appendChild(H);
		A.appendChild(D)
	}
	E.insertBefore(A, E.firstChild);
	E.className = E.className.replace(this.REclassMain, this.newMainTabClass);
	this.tabShow(G);
	if (typeof this.onLoad == "function") {
		this.onLoad( {
			tabber : this
		})
	}
	return this
};
tabObj.prototype.navClick = function(D) {
	var A, B, C;
	A = this;
	if (!A.tabber) {
		return false
	}
	B = A.tabber;
	B.tabShow(A.tabIndex - this.tabber.startindex);
	return false
};
tabObj.prototype.tabHideAll = function() {
	var A;
	for (A = 0; A < this.tabs.length; A++) {
		this.tabHide(A)
	}
};
tabObj.prototype.tabHide = function(A) {
	var B;
	if (!this.tabs[A]) {
		return false
	}
	B = this.tabs[A].div;
	if (!B.className.match(this.REclassTabHide)) {
		B.className += " " + this.classTabHide
	}
	this.navClearActive(A);
	return this
};
tabObj.prototype.tabShow = function(A) {
	var B;
	if (!this.tabs[A]) {
		return false
	}
	this.tabHideAll();
	B = this.tabs[A].div;
	B.className = B.className.replace(this.REclassTabHide, "");
	this.navSetActive(A);
	this.fireEvent("showTab");
	return this
};
tabObj.prototype.navSetActive = function(A) {
	this.tabs[A].li.className = this.classNavActive;
	return this
};
tabObj.prototype.navClearActive = function(A) {
	this.tabs[A].li.className = this.classNavInactive;
	return this
};
function tabify(C, B, A, E, H) {
	var D, F;
	F = {};
	F.classMainTab = C;
	if (B) {
		F.startindex = B
	}
	if (A) {
		if (A[0] != null && A[0] != "") {
			F.newMainTabClass = A[0]
		}
		if (A[1] != null && A[1] != "") {
			F.classTab = A[1]
		}
		if (A[2] != null && A[2] != "") {
			F.classNav = A[2]
		}
		if (A[3] != null && A[3] != "") {
			F.classTabHide = A[3]
		}
		if (A[4] != null && A[4] != "") {
			F.classNavActive = A[4]
		}
	}
	if (H) {
		F.eventHandlers = H
	} else {
		F.eventHandlers = new Array()
	}
	if (E) {
		F.defaultTabClass = E
	}
	D = Ext.DomQuery.selectNode("." + C);
	var G;
	if (D) {
		F.div = D;
		F.mainClass = C;
		G = new tabObj(F)
	}
	return G
}
function tabifyOnLoad(D, B, A, E, F) {
	var C;
	C = window.onload;
	if (typeof window.onload != "function") {
		window.onload = function() {
			tabify(D, B, A, E, F)
		}
	} else {
		window.onload = function() {
			C();
			tabify(D, B, A, E, F)
		}
	}
}
var DialogPanel = {
	toggleDialogVisibility : function(B) {
		var A = Ext.get(B);
		if (A != null) {
			if (A.isVisible()) {
				this.hide(B)
			} else {
				this.show(B)
			}
		}
	},
	hide : function(B) {
		var A = Ext.getCmp(B);
		A.hide()
	},
	show : function(B) {
		var A = Ext.getCmp(B);
		A.show()
	}
};
function addErrorForRepeatingElements(C, E) {
	var D = E.errorStrings;
	var A = E.resetValueStrings;
	if (D.length > 1) {
		for ( var B = 0; B < D.length; B++) {
			if (D[B] != null && D[B] != "") {
				addError(C.elements[E.fieldName][B], D[B])
			}
			if (A != null) {
				if (A[B] != null) {
					C.elements[E.fieldName][B].value = A[B]
				}
			}
		}
	} else {
		if (D.length = 1) {
			if (D[0] != null && D[0] != "") {
				addError(C.elements[E.fieldName], D[0])
			}
			if (A != null) {
				if (A[0] != null) {
					C.elements[E.fieldName].value = A[0]
				}
			}
		}
	}
}
function swc_validateForm(A, C) {
	var B = false;
	form = document.getElementById(A);
	if ((C === undefined) || (C == true)) {
		clearErrorMessages(form);
		clearErrorLabels(form)
	}
	dojo.io
			.bind( {
				url : ajaxValidationURL,
				load : function(F, H, D) {
					if (H.count > 0) {
						var E;
						var I = 0;
						for (E = 0; E < H.count; E++) {
							if (H.list[E].errorMesage != null) {
								if ((form.elements[H.list[E].fieldName]) != null) {
									if (isFieldValidforAddError(form.elements[H.list[E].fieldName])) {
										I = I + 1;
										addError(
												form.elements[H.list[E].fieldName],
												H.list[E].errorMesage)
									}
								} else {
									if ((document
											.getElementById(H.list[E].fieldName)) != null) {
										if (isFieldValidforAddError(document
												.getElementById(H.list[E].fieldName))) {
											I = I + 1;
											addError(
													document
															.getElementById(H.list[E].fieldName),
													H.list[E].errorMesage)
										}
									}
								}
							}
							if (H.list[E].resetValue != null) {
								form.elements[H.list[E].fieldName].value = H.list[E].resetValue
							} else {
								if (H.list[E].errorStrings != null) {
									I = I + 1;
									addErrorForRepeatingElements(form,
											H.list[E])
								}
							}
						}
						if (I > 0) {
							B = true
						}
						try {
							svg_classhandlers_decoratePage()
						} catch (G) {
							alert("There is an error in Svg-apply: "
									+ G.message)
						}
					}
				},
				mimetype : "text/json",
				sync : true,
				formNode : form,
				method : "POST"
			});
	return !B
}
function isFieldValidforAddError(C) {
	var A = C.parentNode;
	var B = A.parentNode;
	if (!A || (A.nodeName != "DIV" && A.nodeName != "SPAN") || !B
			|| B.nodeName != "DIV") {
		return false
	} else {
		return true
	}
}
QuickView.defaultConfiguration = function() {
	var A = {
		title : "QuickView",
		showTimeout : 1000,
		hideTimeout : 3000,
		quickViewLaunchConf : {
			border : false,
			header : false,
			hideBorders : true,
			closable : false,
			autoWidth : true,
			autoHeight : true,
			floating : true,
			shadow : false,
			shim : true,
			renderTo : null,
			html : null
		},
		quickViewWindowConf : {
			initTrigger : "i",
			alignToAnchor : false
		}
	};
	return A
};
QuickView.getConfiguration = function(A) {
	var C = QuickView.defaultConfiguration();
	if (A) {
		if (A.title !== undefined) {
			C.title = A.title
		}
		if (A.showTimeout !== undefined) {
			C.showTimeout = A.showTimeout
		}
		if (A.hideTimeout !== undefined) {
			C.hideTimeout = A.hideTimeout
		}
		if (A.quickViewWindowConf !== undefined) {
			var B = QuickView.defaultConfiguration();
			C.quickViewWindowConf = A.quickViewWindowConf;
			if (C.quickViewWindowConf.alignToAnchor === undefined) {
				C.quickViewWindowConf.alignToAnchor = B.quickViewWindowConf.alignToAnchor
			}
			if (C.quickViewWindowConf.initTrigger === undefined) {
				C.quickViewWindowConf.initTrigger = B.quickViewWindowConf.initTrigger
			}
		}
	}
	return C
};
function QuickView(E, J, F) {
	var B = 0;
	var A = null;
	var K = null;
	var I = this;
	this.myConf = QuickView.getConfiguration(F);
	var H = QuickView.currentIndex;
	var D = Ext.get(E);
	this.createQuickView = function() {
		if (A !== null) {
			A.destroy();
			lanuch = null
		}
		K = new QuickViewWindow(E, J, this.myConf.quickViewWindowConf)
	};
	this.createLaunch = function(M, L) {
		if (A === null) {
			this.myConf.quickViewLaunchConf.renderTo = document.body;
			this.myConf.quickViewLaunchConf.html = '<div class="quickViewLaunch"><a href="javascript:eval(\'QuickView.get('
					+ H
					+ ").createQuickView();');\">"
					+ this.myConf.title
					+ "</a></div>";
			A = new Ext.Panel(this.myConf.quickViewLaunchConf);
			A.show();
			var N = G(D, A);
			A.setPagePosition(N.left, N.top);
			A.on("destroy", function() {
				A = null
			});
			A.destroy.defer(this.myConf.hideTimeout, A)
		}
	};
	this.getQuickViewId = function() {
		return H
	};
	if ((t = Ext.get(E)) !== undefined) {
		t.on("mouseover", C);
		t.on("mouseout", function() {
			clearTimeout(B)
		})
	}
	QuickView.register(this);
	function C() {
		if (K === null || K.getWindowHandle() === null) {
			B = I.createLaunch.defer(I.myConf.showTimeout, I, [ E, J ])
		}
	}
	function G(N, Q) {
		var P = Ext.get(N);
		var M = {
			left : P.getX(),
			top : P.getY()
		};
		var O = 0;
		var L = 0;
		if (P.getWidth()) {
			O += P.getWidth()
		}
		if (Q.width) {
			O -= Q.width
		}
		if (P.getHeight()) {
			L += P.getHeight()
		}
		if (Q.height) {
			L -= Q.height
		}
		M.left += O / 2;
		M.top += L / 2;
		return M
	}
}
QuickView.registry = new Array();
QuickView.registrySize = 100;
QuickView.currentIndex = 0;
QuickView.register = function(A) {
	QuickView.registry[QuickView.currentIndex] = A;
	QuickView.currentIndex++;
	QuickView.currentIndex %= QuickView.registrySize
};
QuickView.get = function(A) {
	return QuickView.registry[A]
};
QuickViewWindow.defaultConfiguration = function() {
	var A = {
		initTrigger : "ch",
		showTimeout : 1000,
		closeTimeout : 5000,
		alignToAnchor : true,
		animateFromAnchor : true,
		offsetTop : 25,
		offsetLeft : 0,
		windowConf : {
			title : "Quick View",
			width : 300,
			height : 450,
			modal : false,
			autoScroll : true,
			animCollapse : true,
			animateTarget : null,
			autoLoad : {
				url : null
			}
		}
	};
	return A
};
QuickViewWindow.getConfiguration = function(A) {
	var C = QuickViewWindow.defaultConfiguration();
	if (A) {
		if (A.initTrigger !== undefined) {
			C.initTrigger = A.initTrigger
		}
		if (A.showTimeout !== undefined) {
			C.showTimeout = A.showTimeout
		}
		if (A.closeTimeout !== undefined) {
			C.closeTimeout = A.closeTimeout
		}
		if (A.alignToAnchor !== undefined) {
			C.alignToAnchor = A.alignToAnchor
		}
		if (A.animateFromAnchor !== undefined) {
			C.animateFromAnchor = A.animateFromAnchor
		}
		if (A.offsetTop !== undefined) {
			C.offsetTop = A.offsetTop
		}
		if (A.offsetLeft !== undefined) {
			C.offsetLeft = A.offsetLeft
		}
		if (A.windowConf !== undefined) {
			var B = QuickViewWindow.defaultConfiguration();
			C.windowConf = A.windowConf;
			if (C.windowConf.title === undefined) {
				C.windowConf.title = B.windowConf.title
			}
			if (C.windowConf.width === undefined) {
				C.windowConf.width = B.windowConf.width
			}
			if (C.windowConf.height === undefined) {
				C.windowConf.height = B.windowConf.height
			}
			if (C.windowConf.modal === undefined) {
				C.windowConf.modal = B.windowConf.modal
			}
			if (C.windowConf.autoScroll === undefined) {
				C.windowConf.autoScroll = B.windowConf.autoScroll
			}
			if (C.windowConf.animCollapse === undefined) {
				C.windowConf.animCollapse = B.windowConf.animCollapse
			}
			if (C.windowConf.animateTarget === undefined) {
				C.windowConf.animateTarget = B.windowConf.animateTarget
			}
			if (C.windowConf.autoLoad === undefined) {
				C.windowConf.autoLoad = B.windowConf.autoLoad
			}
		}
	}
	return C
};
function QuickViewWindow(D, I, F) {
	var E = null;
	var C = 0;
	var B = 0;
	var H = this;
	D = Ext.get(D);
	this.myConf = QuickViewWindow.getConfiguration(F);
	if (this.myConf.animateFromAnchor) {
		this.myConf.windowConf.animateTarget = D
	}
	if (typeof (I) == "string") {
		this.myConf.windowConf.autoLoad.url = I
	} else {
		this.myConf.windowConf.autoLoad = I
	}
	this.closeWindow = function() {
		if (E !== null) {
			E.hide(D)
		}
		if (E !== null) {
			E.close()
		}
		E = null
	};
	this.refresh = function() {
		if (E !== null) {
			clearTimeout(B);
			E.load(H.myConf.windowConf.autoLoad)
		}
	};
	this.createWindow = function() {
		if (E === null) {
			E = new Ext.Window(H.myConf.windowConf);
			if (D !== null && D !== undefined && H.myConf.alignToAnchor) {
				var K = A(D);
				E.setPagePosition(K.left, K.top)
			}
			E.on("close", function() {
				E = null
			});
			E.show();
			B = H.closeWindow.defer(H.myConf.closeTimeout, H);
			E.getEl().on("mouseover", function() {
				clearTimeout(B)
			})
		}
	};
	this.getWindowHandle = function() {
		return E
	};
	var J = Ext.get(D);
	if (this.myConf.initTrigger.indexOf("c") >= 0) {
		if (J !== undefined) {
			J.on("click", this.createWindow)
		}
	}
	if (this.myConf.initTrigger.indexOf("h") >= 0) {
		if (J !== undefined) {
			J.on("mouseover", G);
			J.on("mouseout", function() {
				clearTimeout(C)
			})
		}
	}
	if (this.myConf.initTrigger.indexOf("i") >= 0) {
		this.createWindow()
	}
	function G() {
		C = H.createWindow.defer(H.myConf.showTimeout, H)
	}
	function A(M) {
		var L = Ext.get(D);
		var K = {
			left : L.getX(),
			top : L.getY()
		};
		K.left += H.myConf.offsetLeft;
		K.top += H.myConf.offsetTop;
		return K
	}
}
var minimalMiniCart = false;
var minimalMiniCartMessage = "";
var isGuestUser = false;
var canExpandMiniCart = false;

function showMiniCartLink() {
	Ext.Ajax.request( {
		url : document.getElementById("miniCartLinkDisplayURL").href,
		params : {},
		method : "GET",
		success : function(A, B) {
			var C = document.getElementById("miniCartLinkDiv");
			C.innerHTML = A.responseText;
			setCartEventHandlers("h")
		},
		failure : function(A, B) {
			alert(document.miniCartForm.miniCartDisplayError.value)
		}
	})
}
var qvw = null;
function setCartEventHandlers(A) {
	if (!(minimalMiniCart && isGuestUser && (minimalMiniCartMessage == ""))
			&& (canExpandMiniCart == true)) {
		if (qvw === null) {
			qvw = new QuickViewWindow(
					"miniCartMouseoverArea",
					{
						url : document.getElementById("miniCartDisplayURL").href,
						params : {
							minimalMiniCart : minimalMiniCart,
							minimalMiniCartMessage : minimalMiniCartMessage
						},
						method : "POST",
						callback : function(C, D, B) {
							if (D) {
								svg_classhandlers_decoratePage()
							} else {
								alert(document.miniCartForm.miniCartDisplayError.value);
								qvw.closeWindow()
							}
						}
					},
					{
						initTrigger : A,
						offsetTop : 25,
						offsetLeft : -240,
						animateFromAnchor : false,
						windowConf : {
							width : 350,
							autoHeight : true,
							title : document.getElementById("miniCartTitle").value
						}
					})
		}
	}
}
/*function refreshMiniCartLink(A) {
	if (typeof A == "undefined") {
		A = false
	}
	Ext.Ajax.request( {
		url : document.getElementById("miniCartLinkDisplayURL").href,
		params : {
			forceRefresh : A
		},
		method : "GET",
		success : function(B, C) {
			var D = document.getElementById("XPEDXMiniCartLinkDisplayDiv");
			D.innerHTML = B.responseText;
			if (qvw !== null) {
				qvw.getWindowHandle().destroy();
				qvw = null;
				setCartEventHandlers("hi")
			}
		},
		failure : function(B, C) {
			alert(document.miniCartForm.miniCartDisplayError.value)
		}
	})
}*/
function showMiniCartWindow() {
	if (qvw !== null) {
		qvw.createWindow()
	}
}
function hideMiniCartWindow() {
	var A = document.getElementById("miniCartDiv");
	A.style.display = "none";
	miniCartExpanded = false
}
function toggleVisibility(B) {
	var A = document.getElementById(B);
	if (A.style.display != "none") {
		A.style.display = "none"
	} else {
		A.style.display = "inline"
	}
}
function deleteLine(A, B) {
	Ext.Ajax.request( {
		url : document.getElementById("miniCartDeleteURL").href,
		params : {
			delLineKey : B,
			orderHeaderKey : A,
			operation : "DeleteLine"
		},
		method : "GET",
		success : function(C, D) {
			refreshMiniCartLink()
		},
		failure : function(C, D) {
			alert(document.miniCartForm.miniCartGeneralAJAXError.value)
		}
	})
}
/* Commented this method as this is already present in xpedx-header.js
function updateLines() {
	if (swc_validateForm("miniCartData") == false) {
		return
	}
	document.miniCartData.action = document.miniCartData.updateURL.value;
	Ext.Ajax.request( {
		url : document.getElementById("miniCartUpdateURL").href,
		form : "miniCartData",
		method : "POST",
		success : function(A, B) {
			refreshMiniCartLink()
		},
		failure : function(A, B) {
			alert(document.miniCartForm.miniCartGeneralAJAXError.value)
		}
	})
}*/
function miniCartCheckout() {
	if (swc_validateForm("miniCartData") == false) {
		return
	}
	document.miniCartData.action = document.miniCartData.checkoutURL.value;
	document.miniCartData.submit()
};