package com.xpedx.sterling.rcp.pca.sharedTasks.shiptolookup;
import java.awt.Color;
import java.awt.font.TextAttribute;
import java.util.HashMap;

import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.TableItem;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import com.xpedx.sterling.rcp.pca.tasks.myitems.screen.XPXMyItemsListDetailsPanelBehavior;
import com.xpedx.sterling.rcp.pca.util.XPXCacheManager;
import com.xpedx.sterling.rcp.pca.util.XPXPaginationBehavior;
import com.yantra.yfc.rcp.YRCApiContext;
import com.yantra.yfc.rcp.YRCPlatformUI;
import com.yantra.yfc.rcp.YRCXmlUtils;
import com.yantra.yfc.rcp.internal.YRCCommand;
import com.yantra.yfc.rcp.internal.YRCCommandRepository;

/**
 * @author Manas
 *
 * Generated by Sterling RCP Tools
 */
public class XPXShowItemListDetailPanelBehaviour extends XPXPaginationBehavior{
	public static final String PAGINATION_STRATEGY_FOR_SEARCH = NEXTPAGE_PAGINATION_STRATEGY;
	private static final String COMMAND_GET_LIST_OF_SHIPTO="XPXGetListOfAssignedShipTosForAUserService";
	private Element elePageInput;
	private XPXShowItemListDetailPanel page;
	public static  HashMap masterUOMList = new HashMap<String, String>();
	/**
	 * Constructor for the behavior class. 
	 * @param elePageInput 
	 */
    public XPXShowItemListDetailPanelBehaviour(Composite ownerComposite, String formId, Element elePageInput) {
        super(ownerComposite, formId);
        this.elePageInput = elePageInput;
        
        this.page = (XPXShowItemListDetailPanel)ownerComposite;
        initPage();
        masterUOMList =XPXMyItemsListDetailsPanelBehavior.masterUOMList;
        
    }
    
	/**
	 * This method initializes the behavior class.
	 */    
	public void initPage() {
		
		if(null != elePageInput){
			YRCApiContext apiCtx = new YRCApiContext();
			String[] apinames = {"getXPEDXMyItemsListDetail"};
			apiCtx.setApiNames(apinames);
			apiCtx.setInputXml(elePageInput.getOwnerDocument());
			apiCtx.setFormId(getFormId());
			callApi(apiCtx);
	}
	}
	@Override
	public void handleApiCompletion(YRCApiContext apiContext) {
		if (apiContext.getInvokeAPIStatus() > 0){
			if (page.isDisposed()) {
				YRCPlatformUI.trace("Page is Disposed");
			} else {
				String[] apinames = apiContext.getApiNames();
				for (int i=0; i<apinames.length; i++) {
					String apiname = apinames[i];
					if(YRCPlatformUI.equals(apiname, "getXPEDXMyItemsListDetail")){
		     			Document docOutput = apiContext.getOutputXmls()[i];
						if (docOutput != null) {
							Element eleOutput = docOutput.getDocumentElement();
							System.out.println("The API output is:" + YRCXmlUtils.getString(eleOutput));
							setModel("XPEDXMyItemsListList",eleOutput);
						}
		     		}
				}
			}
		}
		//super.handleApiCompletion(apiContext);
	}

	public void mouseDoubleClick(MouseEvent e, String string) {
		TableItem tblItems[] = page.tblResults.getSelection();
        if(tblItems.length > 0)
        	for(int i = 0; i < tblItems.length; i++)
                if(!YRCPlatformUI.isVoid(tblItems[i]) && !tblItems[i].isDisposed())
                {
                	
                	Element eleCustomer = (Element)tblItems[i].getData();
                	
					Element eleAddress = YRCXmlUtils.createDocument("XpedxMilBothLst").getDocumentElement();
					if(!YRCPlatformUI.isVoid(eleCustomer.getAttribute("CustomerContactID")))
						eleAddress.setAttribute("Createuserid", eleCustomer.getAttribute("CustomerContactID"));
                    this.page.eleSelected = eleAddress;
                    
                }
		
	}
	
	public void search() {
		this.getXpxPaginationData().setInputXml(getModel("Input_getAssignedShipToList").getOwnerDocument());
		super.search();
	}

	private void setPaginationDetails(){
		 
        this.getXpxPaginationData().setPaginationStrategy(PAGINATION_STRATEGY_FOR_SEARCH);
        
		YRCCommand command = YRCCommandRepository.getCommand((new StringBuilder()).append(getFormId()).append(COMMAND_GET_LIST_OF_SHIPTO).toString());
		this.getXpxPaginationData().setApiName(command.getCommandAPIName());
		this.getXpxPaginationData().setIsFlow("Y");
		
		//Set the model data. This is a pre-requisite before calling the handlePaginationOutput method
		setSrcModelName("XPXCustomerAssignmentViewList");
		setRootListElemName("XPXCustomerAssignmentViewList");
		setRepeatingElemName("XPXCustomerAssignmentView");
	}
	public void setRepeatingElemName(String repeatingElemName) {
		this.repeatingElemName = repeatingElemName;
	}

	public void setRootListElemName(String rootListElemName) {
		this.rootListElemName = rootListElemName;
	}

	public void setSrcModelName(String srcModelName) {
		this.srcModelName = srcModelName;
	}
	
	/*public void getVal() {

		String UOMId = getFieldValue("uomIDCombo");
		Element eleUomList = YRCXmlUtils.createDocument("UOMList").getDocumentElement();
		eleUomList.setAttribute("UOMID", UOMId);
		eleUomList.setAttribute("UOMDesc", (String) masterUOMList.get(UOMId));
        this.page.eleSelected = eleUomList;
	}
	*/

}


