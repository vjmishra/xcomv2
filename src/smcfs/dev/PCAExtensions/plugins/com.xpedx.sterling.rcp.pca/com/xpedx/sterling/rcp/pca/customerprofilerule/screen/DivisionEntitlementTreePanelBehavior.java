/*
 * Created on Apr 14,2010
 *
 */
package com.xpedx.sterling.rcp.pca.customerprofilerule.screen;

import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import com.xpedx.sterling.rcp.pca.userprofile.editor.XPXUserProfileEditor;
import com.yantra.yfc.rcp.YRCApiContext;
import com.yantra.yfc.rcp.YRCBehavior;
import com.yantra.yfc.rcp.YRCDesktopUI;
import com.yantra.yfc.rcp.YRCEditorInput;
import com.yantra.yfc.rcp.YRCPlatformUI;
import com.yantra.yfc.rcp.YRCXmlUtils;
/**
 * @author Manas
 *
 * Generated by MTCE Copyright © 2005, 2006 Sterling Commerce, Inc. All Rights
 * Reserved.
 */

public class DivisionEntitlementTreePanelBehavior extends YRCBehavior {

	private Element inputElement;
	private DivisionEntitlementTreePanel page;
	private String userID;
	String organizationCode;
	Element multiAPIDocElement=null;
	private String UserOrgCode;
	private String customerContactID;
	private String customerKey;
	private CustomerProfileMaintenance parentObj;

	public DivisionEntitlementTreePanelBehavior( DivisionEntitlementTreePanel divisionEntitlementTreePanel,
			Object inputObject, CustomerProfileMaintenance parentObj) {

		super(divisionEntitlementTreePanel, divisionEntitlementTreePanel.getFormId(), inputObject);
		this.page = divisionEntitlementTreePanel;
		this.inputElement=((YRCEditorInput) inputObject).getXml();
		this.parentObj = parentObj;

		Element generalInfo= parentObj.getBehavior().getLocalModel("XPXCustomerIn"); //TODO what for?
		setModel("XPXCustomerIn",generalInfo);

		customerKey = YRCXmlUtils.getAttribute(this.inputElement, "CustomerKey");
		initPage();
	}

	public void initPage() {
		customerKey = YRCXmlUtils.getAttribute(this.inputElement, "CustomerKey");
		System.out.println("The customerKey is " + customerKey);
		if(!YRCPlatformUI.isVoid(customerKey))
		{
			callApi("XPXGetCustomerList", YRCXmlUtils.createFromString("<Customer  CustomerKey='" + YRCXmlUtils.getAttribute(this.inputElement, "CustomerKey") + "' />"),null);
		}
	}

	private void callApi(String apinames, Document inputXml, String formId) {
		YRCApiContext ctx = new YRCApiContext();
		ctx.setFormId((!YRCPlatformUI.isVoid(formId))?formId:page.getFormId());
		ctx.setApiName(apinames);
		ctx.setInputXml(inputXml);
		if (!page.isDisposed())
			callApi(ctx, page);
	}
	private void callApis(String apinames[], Document inputXmls[]) {
		YRCApiContext ctx = new YRCApiContext();
		ctx.setFormId(page.getFormId());
		ctx.setApiNames(apinames);
		ctx.setInputXmls(inputXmls);
		System.out.println("JOE input xml: " + YRCXmlUtils.getString(inputXmls[0]));
		if (!page.isDisposed())
			callApi(ctx, page);
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see com.yantra.yfc.rcp.YRCBaseBehavior#handleApiCompletion(com.yantra.yfc.rcp.YRCApiContext)
	 */
	@Override
	public void handleApiCompletion(YRCApiContext ctx) {
		if (ctx.getInvokeAPIStatus() > 0){
			if (page.isDisposed()) {
				YRCPlatformUI.trace("Page is Disposed");
			} else {
				String[] apinames = ctx.getApiNames();

				for (int i = 0; i < apinames.length; i++) {
					String apiname = apinames[i];

					if ("XPXGetCustomerList".equals(apiname)) {
						System.out.println("-->API XPXGetCustomerList called");

						Element outXml = ctx.getOutputXmls()[i].getDocumentElement();
						setModel("XPXGetImmediateChildCustomerListService",outXml);
						getChildList();    //--function used to set the values of child nodes in Tree structure

					} else if ("XPXManageCustomerAndAssignmentAPIService".equals(apiname)) {
						 getCustomerAssignmentsAfterUpdate();
						((XPXUserProfileEditor)YRCDesktopUI.getCurrentPart()).showBusy(false);

					} else if ("manageCustomer".equals(apiname)) {
						((XPXUserProfileEditor)YRCDesktopUI.getCurrentPart()).showBusy(false);
					}
				}
			}
		}
		//In case of Invoke API failure
		else if(ctx.getInvokeAPIStatus()==-1){
			Element outXml = ctx.getOutputXml().getDocumentElement();

			if("Errors".equals(outXml.getNodeName())){
					Element errorEle = (Element) outXml.getElementsByTagName(
							"Error").item(0);
					if (!YRCPlatformUI.isVoid(errorEle)) {
						YRCPlatformUI.trace(errorEle
								.getAttribute("ErrorDescription"), outXml);
						YRCPlatformUI.showError("Failed!", errorEle
								.getAttribute("ErrorDescription"));
					}
				}
		}

		super.handleApiCompletion(ctx);
	}

	public void getChildList(){
		Element childCustomerList = getModel("XPXGetImmediateChildCustomerListService");
		Element customerElement = YRCXmlUtils.getChildElement(childCustomerList, "Customer");
		ArrayList<Element> arrlst=new ArrayList<Element>();
		arrlst.add(customerElement);

		page.setTreeValues(null, arrlst); //--function used to set the values of child nodes in Tree structure
	}

	//TODO replace?
	private void getCustomerAssignmentsAfterUpdate()
	{
		String[] apinames = {"getCustomerAssignmentList"};
		Document[] docInput = {
				YRCXmlUtils.createFromString("<CustomerAssignment UserId='" + userID + "'/>"),
		};
		callApis(apinames, docInput);
	}

	//TODO replace?
	public void callManageCustomer()
	{
		Element targetModel = getModel("XPXCustomerContactIn");
		if(!YRCPlatformUI.isVoid(customerContactID)){
		targetModel.setAttribute("CustomerContactID", customerContactID);
		String shipTo = "";
		Document docInput =
			YRCXmlUtils.createFromString("<CustomerContact CustomerContactID='" + customerContactID + "'>" + "<Extn ExtnDefaultShipTo ='" + shipTo + "'/>" + "</CustomerContact>");
		Element inputXML = docInput.getDocumentElement();
		YRCApiContext ctx = new YRCApiContext();
		ctx.setFormId(page.getFormId());
		ctx.setApiName("manageCustomer");
		ctx.setInputXml(createManageCustomerOutputXml(inputXML).getOwnerDocument());
		if (!page.isDisposed())
			callApi(ctx, page);
		}
	}

	//TODO replace?
	private Element createManageCustomerOutputXml(Element results){

		Element targetDoc = YRCXmlUtils.createFromString("<Customer CustomerKey='" + customerKey + "'/>").getDocumentElement();
		Element targetContactList = YRCXmlUtils.createChild(targetDoc, "CustomerContactList");
		YRCXmlUtils.importElement(targetContactList, results);
		return targetDoc;
	}

	//TODO replace?
	private void saveChanges(List<String> wList, String operation,Element customerAssignmentListElem) {

		for (int index = 0; index < wList.size(); index++) {
			try {
				if(wList.get(index) != null && wList.get(index).trim().length() ==0 )
					continue;
				Element customerAssignmentElem=YRCXmlUtils.createChild(customerAssignmentListElem, "CustomerAssignment");
				customerAssignmentElem.setAttribute("CustomerID", wList.get(index));
				customerAssignmentElem.setAttribute("OrganizationCode", UserOrgCode);
				customerAssignmentElem.setAttribute("UserId", userID);
				customerAssignmentElem.setAttribute("Operation", operation);
				} catch (Exception ex) {
				System.out.println("***********Record already exists");
			}
		}
	}

	//TODO replace?
	public void createManageAssignmentInput(List<String> wList, boolean action){
		if(null ==multiAPIDocElement){
		multiAPIDocElement = YRCXmlUtils.createDocument("ManageCustomerAndAssignment").getDocumentElement();

		}
		multiAPIDocElement.setAttribute("IgnoreOrdering", "Y");
		Element custAssignmentele=(Element)multiAPIDocElement.getElementsByTagName("CustomerAssignmentList").item(0);
		if(custAssignmentele == null)
		{
			custAssignmentele= YRCXmlUtils.createChild(multiAPIDocElement, "CustomerAssignmentList");
		}
		if(!action)
		saveChanges(wList, "Delete",custAssignmentele);
		else
			saveChanges(wList, "Create",custAssignmentele);
		System.out.println("Final XML : " + YRCXmlUtils.getString(multiAPIDocElement));
	}

	//TODO replace?
	public void updateAction(){
		page.getTargetModelForUpdateAssignments();
		YRCApiContext ctx = new YRCApiContext();
		ctx.setApiName("XPXManageCustomerAndAssignmentAPIService");

		ctx.setInputXml(multiAPIDocElement.getOwnerDocument());
		ctx.setFormId(page.getFormId());
		ctx.setShowError(false);
		ctx.setUserData("isRefreshReqd", String.valueOf(false));
		callApi(ctx, page);
		multiAPIDocElement = null;
	    ((XPXUserProfileEditor)YRCDesktopUI.getCurrentPart()).showBusy(true);
	}

	public boolean isThisEntitled(Element eleCust) {
		return "Y".equalsIgnoreCase(eleCust.getAttribute("CustomerLevel"));
	}
}