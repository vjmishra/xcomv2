/*
 * Created on Apr 15,2010
 *
 */
package com.xpedx.sterling.rcp.pca.orderlines.screen;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;

import javax.xml.xpath.XPathConstants;

import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;

import com.xpedx.sterling.rcp.pca.util.XPXConstants;
import com.xpedx.sterling.rcp.pca.util.XPXUtils;
import com.yantra.yfc.rcp.YRCApiContext;
import com.yantra.yfc.rcp.YRCBehavior;
import com.yantra.yfc.rcp.YRCEditorInput;
import com.yantra.yfc.rcp.YRCPlatformUI;
import com.yantra.yfc.rcp.YRCXPathUtils;
import com.yantra.yfc.rcp.YRCXmlUtils;

/**
 * @author sdodda
 * 
 * Generated by MTCE
 */

public class OrderLinePanelBehavior extends YRCBehavior {

	private final String PRICE_AND_AVAILABILITY_SRVC = "XPXPnAService";
	private final String CAP_NONE = "NONE";
	private final String action = "REMOVE";
	private OrderLinePanel page;
	private Element inputElement;
	private int primeLineNo;
	private int subLineNo;
	private boolean searchSKUPerformed = false;
	private ArrayList splitLinelist;
	private boolean isSplitLine = false;
	private Element originalCustB2BLineEle;
	private Element eleOrderLine;
	private Element elePnaRes = null;
	private String orderMultiple = "";
	private String baseUOM = "";
	private Element eleUOMList = null;

	/**
	 * Constructor for the behavior class.
	 * 
	 * @param eleOrderLine
	 * @param uOMList
	 *            TODO
	 */

	public OrderLinePanelBehavior(Composite ownerComposite, String formId,
			Object inputObject, Element eleOrderLine,
			Element elePandALineResponse, Element uOMList) {
		super(ownerComposite, formId, inputObject);
		this.page = (OrderLinePanel) ownerComposite;
		this.inputElement = ((YRCEditorInput) inputObject).getXml();
		this.eleOrderLine = eleOrderLine;
		setModel("LineTypes", page.getOrderLinesPanel().getPageBehavior()
				.getLineTypes());
		setModel("ChargesList", page.getOrderLinesPanel().getPageBehavior()
				.getChargesList());
		setModel("TransferCirclesList", page.getOrderLinesPanel()
				.getPageBehavior().getLocalModel("TransferCirclesList"));
		originalCustB2BLineEle = page.getOrderLinesPanel().getPageBehavior()
				.getLocalModel("customerOriginalB2BOrder");
		if (isCancelledLine()) {
			page.isCancelledLine = true;
		}
		if (null != uOMList) {
			setModel("UOMList", uOMList);
			this.eleUOMList = uOMList;

		}
		if (null != eleOrderLine) {
			Element temp2 = YRCXmlUtils.getXPathElement(eleOrderLine,
					"/OrderLine/Item");
			this.orderMultiple = eleOrderLine.getAttribute("OrderMultiple");
			String itemID = null;
			if (temp2 != null) {
				itemID = YRCXmlUtils.getAttributeValue(temp2, "/Item/@ItemID");
			}
			// if(itemID!=null){
			// //getItemInfo(itemID,"LPC");
			// String sEnterpriseCode = ((YRCEditorInput)
			// getInputObject()).getAttributeValue("Order/@EnterpriseCode");;
			// String sShipToID = "";
			// Element eleOrderDetails =
			// page.getOrderLinesPanel().getPageBehavior().getOrderDetails();
			// sShipToID =
			// eleOrderDetails.getAttribute("BuyerOrganizationCode");
			// sEnterpriseCode=eleOrderDetails.getAttribute("EnterpriseCode");
			// getUOMList(itemID, sShipToID,sEnterpriseCode);
			// }

			Element temp1 = YRCXmlUtils.getXPathElement(eleOrderLine,
					"/OrderLine/OrderLineTranQuantity");
			if (!YRCPlatformUI.isVoid(temp1)
					&& !YRCPlatformUI.isVoid(temp1
							.getAttribute("TransactionalUOM")))
				temp1.setAttribute("TransactionalUOMDesc", (String) page
						.getOrderLinesPanel().getPageBehavior().masterUOMList
						.get(temp1.getAttribute("TransactionalUOM")));
			if (!YRCPlatformUI.isVoid(temp2)
					&& !YRCPlatformUI.isVoid(temp2
							.getAttribute("UnitOfMeasure")))
				temp2.setAttribute("UnitOfMeasureDesc", (String) page
						.getOrderLinesPanel().getPageBehavior().masterUOMList
						.get(temp2.getAttribute("UnitOfMeasure")));

			Element temp3 = YRCXmlUtils.getXPathElement(eleOrderLine,
					"/OrderLine/Extn");
			if (!YRCPlatformUI.isVoid(temp3)
					&& !YRCPlatformUI.isVoid(temp3
							.getAttribute("ExtnPricingUOM")))
				temp3.setAttribute("ExtnPricingUOMDesc", (String) page
						.getOrderLinesPanel().getPageBehavior().masterUOMList
						.get(temp3.getAttribute("ExtnPricingUOM")));
		}
		if (null != originalCustB2BLineEle) {
			Element extnElement = YRCXmlUtils.getChildElement(eleOrderLine,
					"Extn");
			if (!YRCPlatformUI.isVoid(extnElement)) {
				String msgLineId = extnElement.getAttribute("ExtnMsgLineId");

				// List nodeList=YRCXmlUtils.getChildren(originalCustLineEle,
				// "XPXRefOrderHdr");
				NodeList custB2BLineList = originalCustB2BLineEle
						.getElementsByTagName("XPXRefOrderLine");
				int length = custB2BLineList.getLength();
				for (int i = 0; i < length; i++) {
					Element custB2BEle = (Element) custB2BLineList.item(i);
					String custMsgLineId = custB2BEle.getAttribute("MsgLineId");
					if (!YRCPlatformUI.isVoid(msgLineId)) {
						if (msgLineId.equals(custMsgLineId)) {
							setModel("customerB2BOriginalOrder", custB2BEle);

							Element eleOrderDetails = (Element) page
									.getOrderLinesPanel().getPageBehavior()
									.getOrderDetails();
							Element orderDetailsExtnElement = YRCXmlUtils
									.getChildElement(eleOrderDetails, "Extn");
							String envId = orderDetailsExtnElement
									.getAttribute("ExtnEnvtId");
							String strOriginalRequiredUOM = custB2BEle
									.getAttribute("TransactionalUOM");
							String strOriginalPricingUOM = custB2BEle
									.getAttribute("PricingUOM");
							if (!YRCPlatformUI.isVoid(envId)) {
								strOriginalRequiredUOM = envId + "_"
										+ strOriginalRequiredUOM;
								strOriginalPricingUOM = envId + "_"
										+ strOriginalPricingUOM;
							}
							setFieldValue("txtOriginalRequiredUOM",
									(String) page.getOrderLinesPanel()
											.getPageBehavior().masterUOMList
											.get(strOriginalRequiredUOM));
							setFieldValue("txtOriginalPriceUOM",
									(String) page.getOrderLinesPanel()
											.getPageBehavior().masterUOMList
											.get(strOriginalPricingUOM));
						}
					}
				}
			}

		}

		if (null != elePandALineResponse) {
			this.elePnaRes = elePandALineResponse;
			// String envCode =
			// YRCXmlUtils.getXPathElement(elePandALineResponse,
			// "/PriceAndAvailability/EnvironmentId").getTextContent();
			Element statusElement = YRCXmlUtils.getXPathElement(
					elePandALineResponse, "/Item/LineStatusCode");
			String status = statusElement.getTextContent();

			Element eleCustDetails = (Element) page.getOrderLinesPanel()
					.getPageBehavior().getCustomerDetails();
			Element custDetailsExtnElement = YRCXmlUtils.getChildElement(
					eleCustDetails, "Extn");
			String envCode = custDetailsExtnElement
					.getAttribute("ExtnEnvironmentCode");

			// populatePnAResponseinUI(elePandALineResponse);
			setModel("PnAResponse", elePandALineResponse);
			if ("00".equals(status)) {
				populatePnAResponseinUI(elePandALineResponse);
			} else {
				String inputString = envCode + "_" + status;
				displayError(inputString, page);
			}

		}

		if (!YRCPlatformUI.isVoid(eleOrderLine)) {
			String placeOrderValue = eleOrderLine
					.getAttribute("LineErrorValue");
			if (!YRCPlatformUI.isVoid(placeOrderValue)) {
				Element eleCustDetails = (Element) page.getOrderLinesPanel()
						.getPageBehavior().getCustomerDetails();
				Element custDetailsExtnElement = YRCXmlUtils.getChildElement(
						eleCustDetails, "Extn");
				String envCode = custDetailsExtnElement
						.getAttribute("ExtnEnvironmentCode");
				String inputString = envCode + "_" + placeOrderValue;
				getPlacedOrderLineError(inputString, page);
			}

		}

		if (YRCPlatformUI.isVoid(eleOrderLine.getAttribute("PrimeLineNo"))) {
			Composite pnlDynamicLineParent = page.getParent();
			Control childIterator[] = pnlDynamicLineParent.getChildren();
			int noOfChildren = childIterator.length;
			int iPLN = 0;
			for (int k = 0; k < noOfChildren; k++) {
				OrderLinePanel childpnl = (OrderLinePanel) childIterator[k];
				if ((OrderLinePanel) ownerComposite != childpnl) {
					int newPLN = childpnl.getBehavior().getPrimeLineNo();
					if (newPLN > iPLN)
						iPLN = newPLN;
				}
			}
			primeLineNo = iPLN + 1;
		} else {
			primeLineNo = Integer.parseInt(eleOrderLine
					.getAttribute("PrimeLineNo"));
		}

		if (YRCPlatformUI.isVoid(eleOrderLine.getAttribute("PrimeLineNo"))) {
			subLineNo = 1;
		} else {
			subLineNo = Integer
					.parseInt(eleOrderLine.getAttribute("SubLineNo"));
		}
		// setting currency attribute & it's using under OrderLinePanel -
		// LineTotal,AdjAmount,shippable amounts fields to display values with
		// currency code.
		eleOrderLine.setAttribute("Currency", "USD");
		setModel("OrderLineTmp", eleOrderLine);
	}

	private void getPlacedOrderLineError(String status, OrderLinePanel obj) {
		if (!(obj.getOrderLinesPanel().getPageBehavior().PlacedOrderLineError)
				.containsKey(status)) {
			setFieldValue("lblPlacedOrderErr", "Unknown Line Error");

		} else {
			setFieldValue("lblPlacedOrderErr", (page.getOrderLinesPanel()
					.getPageBehavior().PlacedOrderLineError).get(status));
		}

	}

	public void displayError(String status, OrderLinePanel obj) {
		if (!(obj.getOrderLinesPanel().getPageBehavior().StatusTable)
				.containsKey(status)) {
			setFieldValue("lblErr", "Unknown Line Error");

		} else {
			setFieldValue("lblErr", (page.getOrderLinesPanel()
					.getPageBehavior().StatusTable).get(status));
		}
	}

	private void getUOMList(String attribute, String string,
			String enterpriseCode) {
		Document docInput = YRCXmlUtils.createDocument("XPXUOMListAPI");
		docInput.getDocumentElement().setAttribute("ItemID", attribute);
		docInput.getDocumentElement().setAttribute("CustomerID", string);
		docInput.getDocumentElement().setAttribute("OrganizationCode",
				enterpriseCode);
		YRCApiContext ctx = new YRCApiContext();
		ctx
				.setFormId("com.xpedx.sterling.rcp.pca.orderlines.wizard.XPXOrderLinesWizard");
		ctx.setApiName("XPXUOMListService");
		ctx.setInputXml(docInput);
		if (!page.isDisposed())
			callApi(ctx, page);

	}

	/**
	 * This method initializes the behavior class.
	 */
	public void init() {
		// TODO: write behavior init here
	}

	public Element getTargetModelforParent() {
		Element olElem = this.getTargetModel("OrderLineNS");
		Element itemElem = this.getModel("Item");
		olElem.setAttribute("ReservationMandatory", "N");
		olElem.setAttribute("ValidateItem", "N");
		String extnUnitPrice = "0.0";
		// OrderLineNS:/OrderLine/Item/@ItemID
		if (YRCPlatformUI.equals("M", getFieldValue("comboLineType"))
				&& !YRCPlatformUI.isVoid(getFieldValue("comboItemId"))) {
			YRCXmlUtils.setAttributeValue(olElem, "/OrderLine/Item/@ItemID",
					getFieldValue("comboItemId"));
		} else {
			YRCXmlUtils.setAttributeValue(olElem, "/OrderLine/Item/@ItemID",
					getFieldValue("txtItemId"));
		}
		// YRCXmlUtils.setAttributeValue(olElem, "/OrderLine/Item/@ItemID",
		// getFieldValue("txtItemId"));
		if (!YRCPlatformUI.equals(page.getOldLineComment(),
				getFieldValue("txtComment"))) {
			String strLineInstructionKey = (String) YRCXPathUtils
					.evaluate(
							this.eleOrderLine,
							"/OrderLine/Instructions/Instruction[@InstructionType='LINE']/@InstructionDetailKey",
							XPathConstants.STRING);
			XPXUtils.addCommentElement(olElem, getFieldValue("txtComment"),
					"LINE", strLineInstructionKey);
		}
		String sUOM = YRCXmlUtils.getAttributeValue(olElem,
				"/OrderLine/OrderLineTranQuantity/@TransactionalUOM");
		Element oldOrderLine = getModel("OrderLineTmp");
		// YRCXmlUtils.setAttributeValue(olElem, "/OrderLine/@OrderedQty",
		// getFieldValue("txtQuantity"));
		YRCXmlUtils.setAttributeValue(olElem,
				"/OrderLine/Extn/@ExtnPricingUOM",
				getFieldValue("hiddenStxtPricingUOM"));
		if (!YRCPlatformUI.isVoid(getFieldValue("stxtUnitPrice"))) {
			extnUnitPrice = getFieldValue("stxtUnitPrice");
		}
		/*
		 * if(!YRCPlatformUI.isVoid(elePnaRes)){
		 * extnUnitPrice=YRCXmlUtils.getChildElement(elePnaRes,
		 * "UnitPricePerPricingUOM").getTextContent(); }
		 */
		YRCXmlUtils.setAttributeValue(olElem, "/OrderLine/Extn/@ExtnUnitPrice",
				extnUnitPrice);

		YRCXmlUtils.setAttributeValue(olElem,
				"/OrderLine/Extn/@ExtnExtendedPrice",
				getFieldValue("txtExtnPrice"));

		String stxtItemDescVal = getFieldValue("txtItemDesc");
		if (!YRCPlatformUI.isVoid(stxtItemDescVal)) {
			YRCXmlUtils.setAttributeValue(olElem,
					"/OrderLine/Item/@ItemShortDesc", stxtItemDescVal);
		}
		String chkPriceoverRideFlag = YRCXmlUtils.getAttributeValue(olElem,
		"/OrderLine/Extn/@ExtnPriceOverrideFlag");
		
		if("Y".equals(chkPriceoverRideFlag)){
			YRCXmlUtils.setAttributeValue(olElem,
					"/OrderLine/LinePriceInfo/@IsPriceLocked", "Y");
		}
		else{
			YRCXmlUtils.setAttributeValue(olElem,
					"/OrderLine/LinePriceInfo/@IsPriceLocked", "N");
		}
		
		if (!YRCPlatformUI.isVoid(page.getOrderLineKey())) {
			olElem.setAttribute("OrderLineKey", page.getOrderLineKey());
			YRCXmlUtils.setAttributeValue(olElem,
					"/OrderLine/Extn/@ExtnWebLineNumber", YRCXmlUtils
							.getAttributeValue(oldOrderLine,
									"/OrderLine/Extn/@ExtnWebLineNumber"));
			YRCXmlUtils.setAttributeValue(olElem,
					"/OrderLine/Extn/@ExtnLegacyLineNumber", YRCXmlUtils
							.getAttributeValue(oldOrderLine,
									"/OrderLine/Extn/@ExtnLegacyLineNumber"));
		} else {
			olElem.setAttribute("Action", "CREATE");
			// TODO hardcoded UOM to EACH
			if (YRCPlatformUI.equals("P", getFieldValue("comboLineType"))) {
				YRCXmlUtils.setAttributeValue(olElem,
						"/OrderLine/Item/@UnitOfMeasure",
						(itemElem != null) ? itemElem
								.getAttribute("UnitOfMeasure") : "EACH");
				if (this.isValueNoneOrVoid(olElem,
						"/OrderLine/LinePriceInfo/@PricingUOM")) {
					YRCXmlUtils.setAttributeValue(olElem,
							"/OrderLine/LinePriceInfo/@PricingUOM",
							(itemElem != null) ? YRCXmlUtils.getAttributeValue(
									itemElem,
									"/Item/PrimaryInformation/@PricingUOM")
									: "EACH");
				}
			} else if (YRCPlatformUI
					.equals("M", getFieldValue("comboLineType"))) {
				YRCXmlUtils.setAttributeValue(olElem,
						"/OrderLine/Extn/@ExtnUnitPrice", YRCXmlUtils
								.getAttributeValue(olElem,
										"/OrderLine/Extn/@ExtnUnitPrice"));
				// YRCXmlUtils.setAttributeValue(olElem,
				// "/OrderLine/Extn/@ExtnUnitPrice",
				// YRCXmlUtils.getAttributeValue(olElem,
				// "/OrderLine/LinePriceInfo/@UnitPrice"));
			}
		}

		if (YRCPlatformUI.equals("M", getFieldValue("comboLineType"))) {
			Element eleOrderLineTranQuantity = YRCXmlUtils.getChildElement(
					olElem, "OrderLineTranQuantity");
			if (null != eleOrderLineTranQuantity) {
				String strTransUOM = eleOrderLineTranQuantity
						.getAttribute("TransactionalUOM");
				if (eleOrderLineTranQuantity.hasAttribute("TransactionalUOM")) {
					eleOrderLineTranQuantity
							.removeAttribute("TransactionalUOM");
				}
			}
		}

		// olElem.setAttribute("TransactionalLineId",
		// String.valueOf(page.getLineNo()));
		if (YRCPlatformUI.isVoid(getFieldValue("stxtUnitPrice"))) {
			YRCXmlUtils.setAttributeValue(olElem,
					"/OrderLine/LinePriceInfo/@UnitPrice", "0.00");
		} else {
			// Converting Pricing UOM price to Base UOM Price

			String ordLineUnitPrice = "0.00", lineType = olElem
					.getAttribute("LineType");
			if (!lineType.equalsIgnoreCase("P")) {
				ordLineUnitPrice = getFieldValue("stxtUnitPrice");
			} else
				ordLineUnitPrice = conversionFromPricingUOMtoBasePricing(
						olElem, oldOrderLine, itemElem);
			YRCXmlUtils.setAttributeValue(olElem,
					"/OrderLine/LinePriceInfo/@UnitPrice", ordLineUnitPrice);
		}
		return olElem;
	}

	// Converting Pricing UOM price to Base UOM Price
	public String conversionFromPricingUOMtoBasePricing(
			Element currentOrderLine, Element ordLineTmp, Element itemModel) {
		String pricingConvFactor = "", ordLineReqUOM, pricingUOMUnitPrice, baseUOM = "", lineUnitprice = "0", pricingUOM, reqConvFactor = "";
		// get the Item Alternate UOM list from extended Item Model

		// logic to handle Conversion of pricing UOM to Requested UOM's.
		// ordLineReqOrdQty=YRCXmlUtils.getAttributeValue(currentOrderLine,"/OrderLine/OrderLineTranQuantity/@OrderedQty");
		ordLineReqUOM = YRCXmlUtils.getAttributeValue(currentOrderLine,
				"/OrderLine/OrderLineTranQuantity/@TransactionalUOM");
		pricingUOMUnitPrice = YRCXmlUtils.getAttributeValue(currentOrderLine,
				"/OrderLine/Extn/@ExtnUnitPrice");
		pricingUOM = YRCXmlUtils.getAttributeValue(currentOrderLine,
				"/OrderLine/Extn/@ExtnPricingUOM");
		if (!YRCPlatformUI.isVoid(itemModel)) {
			pricingConvFactor = (String) YRCXPathUtils.evaluate(itemModel,
					"/Order/AlternateUOMList/AlternateUOM[@UnitOfMeasure='"
							+ pricingUOM + "']/@Quantity",
					XPathConstants.STRING);
			baseUOM = YRCXmlUtils.getAttributeValue(itemModel,
					"/Order/@UnitOfMeasure");
		}

		if (pricingConvFactor == null || pricingConvFactor == "") {
			pricingConvFactor = (String) YRCXPathUtils.evaluate(ordLineTmp,
					"/OrderLine/ItemDetails/AlternateUOMList/AlternateUOM[@UnitOfMeasure='"
							+ pricingUOM + "']/@Quantity",
					XPathConstants.STRING);
			baseUOM = YRCXmlUtils.getAttributeValue(ordLineTmp,
					"/OrderLine/Item/@UnitOfMeasure");
		}

		if (baseUOM == "" || baseUOM == null)
			baseUOM = YRCXmlUtils.getAttributeValue(ordLineTmp,
					"/OrderLine/@UnitOfMeasure");
		// check ordLineReqUOM (OrdLineTranQty level UOM) is same as with base
		// (OrderlIne/Item level)UOM then set reqConvFactor=1
		if (ordLineReqUOM.equalsIgnoreCase(baseUOM)) {
			reqConvFactor = "1";
		} else { // checking for corresponding coversion factor value at
			// alternate UOM LIst for Requested UOM
			if (!YRCPlatformUI.isVoid(itemModel))
				reqConvFactor = (String) YRCXPathUtils.evaluate(itemModel,
						"/Order/AlternateUOMList/AlternateUOM[@UnitOfMeasure='"
								+ ordLineReqUOM + "']/@Quantity",
						XPathConstants.STRING);

			if (reqConvFactor == null || reqConvFactor == "")
				reqConvFactor = (String) YRCXPathUtils.evaluate(ordLineTmp,
						"/OrderLine/ItemDetails/AlternateUOMList/AlternateUOM[@UnitOfMeasure='"
								+ ordLineReqUOM + "']/@Quantity",
						XPathConstants.STRING);
		}

		// checking both pricing UOM & requested UOM are matches or not - if
		// matches no need to coversion factors & we can set the same
		// pricingUnitprice as Line unit price
		if (pricingUOM.equalsIgnoreCase(ordLineReqUOM)) {
			lineUnitprice = pricingUOMUnitPrice;
		} else { // get the lineUnitprice value with respect to Requested UOM
			// by using coversion factor value
			try {
				double lineInfoUnitprice = (((Double.parseDouble(reqConvFactor)) / (Double
						.parseDouble(pricingConvFactor))) * Double
						.parseDouble(pricingUOMUnitPrice));
				lineUnitprice = Double.toString(lineInfoUnitprice);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return lineUnitprice;
	}

	// logic end

	public void splitLine() {
		isSplitLine = false;
		Element eleOrderLineInput = getModel("OrderLineTmp");
		Element eleSplitLine = YRCXmlUtils.getCopy(eleOrderLineInput);
		eleSplitLine.removeAttribute("OrderHeaderKey");
		eleSplitLine.removeAttribute("OrderLineKey");
		Element eleExtn = YRCXmlUtils.getChildElement(eleSplitLine, "Extn");
		eleExtn.setAttribute("ExtnWebLineNumber", "");
		eleExtn.setAttribute("ExtnLegacyLineNumber", "");
		// eleSplitLine.removeChild(YRCXmlUtils.getChildElement(eleSplitLine,
		// "ReturnOrderLines"));
		// eleSplitLine.removeChild(YRCXmlUtils.getChildElement(eleSplitLine,
		// "Containers"));
		// eleSplitLine.removeChild(YRCXmlUtils.getChildElement(eleSplitLine,
		// "ShipmentLines"));
		// eleSplitLine.removeChild(YRCXmlUtils.getChildElement(eleSplitLine,
		// "OrderStatuses"));
		
		//Commented for JIRA 2541 
		/*eleSplitLine.removeChild(YRCXmlUtils.getChildElement(eleSplitLine,
				"OrderHoldTypes"));
		eleSplitLine.removeChild(YRCXmlUtils.getChildElement(eleSplitLine,
				"OrderDates"));*/
		// eleSplitLine.removeChild(YRCXmlUtils.getChildElement(eleSplitLine,
		// "Error"));
		eleSplitLine.setAttribute("OpenQty", "0");
		eleSplitLine.setAttribute("OrderedQty", "0");
		eleSplitLine.removeAttribute("ReshippedQty");
		eleSplitLine.removeAttribute("StatusQuantity");
		eleSplitLine.removeAttribute("MinLineStatus");
		eleSplitLine.removeAttribute("MaxLineStatus");
		eleSplitLine.removeAttribute("MaxLineStatusDesc");
		eleSplitLine.removeAttribute("MultipleStatusesExist");
		eleSplitLine.removeAttribute("Status");
		Composite pnlDynamicLineParent = page.getParent();
		Control childIterator[] = pnlDynamicLineParent.getChildren();
		int noOfChildren = childIterator.length;
		int iPLN = 0;
		for (int k = 0; k < noOfChildren; k++) {
			OrderLinePanel childpnl = (OrderLinePanel) childIterator[k];
			int newPLN = childpnl.getBehavior().getPrimeLineNo();
			if (newPLN > iPLN)
				iPLN = newPLN;
		}
		eleSplitLine.setAttribute("PrimeLineNo", Integer.toString(iPLN + 1));
		eleSplitLine.setAttribute("SubLineNo", "1");
		YRCXmlUtils.setAttributeValue(eleSplitLine,
				"/OrderLine/OrderLineTranQuantity/@OrderedQty", "0");
		YRCXmlUtils.setAttributeValue(eleSplitLine,
				"/OrderLine/LineOverallTotals/@ExtendedPrice", "");
		YRCXmlUtils.setAttributeValue(eleSplitLine,
				"/OrderLine/LinePriceInfo/@UnitPrice", "");

		splitLinelist = new ArrayList();
		splitLinelist.add(eleSplitLine);
		if (!YRCPlatformUI.isVoid(getModel("UOMList"))) {
			page.getOrderLinesPanel().createLines(splitLinelist, null,
					getModel("UOMList"));
		} else {
			isSplitLine = true;
			String sEnterpriseCode = ((YRCEditorInput) getInputObject())
					.getAttributeValue("Order/@EnterpriseCode");
			;
			String sShipToID = "";
			Element eleOrderDetails = page.getOrderLinesPanel()
					.getPageBehavior().getOrderDetails();
			sShipToID = eleOrderDetails.getAttribute("BuyerOrganizationCode");
			sEnterpriseCode = eleOrderDetails.getAttribute("EnterpriseCode");
			String sItemID = getFieldValue("txtItemId");
			this.getUOMList(sItemID, sShipToID, sEnterpriseCode);

		}
	}

	public int getPrimeLineNo() {
		return primeLineNo;
	}

	public int getSubLineNo() {
		return subLineNo;
	}

	public void appendDashBoardOverride(Element dashBoardListElem,
			String orderHeaderkey) {
		HashMap<String, String> overrideMap = new HashMap<String, String>();
		overrideMap.put("chkPreventBackOrder", "PreventBackOrder");
		overrideMap.put("chkAllowBackOrder",
				"ItemNotAvailableForNextDayShipment");
		overrideMap.put("chkPriceDiscrepency", "PriceDiscrepency");
		overrideMap.put("chkCustLineSeqNo", "RequiredCustomerLineSequenceNo");
		overrideMap.put("chkCustLineAcctNo", "RequiredCustomerLineAccountNo");
		overrideMap.put("chkAcceptLineComments", "LineCommentsByCustomer");
		overrideMap.put("chkGTMVariance", "GrossTradingMargin");
		for (Entry<String, String> entry : overrideMap.entrySet()) {
			if ("Y".equals(getFieldValue(entry.getKey()))) {
				addDashBoardElement(dashBoardListElem, entry.getValue(),
						orderHeaderkey);
			}
		}
	}

	public void addDashBoardElement(Element dashBoardListElem, String ruleId,
			String orderHeaderkey) {
		Element dashBoardElem = null;
		dashBoardElem = YRCXmlUtils.createChild(dashBoardListElem,
				"XPXDashboardOverride");
		dashBoardElem.setAttribute("OrderHeaderKey", orderHeaderkey);
		dashBoardElem.setAttribute("OrderLineKey", page.getOrderLineKey());
		dashBoardElem.setAttribute("OverrideFlag", "Y");
		dashBoardElem.setAttribute("RuleId", ruleId);
	}

	public void getItemInfo(String strItemID) {

		if (!YRCPlatformUI.isVoid(strItemID) && !searchSKUPerformed) {
			setFieldValue("txtSKU", "");
			setFieldValue("comboSKU", "");
			Element eleSelectedSKU = getTargetModel("SelectedSKU");
			eleSelectedSKU.setAttribute("SKU", strItemID);
			eleSelectedSKU.setAttribute("SKUType", "LPC");
			eleSelectedSKU.setAttribute("OrganizationCode", YRCXmlUtils
					.getAttribute(this.inputElement, "EnterpriseCode"));
			callApi("XPXGetSKUDetailsService", eleSelectedSKU
					.getOwnerDocument());

		} else {
			searchSKUPerformed = false;
		}
	}

	public void getItemInfo(String strItemID, String skuType) {

		if (!YRCPlatformUI.isVoid(strItemID)) {
			searchSKUPerformed = true;
			Element eleSelectedSKU = YRCXmlUtils.createDocument("Item")
					.getDocumentElement();
			Element eleCustDetails = (Element) page.getOrderLinesPanel()
					.getPageBehavior().getCustomerDetails();
			Element custDetailsExtnElement = YRCXmlUtils.getChildElement(
					eleCustDetails, "Extn");

			String envId = custDetailsExtnElement
					.getAttribute("ExtnEnvironmentCode");
			String Company = custDetailsExtnElement
					.getAttribute("ExtnCompanyCode");
			String customerNumber = custDetailsExtnElement
					.getAttribute("ExtnLegacyCustNumber");

			eleSelectedSKU.setAttribute("SKU", strItemID);
			eleSelectedSKU.setAttribute("SKUType", skuType);
			eleSelectedSKU.setAttribute("OrganizationCode", YRCXmlUtils
					.getAttribute(this.inputElement, "EnterpriseCode"));
			eleSelectedSKU.setAttribute("CompanyCode", Company);
			eleSelectedSKU.setAttribute("EnvironmentCode", envId);
			eleSelectedSKU.setAttribute("CustomerNumber", customerNumber);

			callApi("XPXGetSKUDetailsService", eleSelectedSKU
					.getOwnerDocument());

		} else {
			searchSKUPerformed = false;
		}
	}

	private void callApi(String apiname, Document inputXml) {
		YRCApiContext ctx = new YRCApiContext();
		ctx.setFormId(getFormId());
		ctx.setApiName(apiname);
		ctx.setInputXml(inputXml);
		if (!page.isDisposed())
			callApi(ctx, page);
	}

	public void handleApiCompletion(YRCApiContext ctx) {
		if (ctx.getInvokeAPIStatus() > 0) {
			if (page.isDisposed()) {
				YRCPlatformUI.trace("Page is Disposed");
			} else {
				String[] apinames = ctx.getApiNames();
				for (int i = 0; i < apinames.length; i++) {
					if ("XPXGetSKUDetailsService".equals(apinames[i])) {
						Document docItemInfo = ctx.getOutputXmls()[i];
						Element eleItemInfo = docItemInfo.getDocumentElement();
						// eleItemInfo.setAttribute("ErrorMessage",
						// "InvalidItem");
						if (YRCPlatformUI.isVoid(eleItemInfo
								.getAttribute("ErrorMessage"))) {
							// if(searchSKUPerformed)
							// todo: populate all the item id controls
							getControl("txtItemId").setFocus();
							setFieldValue("txtItemId", eleItemInfo
									.getAttribute("ItemID"));
							getControl("txtMfrItemId").setEnabled(false);
							getControl("txtMpcItemId").setEnabled(false);
							this.baseUOM = eleItemInfo
									.getAttribute("UnitOfMeasure");
							setFieldValue("txtMfrItemId", YRCXmlUtils
									.getXPathElement(eleItemInfo,
											"/Order/PrimaryInformation")
									.getAttribute("ManufacturerItem"));
							setFieldValue("txtMpcItemId",
									YRCXmlUtils.getXPathElement(eleItemInfo,
											"/Order/Extn").getAttribute(
											"ExtnMpc"));

							if (!YRCPlatformUI.isVoid(YRCXmlUtils
									.getXPathElement(eleItemInfo,
											"/Order/PrimaryInformation")))
								setFieldValue("txtItemDesc", YRCXmlUtils
										.getXPathElement(eleItemInfo,
												"/Order/PrimaryInformation")
										.getAttribute("ExtendedDescription"));

							setModel("Item", docItemInfo.getDocumentElement());
							if (this.page.isNewLine()) {
								String sEnterpriseCode = ((YRCEditorInput) getInputObject())
										.getAttributeValue("Order/@EnterpriseCode");
								;
								String sShipToID = "";
								Element eleOrderDetails = page
										.getOrderLinesPanel().getPageBehavior()
										.getOrderDetails();
								sShipToID = eleOrderDetails
										.getAttribute("BuyerOrganizationCode");
								String sItemID = getFieldValue("txtItemId");
								this.getUOMList(sItemID, sShipToID,
										sEnterpriseCode);
							}

						} else {
							setFieldValue("txtItemId", "");
							YRCPlatformUI.showError("Error", "Invalid SKU:"
									+ eleItemInfo.getAttribute("ErrorMessage"));
						}
					} else if (PRICE_AND_AVAILABILITY_SRVC.equals(apinames[i])) {
						Document docPnAResponse = ctx.getOutputXmls()[i];
						Element elePnAResponse = docPnAResponse
								.getDocumentElement();
						setModel("PnAResponse", elePnAResponse);
						Element eleItems = YRCXmlUtils.getChildElement(
								elePnAResponse, "Items");
						String headerStatusCode = YRCXmlUtils.getChildElement(
								elePnAResponse, "HeaderStatusCode")
								.getTextContent();
						if (!YRCPlatformUI.isVoid(headerStatusCode)
								&& null != eleItems) {
							Element eleItem = null;
							if (null != eleItems) {
								eleItem = YRCXmlUtils.getChildElement(eleItems,
										"Item");
								this.elePnaRes = eleItem;
								String extendedPrice = YRCXmlUtils
										.getChildElement(eleItem,
												"ExtendedPrice")
										.getTextContent();
								setFieldValue("txtExtnPrice", extendedPrice);
								Element elePricingUOM = YRCXmlUtils
										.getXPathElement(eleItem,
												"/Item/PricingUOM");
								String strPricingUOM = elePricingUOM
										.getTextContent();
								setFieldValue("hiddenStxtPricingUOM",
										strPricingUOM);
								Element statusElement = YRCXmlUtils
										.getXPathElement(eleItem,
												"/Item/LineStatusCode");
								String lineStatusCode = statusElement
										.getTextContent();
								// Clear Error Labels before painting with new
								// errors.
								page.getOrderLinesPanel().getPageBehavior()
										.removeErrorLabelValue();

								// Get the Environment Code from ShipToCustomer
								// Profile
								Element eleCustDetails = (Element) page
										.getOrderLinesPanel().getPageBehavior()
										.getCustomerDetails();
								Element custDetailsExtnElement = YRCXmlUtils
										.getChildElement(eleCustDetails, "Extn");
								String envCode = custDetailsExtnElement
										.getAttribute("ExtnEnvironmentCode");

								if ("00".equals(lineStatusCode)) {
									populatePnAResponseinUI(eleItem);
									setFieldValue("lblErr", "");

								} else {
									String inputString = envCode + "_"
											+ lineStatusCode;
									displayError(inputString, page);
								}
							}

						} else {
							setFieldValue("lblErr",
									"UnIdentified Error in getting Price and Availabilty Information");
						}

					} else if ("XPXUOMListService".equals(apinames[i])) {
						Document docUOMList = ctx.getOutputXmls()[i];
						Element eleUOMList = docUOMList.getDocumentElement();
						NodeList nl = eleUOMList.getElementsByTagName("UOM");
						if (!YRCPlatformUI.isVoid(nl)) {
							for (int j = 0; j < nl.getLength(); j++) {
								Element uOMElement = (Element) nl.item(j);
								String conversion = uOMElement
										.getAttribute("Conversion");
								uOMElement
										.setAttribute(
												"UnitOfMeasureDesc",
												(String) page
														.getOrderLinesPanel()
														.getPageBehavior().masterUOMList
														.get(uOMElement
																.getAttribute("UnitOfMeasure")));
								String conversionStr[] = null;
								if (conversion != null
										&& conversion.contains(".")) {
									conversionStr = conversion.split("\\.");
									uOMElement.setAttribute("Conversion",
											conversionStr[0]);
								} else {
									uOMElement.setAttribute("Conversion",
											conversion);
								}
							}
						}
						setModel("UOMList", eleUOMList);
						this.eleUOMList = eleUOMList;
						// to select UOM from the drop down
						if (!this.page.isNewLine()) {
							// setting currency attribute & it's using under
							// OrderLinePanel - LineTotal,AdjAmount,shippable
							// amounts fields to display values with currency
							// code.
							eleOrderLine.setAttribute("Currency", "USD");
							setModel("OrderLineTmp", eleOrderLine);
						}

						if (isSplitLine) {
							page.getOrderLinesPanel().createLines(
									splitLinelist, null, eleUOMList);
						}
						if (this.page.isNewLine())
							this.firePnA();

						getOrderMultipleForItem();
						// populateUOMList(eleUOMList);6
					} else if ("changeOrder".equals(apinames[i])) {
						Document doc = ctx.getOutputXml();
					}

					else if ("getXPXItemBranchListService".equals(apinames[i])) {
						Document doc = ctx.getOutputXml();
						Element eleItemBranchList = doc.getDocumentElement();
						if (eleItemBranchList != null) {
							NodeList xpxItemExtnNL = eleItemBranchList
									.getElementsByTagName("XPXItemExtn");
							if (xpxItemExtnNL.getLength() > 0) {
								Element xpxItemExtnEle = (Element) xpxItemExtnNL
										.item(0);
								if (xpxItemExtnEle != null)
									this.orderMultiple = xpxItemExtnEle
											.getAttribute("OrderMultiple");
								if (orderMultiple == null
										|| orderMultiple.trim().length() == 0) {
									orderMultiple = "1";
								}
							}
						}
					}

				}
			}
		} else if (ctx.getInvokeAPIStatus() == -1) {
			if (PRICE_AND_AVAILABILITY_SRVC.equals(ctx.getApiName())) {
				Element outXml = ctx.getOutputXml().getDocumentElement();
				System.out.println(" API failed" + ctx.getApiName());
				populatePnAResponseinUI(null);
			}

		}
		super.handleApiCompletion(ctx);
	}

	private void getOrderMultipleForItem() {
		String sShipfromDiv = "";
		String ShipfromDiv = "";
		String envCode = "";
		Element eleOrderDetails = page.getOrderLinesPanel().getPageBehavior()
				.getOrderDetails();
		sShipfromDiv = YRCXmlUtils.getAttributeValue(eleOrderDetails,
				"Order/Extn/@ExtnOrderDivision");

		if (!YRCPlatformUI.isVoid(sShipfromDiv)) {
			String[] tmpDiv = sShipfromDiv.split("_");
			ShipfromDiv = tmpDiv[0];
			envCode = YRCXmlUtils.getAttributeValue(eleOrderDetails,
					"Order/Extn/@ExtnEnvtId");

		} else {
			Element eleCustDetails = (Element) page.getOrderLinesPanel()
					.getPageBehavior().getCustomerDetails();
			Element custDetailsExtnElement = YRCXmlUtils.getChildElement(
					eleCustDetails, "Extn");
			envCode = custDetailsExtnElement
					.getAttribute("ExtnEnvironmentCode");
			String shipFromBranch = custDetailsExtnElement
					.getAttribute("ExtnShipFromBranch");
			String[] tmpDiv = shipFromBranch.split("_");
			ShipfromDiv = tmpDiv[0];
		}
		String sItemID = getFieldValue("txtItemId");

		Document docInput = YRCXmlUtils.createDocument("XPXItemExtn");
		Element inputElement = docInput.getDocumentElement();
		inputElement.setAttribute("ItemID", sItemID);
		inputElement.setAttribute("XPXDivision", ShipfromDiv);
		inputElement.setAttribute("EnvironmentID", envCode);

		YRCApiContext ctx = new YRCApiContext();
		ctx
				.setFormId("com.xpedx.sterling.rcp.pca.orderlines.wizard.XPXOrderLinesWizard");
		ctx.setApiName("getXPXItemBranchListService");
		ctx.setInputXml(docInput);
		if (!page.isDisposed())
			callApi(ctx, page);

	}

	public void firePnA() {
		if (canCallPnA()) {
			Document docInput = this.preparePnAInputDoc();
			callApi(PRICE_AND_AVAILABILITY_SRVC, docInput);
		}
	}

	private void populatePnAResponseinUI(Element eleItem) {

		Element eleWarehouseLocList = YRCXmlUtils.getChildElement(eleItem,
				"WarehouseLocationList");
		ArrayList<Element> wareHouseArrayList = YRCXmlUtils.getChildren(
				eleWarehouseLocList, "WarehouseLocation");
		if (!YRCPlatformUI.isVoid(YRCXmlUtils.getChildElement(eleItem,
				"RequestedQtyUOM"))
				&& !YRCPlatformUI.isVoid(YRCXmlUtils.getChildElement(eleItem,
						"RequestedQtyUOM").getTextContent())) {
			String requestedQtyUOMDesc = (String) page.getOrderLinesPanel()
					.getPageBehavior().masterUOMList.get(YRCXmlUtils
					.getChildElement(eleItem, "RequestedQtyUOM")
					.getTextContent());
			YRCXmlUtils.getChildElement(eleItem, "RequestedQtyUOM")
					.setTextContent(requestedQtyUOMDesc);
		}

		page.clearWareHouseDetails();
		for (int i = 0; i < wareHouseArrayList.size(); i++) {
			Element wareHouseLocation = wareHouseArrayList.get(i);
			YRCXmlUtils.importElement(wareHouseLocation, YRCXmlUtils
					.getChildElement(eleItem, "RequestedQtyUOM"));
			page.addWareHouseDetails(wareHouseLocation, i);
		}

		// setFieldValue("stxtPnABaseUOM", CAP_NONE);
		// if(!YRCPlatformUI.isVoid(YRCXmlUtils.getChildElement(eleItem,
		// "UnitPricePerPricingUOM")))
		// setFieldValue("txtOthrPrice", YRCXmlUtils.getChildElement(eleItem,
		// "UnitPricePerPricingUOM").getTextContent());
		// if(!YRCPlatformUI.isVoid(YRCXmlUtils.getChildElement(eleItem,
		// "PricingUOM")))
		// setFieldValue("stxtOthrPriceUOM",
		// YRCXmlUtils.getChildElement(eleItem, "PricingUOM").getTextContent());
		if (!YRCPlatformUI.isVoid(YRCXmlUtils.getChildElement(eleItem,
				"PricingUOM"))) {
			if (YRCPlatformUI.isVoid(YRCXmlUtils.getChildElement(eleItem,
					"PricingUOM").getTextContent())
					|| CAP_NONE.equals(YRCXmlUtils.getChildElement(eleItem,
							"PricingUOM").getTextContent())) {
				setFieldValue("stxtPricingUOM", "");
				setFieldValue("stxtOthrCostUOM", "");
			} else {
				String pricingUOMDesc = (String) page.getOrderLinesPanel()
						.getPageBehavior().masterUOMList.get(YRCXmlUtils
						.getChildElement(eleItem, "PricingUOM")
						.getTextContent());
				setFieldValue("stxtPricingUOM", pricingUOMDesc);
				setFieldValue("stxtOthrCostUOM", pricingUOMDesc);
			}
		}

		if (!YRCPlatformUI.isVoid(YRCXmlUtils.getChildElement(eleItem,
				"ItemCost")))
			setFieldValue("stxtOthrCost", YRCXmlUtils.getChildElement(eleItem,
					"ItemCost").getTextContent());
		if (!YRCPlatformUI.isVoid(YRCXmlUtils.getChildElement(eleItem,
				"UnitPricePerPricingUOM"))) {
			String strUnitPrice = YRCXmlUtils.getChildElement(eleItem,
					"UnitPricePerPricingUOM").getTextContent();
			//commenting this line as we have set  PnA values in case of UOM changes as well.
			//if (page.isNewLine())   
			{
				if (YRCPlatformUI.isVoid(strUnitPrice)) {
					setFieldValue("stxtUnitPrice", "0.00");
				} else {
					setFieldValue("stxtUnitPrice", strUnitPrice);
				}
			}
		}

		if (!YRCPlatformUI.isVoid(YRCXmlUtils.getChildElement(eleItem,
				"CostUOM"))) {
			if (YRCPlatformUI.isVoid(YRCXmlUtils.getChildElement(eleItem,
					"CostUOM").getTextContent())
					|| CAP_NONE.equals(YRCXmlUtils.getChildElement(eleItem,
							"CostUOM").getTextContent())) {
				setFieldValue("stxtOthrCostUOM", "");
			} else {
				String otrCostUOMDesc = (String) page.getOrderLinesPanel()
						.getPageBehavior().masterUOMList.get(YRCXmlUtils
						.getChildElement(eleItem, "CostUOM").getTextContent());
				setFieldValue("stxtOthrCostUOM", otrCostUOMDesc);
			}
		}
		// setFieldValue("stxtOthrCostUOM", CAP_NONE);
	}

	private Document preparePnAInputDoc() {
		String strItemID = getFieldValue("txtItemId");
		Element eleOrderDetails = (Element) page.getOrderLinesPanel()
				.getPageBehavior().getOrderDetails();
		Element eleItemDetails = getModel("Item");
		Element olElem = this.getTargetModel("OrderLineNS");
		Element eleCustDetails = (Element) page.getOrderLinesPanel()
				.getPageBehavior().getCustomerDetails();
		Element custDetailsExtnElement = YRCXmlUtils.getChildElement(
				eleCustDetails, "Extn");
		Document returnDoc = null;

		returnDoc = YRCXmlUtils
				.createFromString("<PriceAndAvailability><Items></Items></PriceAndAvailability>");
		Element eleReturn = returnDoc.getDocumentElement();
		// String customerID =
		// eleOrderDetails.getAttribute("BuyerOrganizationCode");
		String customerID = custDetailsExtnElement
				.getAttribute("ExtnLegacyCustNumber");
		Element orderDetailsExtnElement = YRCXmlUtils.getChildElement(
				eleOrderDetails, "Extn");
		String envId = orderDetailsExtnElement.getAttribute("ExtnEnvtId");
		String custEnvId = custDetailsExtnElement
				.getAttribute("ExtnOrigEnvironmentCode");
		String Company = orderDetailsExtnElement.getAttribute("ExtnCompanyId");
		// String CustomerBranch =
		// orderDetailsExtnElement.getAttribute("ExtnOrderDivision");
		String CustomerBranch = custDetailsExtnElement
				.getAttribute("ExtnCustomerDivision");
		String ShipToSuffix = orderDetailsExtnElement
				.getAttribute("ExtnShipToSuffix");// ??
		String CustomerShipToSuffix = custDetailsExtnElement
				.getAttribute("ExtnShipToSuffix");
		if (ShipToSuffix == null || ShipToSuffix.trim().length() <= 0) {
			ShipToSuffix = CustomerShipToSuffix;
		}

		// ??
		String orderingUOM = getFieldValue("hiddenTxtOrderingUOM");
		if (!YRCPlatformUI.isVoid(getFieldValue("comboOrderingUOM"))) {
			orderingUOM = getFieldValue("comboOrderingUOM");
		}

		if (YRCPlatformUI.isVoid(orderingUOM) && null != eleItemDetails) {
			orderingUOM = eleItemDetails.getAttribute("UnitOfMeasure");
		}
		String OrderBranch = !YRCPlatformUI.isVoid(custDetailsExtnElement
				.getAttribute("ExtnCustOrderBranch")) ? custDetailsExtnElement
				.getAttribute("ExtnCustOrderBranch") : custDetailsExtnElement
				.getAttribute("ExtnShipFromBranch");
		addXMLTag(returnDoc, eleReturn, "SourceIndicator", "1");// TODO 1 for
																// WebChannel//??
		addXMLTag(returnDoc, eleReturn, "EnvironmentId", envId);
		addXMLTag(returnDoc, eleReturn, "CustomerEnvironmentId", custEnvId);
		addXMLTag(returnDoc, eleReturn, "Company", Company);
		addXMLTag(returnDoc, eleReturn, "CustomerBranch", CustomerBranch);
		addXMLTag(returnDoc, eleReturn, "CustomerNumber", customerID);
		addXMLTag(returnDoc, eleReturn, "ShipToSuffix", ShipToSuffix);
		addXMLTag(returnDoc, eleReturn, "OrderBranch", OrderBranch);
		NodeList inputNodeList = returnDoc.getElementsByTagName("Items");
		Element inputNodeListElemt = (Element) inputNodeList.item(0);
		Element eleItem = YRCXmlUtils.createChild(inputNodeListElemt, "Item");
		addXMLTag(returnDoc, eleItem, "LineNumber", "1");
		addXMLTag(returnDoc, eleItem, "LegacyProductCode", strItemID);
		if (YRCPlatformUI.isVoid(orderingUOM)) {
			addXMLTag(
					returnDoc,
					eleItem,
					"RequestedQtyUOM",
					YRCXmlUtils
							.getAttributeValue(olElem,
									"/OrderLine/OrderLineTranQuantity/@TransactionalUOM"));
		} else {
			addXMLTag(returnDoc, eleItem, "RequestedQtyUOM", orderingUOM);
		}
		addXMLTag(returnDoc, eleItem, "RequestedQty", YRCXmlUtils
				.getAttributeValue(olElem,
						"/OrderLine/OrderLineTranQuantity/@OrderedQty"));
		return returnDoc;
	}

	private static void addXMLTag(Document returnDoc, Element element,
			String tagName, String tagValue) {
		Element textNode = YRCXmlUtils.createChild(element, tagName);
		Text txt = returnDoc.createTextNode(tagName);
		txt.setTextContent(tagValue);
		textNode.appendChild(txt);
	}

	private boolean isValueNoneOrVoid(Element targetModel, String binding) {

		return YRCPlatformUI.isVoid(YRCXmlUtils.getAttributeValue(targetModel,
				binding))
				|| CAP_NONE.equals(YRCXmlUtils.getAttributeValue(targetModel,
						binding));
	}

	public boolean validateLineToBeAdded() {
		if (YRCPlatformUI.isVoid(getFieldValue("txtItemId"))
				&& YRCPlatformUI.isVoid(getFieldValue("comboItemId"))) {
			return false;
		}
		return true;
	}

	public void setItemDescForCharges() {
		setFieldValue("txtItemDesc", (String) YRCXPathUtils.evaluate(
				getModel("ChargesList"),
				"/CommonCodeList/CommonCode[@CodeValue='"
						+ getFieldValue("comboItemId")
						+ "']/@CodeLongDescription", XPathConstants.STRING));
		setFieldValue("txtQuantity", "1.00");
		getControl("txtQuantity").setEnabled(false);

	}

	public void getItemDetailsForSKU() {

		Element eleSelectedSKU = getTargetModel("SelectedSKU");
		String strSKU = eleSelectedSKU.getAttribute("SKU");
		String strSKUType = eleSelectedSKU.getAttribute("SKU");
		if (!YRCPlatformUI.isVoid(strSKU) && !YRCPlatformUI.isVoid(strSKUType)) {
			eleSelectedSKU.setAttribute("OrganizationCode", YRCXmlUtils
					.getAttribute(this.inputElement, "EnterpriseCode"));
			searchSKUPerformed = true;
			callApi("XPXGetSKUDetailsService", eleSelectedSKU
					.getOwnerDocument());
		}
	}

	private boolean quantityEntered() {
		String tempQty = getFieldValue("txtQuantity");
		if (YRCPlatformUI.isVoid(tempQty)) {
			return false;
		}
		if ("0.00".compareTo(tempQty) < 0) {
			return true;
		} else {
			return false;
		}
	}

	private boolean canCallPnA() {
		if (YRCPlatformUI.isVoid(getFieldValue("txtItemId"))) {
			getControl("txtItemId").setFocus();
			return false;
		}
		if (!quantityEntered()) {
			getControl("txtQuantity").setFocus();
			return false;
		}
		Control comboOrderingUOM = getControl("comboOrderingUOM");
		if (comboOrderingUOM != null
				&& YRCPlatformUI.isVoid(getFieldValue("comboOrderingUOM"))) {
			comboOrderingUOM.setFocus();
			return false;
		}
		String stmpLineType = getFieldValue("comboLineType");
		if (YRCPlatformUI.isVoid(stmpLineType)) {
			getControl("comboLineType").setFocus();
			return false;
		}
		if (YRCPlatformUI.equals(XPXConstants.CHARGE_TYPE, stmpLineType)
				|| YRCPlatformUI.equals(
						XPXConstants.COMMENTS_SPECIAL_LINE_TYPE, stmpLineType)
				|| YRCPlatformUI.equals(XPXConstants.MILL_ITEM_TYPE,
						stmpLineType)
				|| YRCPlatformUI.equals(XPXConstants.CUSTOMER_PART_NUMBER_TYPE,
						stmpLineType)) {
			return false;
		}
		return true;
	}

	public ArrayList getSplitLinelist() {
		return splitLinelist;
	}

	public void setSplitLinelist(ArrayList splitLinelist) {
		this.splitLinelist = splitLinelist;
	}

	public Element getLocalModel(String modelName) {
		return getModel(modelName);
	}

	protected void removeorderLine(String orderLineKey, String orderHeaderKey) {
		Element orderEle = YRCXmlUtils.createFromString(
				"<Order OrderHeaderKey='" + orderHeaderKey + "'/>")
				.getDocumentElement();
		Element APIele = YRCXmlUtils.createChild(orderEle, "OrderLines");
		Element subChild = YRCXmlUtils.createChild(APIele, "OrderLine");
		subChild.setAttribute("Action", action);
		subChild.setAttribute("OrderLineKey", orderLineKey);

		YRCApiContext ctx = new YRCApiContext();
		ctx.setFormId(page.getFormId());
		ctx.setApiName("changeOrder");
		ctx.setInputXml(orderEle.getOwnerDocument());
		callApi(ctx);
	}

	public boolean isValidMulpleItem(String itemQuantity) {

		Element eleOrderLineNS = getTargetModel("OrderLineNS");
		// comboOrderingUOM control Used while editing the UOM, i.e., in case of
		// add new line.
		Control ctrlOrderingUOM = getControl("comboOrderingUOM");
		// Ignoring order Multiple validation in case of UOM not selected.
		if (!YRCPlatformUI.isVoid(orderMultiple)
				&& (null == ctrlOrderingUOM || !YRCPlatformUI
						.isVoid(getFieldValue("comboOrderingUOM")))) {
			double ordQty = 0;
			String qty = YRCXmlUtils.getAttributeValue(eleOrderLineNS,
					"/OrderLine/OrderLineTranQuantity/@OrderedQty");
			if (YRCPlatformUI.isVoid(qty)) {
				qty = "0";
			}
			String transactionalUOM = YRCXmlUtils.getAttributeValue(
					eleOrderLineNS,
					"/OrderLine/OrderLineTranQuantity/@TransactionalUOM");
			if (YRCPlatformUI.isVoid(transactionalUOM)) {
				transactionalUOM = "";
			}
			String sQty = qty.replace(",", "");
			ordQty = Double.parseDouble(sQty);
			double orderMultipleCount = 0.00;
			String baseUOMValue = "";
			double transUOMConvFactor = 1.00;
			if (!YRCPlatformUI.isVoid(orderMultiple)) {
				Element eleLineTmp = getModel("OrderLineTmp");
				Element eleLineItemElement = YRCXmlUtils.getXPathElement(
						eleLineTmp, "/OrderLine/Item");
				if (page.isNewLine()
						&& YRCPlatformUI.isVoid(eleLineItemElement)) {
					baseUOMValue = this.baseUOM;
				} else {
					baseUOMValue = eleLineItemElement
							.getAttribute("UnitOfMeasure");
				}

				if (!(baseUOMValue.equals(transactionalUOM))) {
					String baseUOMConversion = "1";
					String transactionUOMConversion = "";
					NodeList nl = eleUOMList.getElementsByTagName("UOM");
					if (!YRCPlatformUI.isVoid(nl)) {
						for (int j = 0; j < nl.getLength(); j++) {
							Element uOMElement = (Element) nl.item(j);
							String UnitOfMeasure = uOMElement
									.getAttribute("UnitOfMeasure");
							if (transactionalUOM.equals(UnitOfMeasure)) {
								transactionUOMConversion = uOMElement
										.getAttribute("Conversion");
							}

						}
					}
					double baseUOMConvFactor = Double
							.parseDouble(baseUOMConversion);
					transUOMConvFactor = Double
							.parseDouble(transactionUOMConversion);
					double baseOrderMultiple = Double
							.parseDouble(orderMultiple);

					orderMultipleCount = baseOrderMultiple
							* (baseUOMConvFactor / transUOMConvFactor);

				} else {

					orderMultipleCount = Double.parseDouble(orderMultiple);
				}

			}
			if ((transUOMConvFactor * ordQty)
					% Double.parseDouble(orderMultiple) != 0) {
				// if(((int)(ordQty%orderMultipleCount))!=0){
				setFieldValue("lblErrOrderQty",
						" Order Quantity Must be ordered in multiples of "
								+ orderMultipleCount);
				getControl("txtQuantity").setToolTipText(
						"Order Quantity Must be ordered in multiples of "
								+ orderMultipleCount);
				getControl("txtQuantity").setFocus();
				Color color = new Color(null, 255, 0, 0);
				getControl("txtQuantity").setForeground(color);
				return false;
			} else {
				setFieldValue("lblErrOrderQty", "");
				getControl("txtQuantity").setToolTipText("");
				Color color = new Color(null, 0, 0, 0);
				getControl("txtQuantity").setForeground(color);
			}
		}
		return true;

	}

	public boolean validateOrderLineBeforeUpdate(Element lineElement) {

		double ordQty = 0;
		String qty = getFieldValue("txtQuantity");
		if(!YRCPlatformUI.isVoid(qty)){
			String sQty = qty.replace(",", "");
			ordQty=Double.valueOf(sQty);
		}

		if (this.page.isNewLine()) {

			if (YRCPlatformUI.isVoid(qty) || "0.00".equals(qty)) {
				YRCPlatformUI.showError("MESSAGE_QTY_IS_MANDATORY",
						YRCPlatformUI.getString("MESSAGE_QTY_IS_MANDATORY"));
				getControl("txtQuantity").setFocus();
				return false;
			}
			String tmplineType = getFieldValue("comboLineType");
			if (YRCPlatformUI.isVoid(tmplineType)) {
				YRCPlatformUI.showError("MESSAGE_LINETYPE_IS_MANDATORY",
						YRCPlatformUI
								.getString("MESSAGE_LINETYPE_IS_MANDATORY"));
				getControl("comboLineType").setFocus();
				return false;
			}
		}
//changes as part of fixing bug#2373 - changed ordQty to qty as it will have actual qty ordered & added isLegacyOrderNumberExisted().
		if (!YRCPlatformUI.isVoid(qty) && !YRCPlatformUI.isVoid(orderMultiple)
				&& (ordQty!=0.0))  {
			String transactionalUOM = "";
			
			if (!page.isNewLine() && isLegacyOrderNumberExisted()) {
				transactionalUOM = getFieldValue("hiddenTxtOrderingUOM");
			}
			else
				transactionalUOM = getFieldValue("comboOrderingUOM");
			System.out.println("transactionalUOM="+transactionalUOM);

			String sQty = qty.replace(",", "");
			ordQty = Double.parseDouble(sQty);
			double orderMultipleCount = 0.00;
			String baseUOMValue = "";
			double transUOMConvFactor = 1.00;
			if (!YRCPlatformUI.isVoid(orderMultiple)) {
				Element eleLineTmp = getModel("OrderLineTmp");
				Element eleLineItemElement = YRCXmlUtils.getXPathElement(
						eleLineTmp, "/OrderLine/Item");
				if (page.isNewLine()
						&& YRCPlatformUI.isVoid(eleLineItemElement)){
					baseUOMValue = this.baseUOM;
				} else {
					baseUOMValue = eleLineItemElement
							.getAttribute("UnitOfMeasure");
				}

				if (!(baseUOMValue.equals(transactionalUOM))) {
					String baseUOMConversion = "1";
					String transactionUOMConversion = "";
					NodeList nl = eleUOMList.getElementsByTagName("UOM");
					if (!YRCPlatformUI.isVoid(nl)) {
						for (int j = 0; j < nl.getLength(); j++) {
							Element uOMElement = (Element) nl.item(j);
							String UnitOfMeasure = uOMElement
									.getAttribute("UnitOfMeasure");
							 if (transactionalUOM.equals(UnitOfMeasure)) {
								transactionUOMConversion = uOMElement
										.getAttribute("Conversion");
							}

						}
					}
					double baseUOMConvFactor = Double
							.parseDouble(baseUOMConversion);
					transUOMConvFactor = Double
							.parseDouble(transactionUOMConversion);
					double baseOrderMultiple = Double
							.parseDouble(orderMultiple);

					orderMultipleCount = baseOrderMultiple
							* (baseUOMConvFactor / transUOMConvFactor);

				} else {

					orderMultipleCount = Double.parseDouble(orderMultiple);
				}

			}
			if ((transUOMConvFactor * ordQty)
					% Double.parseDouble(orderMultiple) != 0
					|| ordQty == 0.0) {
				YRCPlatformUI.showError("Error", YRCPlatformUI
						.getString("Order_Multiple_Quantity_Error"));
				getControl("txtQuantity").setFocus();
				return false;
			}
		}
		return true;
	}

	public boolean isCancelledLine() {
		String minLineStatus = eleOrderLine.getAttribute("MinLineStatus");
		if ("9000".equals(minLineStatus)) {
			return true;
		} else
			return false;

	}
public boolean isLegacyOrderNumberExisted() {
		
		System.out.println("legOrderNo="+page.legacyOrderNumber);
		if(!YRCPlatformUI.isVoid(page.legacyOrderNumber))
			return true;
		
			return false;

	}

}