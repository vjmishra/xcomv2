/*
 * Created on Apr 14,2010
 *
 */
package com.xpedx.sterling.rcp.pca.customerprofilerule.screen;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import com.xpedx.sterling.rcp.pca.customerprofilerule.editor.XPXCustomerProfileRuleEditor;
import com.xpedx.sterling.rcp.pca.util.XPXUtils;
import com.yantra.yfc.rcp.YRCApiContext;
import com.yantra.yfc.rcp.YRCBehavior;
import com.yantra.yfc.rcp.YRCDesktopUI;
import com.yantra.yfc.rcp.YRCEditorInput;
import com.yantra.yfc.rcp.YRCPlatformUI;
import com.yantra.yfc.rcp.YRCXmlUtils;

/**
 * @author vchandra
 * 
 * Generated by MTCE Copyright © 2005, 2006 Sterling Commerce, Inc. All Rights
 * Reserved.
 */

public class CustomerProfileRulePanelBehavior extends YRCBehavior {

	private CustomerProfileRulePanel page;
	private Element ruleElementBeforeAddition;
	private Element targetRulesModel;
	private Element inputElement;
	private String customerKey;	
	private String extSuffixType;
	private String extnLinePOLbl;
	private String extnLineAccLbl;	
	private List HideRulesList=null;
	private List ShowRulesList=null;
	private Composite pnlDynamicLineParent;

	/**
	 * Constructor for the behavior class.
	 */
	public CustomerProfileRulePanelBehavior(CustomerProfileRulePanel ownerComposite,Object inputObject) {
		super(ownerComposite);
		this.page = ownerComposite;
		this.inputElement = ((YRCEditorInput) inputObject).getXml();
		this.extSuffixType=page.extSuffixType;
		init();
		ruleElementBeforeAddition = null;		
		customerKey = YRCXmlUtils.getAttribute(this.inputElement, "CustomerKey");		
		initPage();
	}
	/**
	 * This method initializes the behavior class.
	 */
	@Override
	public void init() {
//		System.out.println("init().....");
	}

	public void initPage() {
		callApi("XPXGetRuleListWithParam", YRCXmlUtils.createFromString("<XPXCustomerRulesProfile  CustomerKey='" + YRCXmlUtils.getAttribute(this.inputElement, "CustomerKey") + "' />"));
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.yantra.yfc.rcp.YRCBaseBehavior#handleApiCompletion(com.yantra.yfc.rcp.YRCApiContext)
	 */
	@Override
	public void handleApiCompletion(YRCApiContext ctx) {
		if (ctx.getInvokeAPIStatus() > 0)
			if (page.isDisposed()) {
				YRCPlatformUI.trace("Page is Disposed");
			} else {
				if (ctx.getApiName().equals("XPXGetRuleListWithParam")) {
					Element outXml = ctx.getOutputXml().getDocumentElement();
					ruleElementBeforeAddition = outXml;
//					originalSalesOrderElement = YRCXmlUtils.getCopy(outXml);
//					setModel("OriginalOrder", orderElementBeforeAddition, false);
//					setModel("XPXGetRuleListWithParam", YRCXmlUtils.getCopy(orderElementBeforeAddition), false);
					this.handleCustomerProfileRule(outXml);
					//page.showRootPanel(true);
				}
				if (ctx.getApiName().equals("manageCustomer")) {
					Element outXml = ctx.getOutputXml().getDocumentElement();
					//setModel("XPXChangeOrderDetailsService_X", outXml, false);
					YRCPlatformUI.setMessage("UPDATE_STATUS_MESSAGE");
					page.clearLines();
					this.initPage();
					((XPXCustomerProfileRuleEditor)YRCDesktopUI.getCurrentPart()).showBusy(false);
				}
			}
		super.handleApiCompletion(ctx);
	}
	//XPXCustomerRulesProfileList, XPXCustomerRulesProfile
	private void handleCustomerProfileRule(Element rulesDetailsElem) {
		boolean isAnyRuleLineExists = false;
		ArrayList listCustomerProfileRules = YRCXmlUtils.getChildren(rulesDetailsElem, "XPXRuleDefn");
		ArrayList generalRules = new ArrayList();
		ArrayList orderRules = new ArrayList();
		ArrayList orderLinesRules = new ArrayList();
		if (listCustomerProfileRules.size() > 0) {
			ShowRulesList = getShowRulesList();
			for (int i = 0; i < listCustomerProfileRules.size(); i++){
				 Element tmpEle = (Element) listCustomerProfileRules.get(i);
				 String ruleGroup= tmpEle.getAttribute("RuleGroup");
				 String RuleID= tmpEle.getAttribute("RuleID");
				 if("B".equals(extSuffixType)){
					 HideRulesList=getRulesList(); 
					 
					 if(!(HideRulesList.contains(RuleID))){
						 if("GR".equalsIgnoreCase(ruleGroup)){
							 
							 if (ShowRulesList.contains(RuleID)) {
								 generalRules.add(tmpEle);
							}
						 }else if("OR".equalsIgnoreCase(ruleGroup)){
							 if (ShowRulesList.contains(RuleID)) {
								 orderRules.add(tmpEle);
							 }
						 }else if("LR".equalsIgnoreCase(ruleGroup)){
							 orderLinesRules.add(tmpEle);
						 }
					 }
				 }
				 else  {
				 if("GR".equalsIgnoreCase(ruleGroup) &&  !("C".equals(extSuffixType))){
					 generalRules.add(tmpEle);
				 }else if("OR".equalsIgnoreCase(ruleGroup)){
					 if("C".equals(extSuffixType)){
						 ShowRulesList = getShowRulesList();
						 if (ShowRulesList.contains(RuleID)) {
							 orderRules.add(tmpEle);
						 }
					 }else{
						 orderRules.add(tmpEle);
					 }
				 }else if("LR".equalsIgnoreCase(ruleGroup)){
					 if ("C".equals(extSuffixType)) {
							ShowRulesList = getShowRulesList();
							if (ShowRulesList.contains(RuleID)) {
								orderLinesRules.add(tmpEle);
							}	
					 }else{
						 orderLinesRules.add(tmpEle);
					 
				 }
			}
		}
			}}
		if (generalRules.size()>0) {
			page.createLines(generalRules, "General Rule");
		}
		if (orderRules.size()>0) {
			page.createLines(orderRules,"Order Rule");
		}
		if (orderLinesRules.size()>0) {
			page.createLines(orderLinesRules,"Order Lines Rule");
		}		
		setDirty(false);
	}

	@SuppressWarnings("unchecked")
	private List getRulesList() {
		List<String> lst=new ArrayList<String>();
		String [] rules={"HeaderCommentByCustomer","DuplicatePO","NonStandardShipMethod","CustomerSelectedShipComplete",
				"ValidShiptoZipCode","ShipDateNotNextBusinessDay","AcceptPriceOverRide","PreventAutoPlace","RequireCustomerLineField1","RequireCustomerLineField2","RequireCustomerLineField3","AllDeliveryDatesDoNotMatch"
				,"ItemNotAvailableForNextDayShipment","RequiredCustomerLineSequenceNo","GrossTradingMargin"};
		//"RequireCustomerPO" is removed from he list as per sunith's comments.		
		lst=Arrays.asList(rules);
		return lst;
	}
	@SuppressWarnings("unchecked")
	private List getShowRulesList() {
		List<String> list=new ArrayList<String>();
		String [] rules={"RequiredCustomerLineAccountNo","RequiredCustomerLinePO","PlaceOrderOnWBHold","RequireCustomerPO"};	
		list=Arrays.asList(rules);
		return list;
	}
	
	private void callApi(String apinames, Document inputXml) {
		YRCApiContext ctx = new YRCApiContext();
		ctx.setFormId("com.xpedx.sterling.rcp.pca.customerprofilerule.screen.CustomerProfileRulePanel");
		ctx.setApiName(apinames);
		ctx.setInputXml(inputXml);
		if (!page.isDisposed())
			callApi(ctx, page);
	}
	
	public void updateRules() {
		targetRulesModel = null;
		page.getTargetModelAndCallUpdateApi(true);		
	}
	//XB-519 Modified Input XML
	public void createRuleXML() {
		targetRulesModel =null;
		if (null == targetRulesModel){
			targetRulesModel = YRCXmlUtils.createDocument("Customer").getDocumentElement();
			targetRulesModel.setAttribute("CustomerKey", customerKey);
			Element extn = YRCXmlUtils.createChild(targetRulesModel, "Extn");
			Element ruleLinesElem = YRCXmlUtils.createChild(extn, "XPXCustomerRulesProfileList");
			ruleLinesElem.setAttribute("Reset", "true");
		}
	}
	
	
	public void appendRuleLine(Element ruleLineElem) {
		Element ruleLinesElem = null;
		Element extn = YRCXmlUtils.getChildElement(targetRulesModel, "Extn");
		ruleLinesElem = YRCXmlUtils.getChildElement(extn,
				"XPXCustomerRulesProfileList");
		YRCXmlUtils.importElement(ruleLinesElem, ruleLineElem);
//		System.out.println("******Add*****"
//				+ YRCXmlUtils.getString(ruleLinesElem));
	}

	public void callUpdateApi() {
//		System.out.println("******last*****"+YRCXmlUtils.getString(targetRulesModel));
		if (targetRulesModel.hasAttribute("CustomerKey")) {			
			YRCApiContext ctx = new YRCApiContext();
			ctx.setApiName("manageCustomer");
			ctx.setInputXml(targetRulesModel.getOwnerDocument());
			ctx.setFormId("com.xpedx.sterling.rcp.pca.customerprofilerule.screen.CustomerProfileRulePanel");
			ctx.setShowError(false);
			ctx.setUserData("isRefreshReqd", String.valueOf(false));
			callApi(ctx, page);
			((XPXCustomerProfileRuleEditor)YRCDesktopUI.getCurrentPart()).showBusy(true);
		}
	}
	public void setUpdatedValues(Element ruleLineElem,String lineAcc,String linePO) {
		// TODO Auto-generated method stub
		Element ruleLinesElem = null;
		Element extn = YRCXmlUtils.getChildElement(targetRulesModel, "Extn");
		ruleLinesElem = YRCXmlUtils.getChildElement(extn,
		"XPXCustomerRulesProfileList");
		extn.setAttribute("ExtnCustLinePOLbl", linePO);
		extn.setAttribute("ExtnCustLineAccLbl", lineAcc);	
		ruleLinesElem.setAttribute("Reset", "true");
	}	
}
