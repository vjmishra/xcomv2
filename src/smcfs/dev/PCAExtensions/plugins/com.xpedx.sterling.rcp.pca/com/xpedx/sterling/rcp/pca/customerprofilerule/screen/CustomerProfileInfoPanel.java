/*
 * Created on Apr 14,2010
 *
 */
package com.xpedx.sterling.rcp.pca.customerprofilerule.screen;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.custom.StyledText;
import org.eclipse.swt.events.FocusAdapter;
import org.eclipse.swt.events.FocusEvent;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Link;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.Widget;
import org.w3c.dom.Element;

import com.xpedx.sterling.rcp.pca.util.XPXConstants;
import com.xpedx.sterling.rcp.pca.util.XPXUtils;
import com.yantra.yfc.rcp.IYRCComposite;
import com.yantra.yfc.rcp.IYRCPanelHolder;
import com.yantra.yfc.rcp.YRCButtonBindingData;
import com.yantra.yfc.rcp.YRCComboBindingData;
import com.yantra.yfc.rcp.YRCConstants;
import com.yantra.yfc.rcp.YRCDesktopUI;
import com.yantra.yfc.rcp.YRCEditorPart;
import com.yantra.yfc.rcp.YRCLabelBindingData;
import com.yantra.yfc.rcp.YRCLinkBindingData;
import com.yantra.yfc.rcp.YRCPlatformUI;
import com.yantra.yfc.rcp.YRCScrolledCompositeListener;
import com.yantra.yfc.rcp.YRCStyledTextBindingData;
import com.yantra.yfc.rcp.YRCTextBindingData;
import com.yantra.yfc.rcp.YRCWizardBehavior;
import com.yantra.yfc.rcp.YRCXmlUtils;

/**
 * @author sdodda
 * 
 * Generated by MTCE Copyright © 2005, 2006 Sterling Commerce, Inc. All Rights
 * Reserved.
 */

public class CustomerProfileInfoPanel extends Composite implements
IYRCComposite {

	private Composite pnlRoot = null;

	private CustomerProfileInfoPanelBehavior myBehavior;

	private YRCWizardBehavior wizBehavior;

	public static final String FORM_ID = "com.xpedx.sterling.rcp.pca.customerprofilerule.screen.CustomerProfileInfoPanel"; // @jve:decl-index=0:

	private Composite pnlLines;

	private ScrolledComposite scrolledPnlforLines;

	private Composite compositeMiscPnl;

	private Composite pnlDynamicLineParent;

	// private Composite MiscPnl;
	private YRCScrolledCompositeListener listener;

	private Composite pnlRadioButtons;

	private Button btnUpdate;

	private Label lblWebConfirmationNo;

	private Label lblCanRequestSample;

	private Label lblCustomerEmailAddress;

	private Label lblSampleRoomEmailAddress;

	private Label lblBuyerId;

	private Label lblWmLocationId;

	private Label lblWmOrgId;

	private Label lblInvoiceEdi;

	private Label lblInvoiceDistMethod;

	private Label lblInvoiceEmailId;

	private Label lblCsr1EmailConfirmationFlag;

	private Label lblCsr2EmailConfirmationFlag;

	private Label lblSalesRepEmailConfirmationFlag;

	private Label lblSalesRep1;

	private Label lblSalesRep2;

	private Label lblSalesRep3;

	private Label lblSalesRep4;

	private Label lblUomType;

	private Label lblETradingId;

	private Label lblECSR;

	private Label lblECSR2;

	private Label lblMaxOrderAmount;

	private Label lblMinOrderAmount;

	private Label lblChargeAmount;

	private Label lblViewPriceFlag;

	private Label lblCanOrder;

	private Label lblViewInventory;

	private Label lblEmailInvoices;

	private Label lblPoAckFlag;

	private Label lblUseSku;

	private Label lblUseOrderMultiple;

	private Label lblPreviewInvoices;

	// private Label lblCanAcceptBackOrder;

	private Label lblCustomerLineAccountNumber;

	private Label lblCustomerLinePONumber;

	private Label lblCustomerLineSeqNumber;

	private Label lblCustomerLineField2Flag;

	private Label lblCustomerLineField1;

	private Label lblCustomerLineField3;

	private Label lblCustomerLineField2;

	private Label lblCustomerLineField3Flag;

	private Label lblAttentionName;

	private Label lblCustomerDivision;

	private Label lblLegacyCustomerNumber;

	private Label lblSuffixType;

	private Label lblSuffix;

	private Label lblCustomerOrderBranch;

	private Label lblShipFromBranch;

	private Label lblCurrencyCode;

	private Label lblServiceOptmizationCode;

	private Label lblCustomerStatus;

	private Label lblCustomerName;

	private Label lblBrandCode;

	private Label lblCustomerClass;

	private Label lblSAPName;

	private Label lblSAPNumber;

	private Label lblMasterSAPNumber;

	private Label lblMasterSAPName;

	private Label lblShipComplete;

	private Label lblOrderUpdateFlag;

	private Label lblPrimarySalesRep;

	private Label lblSalesRep;

	private Label lblNAICSName;

	private Label lblNAICSCode;

	private Label lblShipToOverrideFlag;

	// private Label lbl810InvoiceFlag;

	private Label lblCustomerLineAcctNumberFlag;

	private Label lblPhone1;

	private Label lblPhone2;

	private Label lblFax1;

	private Label lblFax2;

	private Text txtCustomerEmailAddress;

	// private Text txtSampleRoomEmailAddress;

	private Text txtBuyerId;

	private Text txtWmLocationId;

	private Text txtWmOrgId;

	private Text txtInvoiceEdi;

	private Text txtInvoiceDistMethod;

	private Text txtInvoiceEmailId;

	private Text txtSalesRep1;

	private Text txtSalesRep2;

	private Text txtSalesRep3;

	private Text txtSalesRep4;

	private Text txtUomType;

	private Text txtETradingId;

	Combo comboECSR;

	Combo comboECSR2;

	Text txtMaxOrderAmount;

	Text txtMinOrderAmount;

	private Text txtChargeAmount;

	private Text txtWebConfirmationNo;

	//private Text txtCustLineAcct;

	// private Text txtCustomerLinePONumber;
	// private Text txtCustomerLineSeqNumber;
	private Text txtAttentionName;

	private Text txtCustomerDivision;

	private Text txtLegacyCustomerNumber;

	private Text txtType;

	private Text txtSuffix;

	private Text txtCustomerOrderBranch;

	private Text txtShipFromBranch;

	private Text txtCustomerStatus;

	private Text txtCustomerName;

	private Text txtBrandCode;

	private Text txtCustomerClass;

	private Text txtServiceOptmizationCode;

	private Text txtCurrencyCode;

	private Text txtSAPNumber;

	private Text txtSAPName;

	private Text txtMasterSAPNumber;

	private Text txtMasterSAPName;

	private Text txtShipComplete;

	private Text txtPrimarySalesRep;

	private Text txtNAICSCode;

	private Text txtNAICSName;

	private Text txtPhone1;

	private Text txtPhone2;

	private Text txtFax1;

	private Text txtFax2;

	private Button chkOrderUpdateFlag;

	private Button chkShipToOverrideFlag;

	// private Button chk810InvoiceFlag;

	private Button radCustomer;

	private Button radManufacturer;

	private Button radMPC;

	private Button chkViewInventory;

	private Button chkUseOrderMultiple;

	private Button chkViewInvoices;

	private Button chkInvoiceEdi;

	// private Button chkCanAcceptBackOrder;

	private Button chkEmailInvoices;

	private Button chkPoAckFlag;

	private Button chkCsr1EmailConfirmationFlag;

	private Button chkCsr2EmailConfirmationFlag;

	private Button chkSalesRepEmailConfirmationFlag;

	private Button chkCanRequestSample;

	private Button chkViewPriceFlag;

	private Button chkCanOrder;

	private Button chkCustomerLineField1Flag;

	private Button chkCustomerLinePONumber;

	private Button chkCustomerLineSeqNumber;

	private Combo comboSalesRep;

	private ScrolledComposite scrllCmpst = null;

	private Composite pnlHolder = null;

	private ScrolledComposite scrolledPnlforInfo = null;

	private Composite pnlPrimaryInformation = null;

	private Composite pnlProfileInfo = null;

	private Composite compositeHdrPnl = null;

	String strCustomerEmail;

	private Composite pnlSearchCriteriaTitle;

	private Label lblSearchCriteriaTitle;

	private Composite pnlCustomerProfileInfo;

	private Label lblFiller;

	private Composite pnlGeneralInfo;

	private Button chkConfirmation;

	private Label lblConfirmation;

	private Text txtConfirmation;

	private Button chkCancelled;

	private Label lblCancelled;

	private Text txtCancelled;

	private Button chkBackorder;

	private Label lblBackorder;

	private Text txtBackorder;

	private Button chkInvoiced;

	private Label lblInvoiced;

	private Text txtInvoiced;

	private Button chkCustLineAcct;

	private Label lblCustLineAcct;

	private Button chkCustLineField1;

	private Label lblCustLineField1;

	private Text txtCustLineField1;

	private Button chkCustLineField2;

	private Label lblCustLineField2;

	private Text txtCustLineField2;

	private Button chkCustLineField3;

	private Label lblCustLineField3;

	private Text txtCustLineField3;

	private Button chkViewPrices;

	private Label lblViewPrices;

	private Label lblViewInvoices;

	private Label lblSmallOrderFee;

	private Text txtSmallOrderFee;

	private Label lblAddressLine1;

	private Text txtAddressLine1;

	private Label lblAddressLine2;

	private Text txtAddressLine2;

	private Label lblAddressLine3;

	private Text txtAddressLine3;

	private Label lblCity;

	private Text txtCity;

	private Label lblState;

	private Text txtState;

	private Label lblPostalCode;

	private Text txtPostalCode;

	private Label lblCountryCode;

	private Text txtCountryCode;

	private Label lblMasterCustomer;

	private Text txtMasterCustomer;

	private Label lblCustomer;

	private Text txtCustomer;

	private Label lblBillTo;

	private Text txtBillTo;

	private Label lblShipTo;

	private Text txtShipTo;

	private Label lblType;

	private Link linkMasterCustomer;

	private Link linkCustomer;

	private Link linkBillTo;

	private Link linkShipTo;

	private Label lblLocationId;

	private Text txtLocationId;

	private Label lblSecondItemDisplay;

	private Combo comboSecondItemDisplay;

	StyledText stxtMinOrderCurrency;
	StyledText stxtSmallOrderCurrency;
	StyledText stxtMaxOrderCurrency;

	private CustomerProfileMaintenance parentObj;

	private String CustomerAdditionalAddressKey="";

	private HashMap<String, Label> fillerLabelMap = new HashMap<String, Label>();
	private List<Control> HideControlsList=null;
	Element eleCustomer =null; 
	String  suffixType =null; 


	private Text txtZip;

	private FocusAdapter focusListener;

	private Text txtCustLineAcctMsg;
	private Text txtCustomerLinePONumberMsg;
	private Label lblCustomerFieldMsg1;
	private Label lblCustomerFieldMsg2;
	private Label lblCustomerFieldMsg3;
	private Label lblCustomerFieldMsg4;
	private Label lblCustomerFieldMsg5;

	public CustomerProfileInfoPanel(Composite parent, int style,
			Object inputObject, CustomerProfileMaintenance parentObj) {
		super(parent, style);
		this.parentObj=parentObj;
		focusListener = new FocusAdapter(){
			public void focusGained(FocusEvent e) {
				Widget ctrl = e.widget;
				String ctrlName = (String) ctrl.getData("name");
				if (ctrlName != null) {
					if (YRCPlatformUI.equals(ctrlName, "txtSmallOrderFee")) {
						txtSmallOrderFee.setText(txtSmallOrderFee.getText().replaceAll(",", ""));
						txtSmallOrderFee.setTextLimit(16);
					}
					if (YRCPlatformUI.equals(ctrlName, "txtMaxOrderAmount")) {
						txtMaxOrderAmount.setText(txtMaxOrderAmount.getText().replaceAll(",", ""));
						txtMaxOrderAmount.setTextLimit(16);
					}
					if (YRCPlatformUI.equals(ctrlName, "txtMinOrderAmount")) {
						txtMinOrderAmount.setText(txtMinOrderAmount.getText().replaceAll(",", ""));
						txtMinOrderAmount.setTextLimit(16);
					}

				}
			}

			public void focusLost(FocusEvent e) {
				Widget ctrl = e.widget;
				String ctrlName = (String) ctrl.getData("name");
				if (ctrlName != null) {
					if (YRCPlatformUI.equals(ctrlName, "txtSmallOrderFee")) {
						txtSmallOrderFee.setTextLimit(20);
					}
					if (YRCPlatformUI.equals(ctrlName, "txtMaxOrderAmount")) {
						txtMaxOrderAmount.setTextLimit(20);
					}
					if (YRCPlatformUI.equals(ctrlName, "txtMinOrderAmount")) {
						txtMinOrderAmount.setTextLimit(20);
					}
				}
			}
		};

		initialize();
		setBindingForComponents();
		eleCustomer=parentObj.getBehavior().getLocalModel("XPXCustomerIn");
		suffixType=YRCXmlUtils.getAttributeValue(eleCustomer, "/CustomerList/Customer/Extn/@ExtnSuffixType");
		myBehavior = new CustomerProfileInfoPanelBehavior(this, inputObject,
				FORM_ID, parentObj);
		updateNonBindedComponents();
		CreateListforControls();

		disableControls();//---function used to disable controls for ShipTo & BillTo
		adjustScrollPnl(scrolledPnlforInfo, pnlPrimaryInformation,
				pnlProfileInfo, true, true);
		updateSalesRepDetails(parentObj);
		updateCustomerAddressFields(parentObj);
		Control[] controls=allControlList(); //--Sunil
		getControlStatus(controls);
		checkUserPermissions();
	}
	/**function used to show-dispose of controls **/
	private void getControlStatus(Control[] controls) {

		for (Control control : HideControlsList) {

			if (null != control) {

//				if(HideControlsList.contains(control)){

				control.dispose();
			}
		}


	}

	private void initialize() {
		GridLayout gridLayoutPnl = new GridLayout(1, false);
		gridLayoutPnl.horizontalSpacing = 2;
		gridLayoutPnl.marginWidth = 3;
		gridLayoutPnl.marginHeight = 3;
		gridLayoutPnl.verticalSpacing = 2;

		pnlRoot = new Composite(this, SWT.NONE);
		pnlRoot.setData("name", "pnlRoot");
		pnlRoot.setLayout(gridLayoutPnl);
		this.setLayout(new FillLayout());
		// TODO remove following 1 line
		showRootPanel(true);
		createInfoComposite();
		// TODO remove following 1 line
		setSize(new org.eclipse.swt.graphics.Point(1000, 1000));
	}

	private void createInfoComposite() {
		GridLayout gridLayout1 = new GridLayout();
		gridLayout1.marginWidth = 1;
		gridLayout1.marginHeight = 1;

		GridData gridData = new GridData();
		gridData.horizontalAlignment = 4;
		gridData.grabExcessHorizontalSpace = true;
		gridData.grabExcessVerticalSpace = true;
		gridData.verticalAlignment = 4;
		// gridData.heightHint = 700;
		// gridData.widthHint = 700;
		pnlProfileInfo = new Composite(getRootPanel(), 0);
		pnlProfileInfo.setLayoutData(gridData);
		pnlProfileInfo.setLayout(gridLayout1);
		pnlProfileInfo.setData("name", "pnlProfileInfo");
		createPnlInfo();
	}

	private void createPnlInfo() {

		GridData gridData1 = new GridData();
		gridData1.horizontalAlignment = SWT.FILL;
		gridData1.grabExcessHorizontalSpace = true;
		gridData1.grabExcessVerticalSpace = true;
		gridData1.verticalAlignment = SWT.FILL;
		// gridData1.heightHint = 450;

		scrolledPnlforInfo = new ScrolledComposite(pnlProfileInfo, SWT.V_SCROLL|SWT.H_SCROLL);
		scrolledPnlforInfo.setLayoutData(gridData1);
		scrolledPnlforInfo.setExpandHorizontal(true);
		scrolledPnlforInfo.setExpandVertical(true);
		scrolledPnlforInfo.setAlwaysShowScrollBars(true);
		scrolledPnlforInfo.addListener(SWT.CURSOR_SIZEALL,
				new YRCScrolledCompositeListener(scrolledPnlforInfo));

		GridLayout gridLayout = new GridLayout();
		gridLayout.horizontalSpacing = 3;
		gridLayout.verticalSpacing = 3;
		gridLayout.marginWidth = 1;
		gridLayout.marginHeight = 1;
		gridLayout.numColumns = 1;

		GridData gridData0 = new GridData();
		gridData0.horizontalAlignment = SWT.FILL;
		gridData0.grabExcessVerticalSpace = true;
		gridData0.grabExcessHorizontalSpace = true;
		gridData0.verticalAlignment = SWT.FILL;
		// gridData0.heightHint = 500;
		pnlPrimaryInformation = new Composite(scrolledPnlforInfo, 0);
		pnlPrimaryInformation.setLayoutData(gridData0);
		pnlPrimaryInformation.setLayout(gridLayout);
		pnlPrimaryInformation.setData("name", "pnlPrimaryInformation");
		// XPXUtils.paintPanel(pnlPrimaryInformation);

		GridLayout gridLayout1 = new GridLayout();
		scrolledPnlforInfo.setLayout(gridLayout1);
		scrolledPnlforInfo.setContent(pnlPrimaryInformation);
		scrolledPnlforInfo.setData("yrc:customType", "TaskComposite");
		scrolledPnlforInfo.setData("name", "scrolledPnlforInfo");

		createCustomerProfileInfoPnl();
		createCompositeMiscPnl();
		adjustScrollPnl(scrolledPnlforInfo, pnlPrimaryInformation,
				pnlProfileInfo, true, true);
	}

	private void createCustomerProfileInfoPnl() {
		pnlCustomerProfileInfo = new Composite(pnlPrimaryInformation, SWT.NONE);
		pnlCustomerProfileInfo.setBackgroundMode(SWT.INHERIT_NONE);
		pnlCustomerProfileInfo.setData(YRCConstants.YRC_CONTROL_NAME, "pnlCustomerProfileInfo");
		GridData pnlCentralContactlayoutData = new GridData();
		pnlCentralContactlayoutData.grabExcessHorizontalSpace = true;
		pnlCentralContactlayoutData.horizontalSpan=1;
		pnlCustomerProfileInfo.setLayoutData(pnlCentralContactlayoutData);
		pnlCustomerProfileInfo.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "pnlCustomerProfileInfo");
		GridLayout pnlCentralContactlayout = new GridLayout(6, true);
		pnlCentralContactlayout.horizontalSpacing = 2;
		pnlCentralContactlayout.verticalSpacing = 2;
		pnlCentralContactlayout.marginHeight = 2;
		pnlCentralContactlayout.marginWidth = 2;
		pnlCentralContactlayout.numColumns=6;

		eleCustomer=parentObj.getBehavior().getLocalModel("XPXCustomerIn");
		suffixType=YRCXmlUtils.getAttributeValue(eleCustomer, "/CustomerList/Customer/Extn/@ExtnSuffixType");

		pnlCustomerProfileInfo.setLayout(pnlCentralContactlayout);		
		Element eleCustomer = parentObj.getBehavior().getLocalModel("XPXCustomerIn");
		String strHeader = null;
		String strSuffixType = YRCXmlUtils.getAttributeValue(eleCustomer, "/CustomerList/Customer/Extn/@ExtnSuffixType");
		if(YRCPlatformUI.equals("MC", strSuffixType)){
			strHeader = "MasterCustomer";
		} else if(YRCPlatformUI.equals("C", strSuffixType)){
			strHeader = "Customer";
		} else if(YRCPlatformUI.equals("B", strSuffixType)){
			if (!YRCPlatformUI.isVoid(YRCXmlUtils.getAttributeValue(eleCustomer, "/CustomerList/Customer/Extn/@ExtnBillToSuffix")))
				strHeader = "BillTo - "+YRCXmlUtils.getAttributeValue(eleCustomer, "/CustomerList/Customer/Extn/@ExtnBillToSuffix");
			else 
				strHeader = "BillTo";
		} else if(YRCPlatformUI.equals("S", strSuffixType)){
			if (!YRCPlatformUI.isVoid(YRCXmlUtils.getAttributeValue(eleCustomer, "/CustomerList/Customer/Extn/@ExtnShipToSuffix")))
				strHeader = "ShipTo - "+YRCXmlUtils.getAttributeValue(eleCustomer, "/CustomerList/Customer/Extn/@ExtnShipToSuffix");
			else 
				strHeader = "ShipTo";
		} else {
			strHeader = "";
		}

		createHeaderPnl(strHeader,SWT.CENTER);
		createHeaderPnl("Central Contact Information (will not update account information and is for information purposes only)",SWT.LEFT);
		createCentralContactComposite();

		if(!(("C".equals(suffixType))||("MC".equals(suffixType)))){
			createHeaderPnl("General Info",SWT.LEFT);

		}
		createGeneralInfoComposite();
		if(!("S".equals(suffixType))){
			createHeaderPnl("Site Management",SWT.LEFT);
		}

		createSiteManagementComposite();
		if(!("C".equals(suffixType))){
			createHeaderPnl("Order Header",SWT.LEFT);
		}

		createOrderHeaderComposite();

	}

	private void createOrderHeaderComposite() {
		// TODO Auto-generated method stub
		// TODO Auto-generated method stub
		GridData gridData1 = new GridData();
		gridData1.horizontalAlignment = SWT.END;
		// gridData9.grabExcessHorizontalSpace = true;
		//gridData1.horizontalIndent = 30;
		gridData1.verticalAlignment = SWT.CENTER;
		gridData1.widthHint = 30;
		gridData1.heightHint=20;
		gridData1.horizontalSpan=1;		

		GridData gridData2 = new GridData();
		gridData2.horizontalAlignment = SWT.BEGINNING;
		gridData2.grabExcessHorizontalSpace = true;
//		gridData2.horizontalIndent = 80;
		gridData2.verticalAlignment = SWT.CENTER;
		gridData2.widthHint = 400;
		gridData2.horizontalSpan=2;

		GridData gridData3 = new GridData();
		gridData3.horizontalAlignment = SWT.BEGINNING;
		gridData3.grabExcessHorizontalSpace = true;
		gridData3.verticalAlignment = SWT.CENTER;
		gridData3.widthHint = 200;
		gridData3.horizontalSpan=3;	

		GridData gridDataDummy = new GridData();
		gridDataDummy.horizontalAlignment = SWT.BEGINNING;
		gridDataDummy.grabExcessHorizontalSpace = true;
		gridDataDummy.verticalAlignment = SWT.CENTER;
		gridDataDummy.widthHint = 200;
		gridDataDummy.horizontalSpan=3;		

		GridData gridDataDummy1 = new GridData();
		gridDataDummy1.horizontalAlignment = SWT.END;
		// gridData9.grabExcessHorizontalSpace = true;
		//gridData1.horizontalIndent = 30;
		gridDataDummy1.verticalAlignment = SWT.CENTER;
		gridDataDummy1.widthHint = 30;
		gridDataDummy1.horizontalSpan=1;

		chkCsr1EmailConfirmationFlag = new Button(pnlCustomerProfileInfo,
				SWT.CHECK);
		chkCsr1EmailConfirmationFlag.setText("");
		chkCsr1EmailConfirmationFlag.setVisible(true);
		chkCsr1EmailConfirmationFlag.setData("yrc:customType", "Label");
		chkCsr1EmailConfirmationFlag.setLayoutData(gridData1);
		chkCsr1EmailConfirmationFlag.setData("name",
		"chkCsr1EmailConfirmationFlag");
		lblCsr1EmailConfirmationFlag = new Label(pnlCustomerProfileInfo,
				SWT.NONE);
		lblCsr1EmailConfirmationFlag.setText("Email_Confirmation_Flag_CSR1");
		lblCsr1EmailConfirmationFlag.setLayoutData(gridData2);
		lblCsr1EmailConfirmationFlag.setData("name",
		"lblCsr1EmailConfirmationFlag");
		addTab(gridDataDummy,"dummyCsr1EmailConfirmationFlag");

		chkCsr2EmailConfirmationFlag = new Button(pnlCustomerProfileInfo,
				SWT.CHECK);
		chkCsr2EmailConfirmationFlag.setText("");
		chkCsr2EmailConfirmationFlag.setVisible(true);
		chkCsr2EmailConfirmationFlag.setData("yrc:customType", "Label");
		chkCsr2EmailConfirmationFlag.setLayoutData(gridData1);
		chkCsr2EmailConfirmationFlag.setData("name","chkCsr2EmailConfirmationFlag");
		lblCsr2EmailConfirmationFlag = new Label(pnlCustomerProfileInfo,SWT.LEFT);
		lblCsr2EmailConfirmationFlag.setText("Email_Confirmation_Flag_CSR2");
		lblCsr2EmailConfirmationFlag.setLayoutData(gridData2);
		lblCsr2EmailConfirmationFlag.setData("name",
		"lblCsr2EmailConfirmationFlag");
		addTab(gridDataDummy,"dummyCsr2EmailConfirmationFlag");

		chkSalesRepEmailConfirmationFlag = new Button(pnlCustomerProfileInfo,SWT.CHECK);
		chkSalesRepEmailConfirmationFlag.setText("");
		chkSalesRepEmailConfirmationFlag.setVisible(true);
		chkSalesRepEmailConfirmationFlag.setData("yrc:customType", "Label");
		chkSalesRepEmailConfirmationFlag.setLayoutData(gridData1);
		chkSalesRepEmailConfirmationFlag.setData("name","chkSalesRepEmailConfirmationFlag");
		lblSalesRepEmailConfirmationFlag = new Label(pnlCustomerProfileInfo,SWT.LEFT);
		lblSalesRepEmailConfirmationFlag.setText("Email_Confirmation_Flag_SalesRep");
		lblSalesRepEmailConfirmationFlag.setLayoutData(gridData2);
		lblSalesRepEmailConfirmationFlag.setData("name","lblSalesRepEmailConfirmationFlag");

		addTab(gridDataDummy,"dummySalesRepEmailConfirmationFlag");

		GridData gridDataPriceControl = new GridData();
		gridDataPriceControl.horizontalAlignment = SWT.BEGINNING;
		gridDataPriceControl.grabExcessHorizontalSpace = false;
		gridDataPriceControl.verticalAlignment = 2;
		gridDataPriceControl.widthHint = 200;
		gridDataPriceControl.horizontalSpan=1;	

		GridData gridDataCurrency = new GridData();
		gridDataCurrency.horizontalAlignment = SWT.BEGINNING;
		gridDataCurrency.grabExcessHorizontalSpace = true;
		gridDataCurrency.verticalAlignment = 2;
		gridDataCurrency.widthHint = 100;
		gridDataCurrency.horizontalSpan=2;	

		addTab(gridData1,"dummyMaxOrderAmount");
		lblMaxOrderAmount = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblMaxOrderAmount.setText("Max_Order_Amount");
		lblMaxOrderAmount.setLayoutData(gridData2);
		lblMaxOrderAmount.setData("name", "lblMaxOrderAmount");

		txtMaxOrderAmount = new Text(pnlCustomerProfileInfo, 133120);
		txtMaxOrderAmount.setText("");
		txtMaxOrderAmount.setLayoutData(gridDataPriceControl);
		txtMaxOrderAmount.setTextLimit(20);
		txtMaxOrderAmount.addFocusListener(focusListener);
		txtMaxOrderAmount.setData("name", "txtMaxOrderAmount");
		stxtMaxOrderCurrency = new StyledText(pnlCustomerProfileInfo, SWT.SIMPLE);
		stxtMaxOrderCurrency.setText("$");
		stxtMaxOrderCurrency.setEditable(false);
		stxtMaxOrderCurrency.setLayoutData(gridDataCurrency);
		stxtMaxOrderCurrency.setData("name", "stxtMaxOrderCurrency");

		addTab(gridData1,"dummyMinOrderAmount");
		lblMinOrderAmount = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblMinOrderAmount.setText("Min_Order_Amount");
		lblMinOrderAmount.setLayoutData(gridData2);
		lblMinOrderAmount.setData("name", "lblMinOrderAmount");
		txtMinOrderAmount = new Text(pnlCustomerProfileInfo, 133120);
		txtMinOrderAmount.setText("");
		txtMinOrderAmount.setLayoutData(gridDataPriceControl);
		txtMinOrderAmount.setTextLimit(20);
		txtMinOrderAmount.addFocusListener(focusListener);
		txtMinOrderAmount.setData("name", "txtMinOrderAmount");
		stxtMinOrderCurrency = new StyledText(pnlCustomerProfileInfo, SWT.SIMPLE);
		stxtMinOrderCurrency.setText("$");
		stxtMinOrderCurrency.setEditable(false);
		stxtMinOrderCurrency.setLayoutData(gridDataCurrency);
		stxtMinOrderCurrency.setData("name", "stxtMinOrderCurrency");

		addTab(gridData1,"dummySmallOrderFee");
		lblSmallOrderFee = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblSmallOrderFee.setText("Small Order Fee");
		lblSmallOrderFee.setLayoutData(gridData2);
		lblSmallOrderFee.setData("name", "lblSmallOrderFee");
		txtSmallOrderFee = new Text(pnlCustomerProfileInfo, 133120);
		txtSmallOrderFee.setText("");
		txtSmallOrderFee.setLayoutData(gridDataPriceControl);
		txtSmallOrderFee.setTextLimit(20);
		txtSmallOrderFee.addFocusListener(focusListener);
		txtSmallOrderFee.setData("name", "txtSmallOrderFee");
		stxtSmallOrderCurrency = new StyledText(pnlCustomerProfileInfo, SWT.SIMPLE);
		stxtSmallOrderCurrency.setText("$");
		stxtSmallOrderCurrency.setEditable(false);
		stxtSmallOrderCurrency.setLayoutData(gridDataCurrency);
		stxtSmallOrderCurrency.setData("name", "stxtSmallOrderCurrency");

		addTab(gridData1, "dummyShipComplete");
		lblShipComplete = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblShipComplete.setText("Ship_Complete");
		lblShipComplete.setLayoutData(gridData2);
		lblShipComplete.setData("name", "lblShipComplete");
		txtShipComplete = new Text(pnlCustomerProfileInfo, 2048);
		txtShipComplete.setText("");
		txtShipComplete.setLayoutData(gridData3);
		txtShipComplete.setData("name", "txtShipComplete");

		chkOrderUpdateFlag = new Button(pnlCustomerProfileInfo, SWT.CHECK);
		chkOrderUpdateFlag.setText("");
		chkOrderUpdateFlag.setVisible(true);
		chkOrderUpdateFlag.setData("yrc:customType", "Label");
		chkOrderUpdateFlag.setLayoutData(gridData1);
		chkOrderUpdateFlag.setData("name", "chkOrderUpdateFlag");
		lblOrderUpdateFlag = new Label(pnlCustomerProfileInfo, SWT.LEFT);
		lblOrderUpdateFlag.setText("Order_Update_Flag");
		lblOrderUpdateFlag.setLayoutData(gridData2);
		lblOrderUpdateFlag.setData("name", "lblOrderUpdateFlag");
		addTab(gridDataDummy,"dummyOrderUpdateFlag");

		chkShipToOverrideFlag = new Button(pnlCustomerProfileInfo, SWT.CHECK);
		chkShipToOverrideFlag.setText("");
		chkShipToOverrideFlag.setVisible(true);
		chkShipToOverrideFlag.setData("yrc:customType", "Label");
		chkShipToOverrideFlag.setLayoutData(gridData1);
		chkShipToOverrideFlag.setData("name", "chkShipToOverrideFlag");
		lblShipToOverrideFlag = new Label(pnlCustomerProfileInfo, SWT.LEFT);
		lblShipToOverrideFlag.setText("ShipTo_Override_Flag");
		lblShipToOverrideFlag.setLayoutData(gridData2);
		lblShipToOverrideFlag.setData("name", "lblShipToOverrideFlag");
		addTab(gridDataDummy,"dummyShipToOverrideFlag");


		addTab(gridData1,"dummyCurrencyCode");
		lblCurrencyCode = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblCurrencyCode.setText("Currency_Code");
		lblCurrencyCode.setLayoutData(gridData2);
		lblCurrencyCode.setData("name", "lblCurrencyCode");
		txtCurrencyCode = new Text(pnlCustomerProfileInfo, 2048);
		txtCurrencyCode.setText("");
		txtCurrencyCode.setLayoutData(gridData3);
		txtCurrencyCode.setData("name", "txtCurrencyCode");		
	}

	private void createSiteManagementComposite() {
		GridData gridData1 = new GridData();
		gridData1.horizontalAlignment = SWT.END;
//		gridData1.grabExcessHorizontalSpace = true;
		//gridData1.horizontalIndent = 30;
		gridData1.verticalAlignment = SWT.CENTER;
		gridData1.widthHint = 30;
		gridData1.horizontalSpan=1;		

		GridData gridData2 = new GridData();
		gridData2.horizontalAlignment = SWT.BEGINNING;
		gridData2.grabExcessHorizontalSpace = true;
//		gridData2.horizontalIndent = 80;
		gridData2.verticalAlignment = SWT.CENTER;
		gridData2.widthHint = 300;
		gridData2.horizontalSpan=3;
	
		GridData gridDataLbl = new GridData();
		gridDataLbl.horizontalAlignment = SWT.BEGINNING;
		gridDataLbl.grabExcessHorizontalSpace = true;
//		gridDataLbl.horizontalIndent = 80;
		gridDataLbl.verticalAlignment = SWT.CENTER;
		gridDataLbl.widthHint = 300;
		gridDataLbl.horizontalSpan=2;

		GridData gridDataDummy = new GridData();
		gridDataDummy.horizontalAlignment = SWT.BEGINNING;
		gridDataDummy.grabExcessHorizontalSpace = true;
//		gridData2.horizontalIndent = 80;
		gridDataDummy.verticalAlignment = SWT.CENTER;
		gridDataDummy.widthHint = 300;
		gridDataDummy.horizontalSpan=3;
		
		GridData gridDataLblMsg = new GridData();
		gridDataLblMsg.horizontalAlignment = SWT.BEGINNING;
		gridDataLblMsg.grabExcessHorizontalSpace = true;
		gridDataLblMsg.verticalAlignment = SWT.CENTER;
		gridDataLblMsg.widthHint = 310;
		gridDataLblMsg.horizontalSpan=3;
		
		chkCustLineAcct = new Button(pnlCustomerProfileInfo, SWT.CHECK);
		chkCustLineAcct.setText("");
		chkCustLineAcct.setVisible(true);
		chkCustLineAcct.setData("yrc:customType", "Label");
		chkCustLineAcct.setLayoutData(gridData1);
		chkCustLineAcct.setData("name", "chkCustLineAcct");

		lblCustLineAcct = new Label(pnlCustomerProfileInfo, SWT.LEFT);
		lblCustLineAcct.setText("Cust Line Acct#:");
		lblCustLineAcct.setLayoutData(gridDataLbl);
		lblCustLineAcct.setData("name", "lblCustLineAcct");
		txtCustLineAcctMsg = new Text(pnlCustomerProfileInfo,SWT.NONE);
		txtCustLineAcctMsg.setText("");
		txtCustLineAcctMsg.setLayoutData(gridData2);
		txtCustLineAcctMsg.setData("name", "txtCustLineAcct");
		txtCustLineAcctMsg.setVisible(false);

		if(!("C".equals(suffixType))){
			chkCustLineField1 = new Button(pnlCustomerProfileInfo, SWT.CHECK);
			chkCustLineField1.setText("");
			chkCustLineField1.setVisible(true);
			chkCustLineField1.setData("yrc:customType", "Label");
			chkCustLineField1.setLayoutData(gridData1);
			chkCustLineField1.setData("name", "chkCustLineField1");
			lblCustLineField1 = new Label(pnlCustomerProfileInfo, SWT.LEFT);
			lblCustLineField1.setText("Cust Line Field 1:");
			lblCustLineField1.setLayoutData(gridDataLbl);
			lblCustLineField1.setData("name", "lblCustLineField1");
			txtCustLineField1 = new Text(pnlCustomerProfileInfo, 2048);
			txtCustLineField1.setText("");
			txtCustLineField1.setLayoutData(gridData2);
			txtCustLineField1.setTextLimit(500);
			txtCustLineField1.setData("name", "txtCustLineField1");	

			chkCustLineField2 = new Button(pnlCustomerProfileInfo, SWT.CHECK);
			chkCustLineField2.setText("");
			chkCustLineField2.setVisible(true);
			chkCustLineField2.setData("yrc:customType", "Label");
			chkCustLineField2.setLayoutData(gridData1);
			chkCustLineField2.setData("name", "chkCustLineField2");
			lblCustLineField2 = new Label(pnlCustomerProfileInfo, SWT.LEFT);
			lblCustLineField2.setText("Cust Line Field 2:");
			lblCustLineField2.setLayoutData(gridDataLbl);
			lblCustLineField2.setData("name", "lblCustLineField2");
			txtCustLineField2 = new Text(pnlCustomerProfileInfo, 2048);
			txtCustLineField2.setText("");
			txtCustLineField2.setLayoutData(gridData2);
			txtCustLineField2.setTextLimit(500);
			txtCustLineField2.setData("name", "txtCustLineField2");		

			chkCustLineField3 = new Button(pnlCustomerProfileInfo, SWT.CHECK);
			chkCustLineField3.setText("");
			chkCustLineField3.setVisible(true);
			chkCustLineField3.setData("yrc:customType", "Label");
			chkCustLineField3.setLayoutData(gridData1);
			chkCustLineField3.setData("name", "chkCustLineField3");
			lblCustLineField3 = new Label(pnlCustomerProfileInfo, SWT.LEFT);
			lblCustLineField3.setText("Cust Line Field 3:");
			lblCustLineField3.setLayoutData(gridDataLbl);
			lblCustLineField3.setData("name", "lblCustLineField3");
			txtCustLineField3 = new Text(pnlCustomerProfileInfo, 2048);
			txtCustLineField3.setText("");
			txtCustLineField3.setLayoutData(gridData2);
			txtCustLineField3.setTextLimit(500);
			txtCustLineField3.setData("name", "txtCustLineField3");	
		}
		chkCustomerLinePONumber = new Button(pnlCustomerProfileInfo, SWT.CHECK);
		chkCustomerLinePONumber.setText("");
		chkCustomerLinePONumber.setVisible(true);
		chkCustomerLinePONumber.setData("yrc:customType", "Label");
		chkCustomerLinePONumber.setLayoutData(gridData1);
		chkCustomerLinePONumber.setData("name", "chkCustomerLinePONumber");
		lblCustomerLinePONumber = new Label(pnlCustomerProfileInfo, SWT.LEFT);
		lblCustomerLinePONumber.setText("Customer Line PO#");
		lblCustomerLinePONumber.setLayoutData(gridDataLbl);
		lblCustomerLinePONumber.setData("name", "lblCustomerLinePONumber");

		txtCustomerLinePONumberMsg = new Text(pnlCustomerProfileInfo,SWT.NONE);
		txtCustomerLinePONumberMsg.setText("");
		txtCustomerLinePONumberMsg.setLayoutData(gridDataLbl);
		txtCustomerLinePONumberMsg.setData("name", "txtCustLineAcct");
		txtCustomerLinePONumberMsg.setVisible(false);
		addTab(gridDataDummy,"dummyCustomerLinePONumber");

		Label lblCustomerFieldMsg1 = new Label(pnlCustomerProfileInfo, SWT.WRAP);
		lblCustomerFieldMsg1.setText("If checked the Customer fields on this tab display but");
		lblCustomerFieldMsg1.setLayoutData(gridDataLblMsg);
		lblCustomerFieldMsg1.setData("name", "lblCustomerFieldMsg");
		addTab(gridDataDummy,"dummyCustomerFieldMessage1");
		
		lblCustomerFieldMsg2 = new Label(pnlCustomerProfileInfo, SWT.WRAP);
		lblCustomerFieldMsg2.setText("are not required.Use the ManageCustomer Rules tab");
		lblCustomerFieldMsg2.setLayoutData(gridDataLblMsg);
		lblCustomerFieldMsg2.setData("name", "lblCustomerFieldMsg");
		addTab(gridDataDummy,"dummyCustomerFieldMessage2");
		
		lblCustomerFieldMsg3 = new Label(pnlCustomerProfileInfo, SWT.WRAP);
		lblCustomerFieldMsg3.setText("on the Customer or Bill-To level to make the customer");// fields required.Required fields automatically display
		lblCustomerFieldMsg3.setLayoutData(gridDataLblMsg);
		lblCustomerFieldMsg3.setData("name", "lblCustomerFieldMsg");
		addTab(gridDataDummy,"dummyCustomerFieldMessage3");
	
		lblCustomerFieldMsg4 = new Label(pnlCustomerProfileInfo, SWT.WRAP);
		lblCustomerFieldMsg4.setText("fields required.Required fields automatically display");//customer fields required.Required fields automatically display
		lblCustomerFieldMsg4.setLayoutData(gridDataLblMsg);
		lblCustomerFieldMsg4.setData("name", "lblCustomerFieldMsg");
		addTab(gridDataDummy,"dummyCustomerFieldMessage3");
		
		lblCustomerFieldMsg5 = new Label(pnlCustomerProfileInfo, SWT.WRAP);
		lblCustomerFieldMsg5.setText("regardless of the settings on this tab.");//customer fields required.Required fields automatically display
		lblCustomerFieldMsg5.setLayoutData(gridDataLblMsg);
		lblCustomerFieldMsg5.setData("name", "lblCustomerFieldMsg");
		addTab(gridDataDummy,"dummyCustomerFieldMessage3");
		
		chkCanRequestSample = new Button(pnlCustomerProfileInfo, SWT.CHECK);
		chkCanRequestSample.setText("");
		chkCanRequestSample.setVisible(true);
		chkCanRequestSample.setData("yrc:customType", "Label");
		chkCanRequestSample.setLayoutData(gridData1);
		chkCanRequestSample.setData("name", "chkCanRequestSample");
		lblCanRequestSample = new Label(pnlCustomerProfileInfo, SWT.LEFT);
		lblCanRequestSample.setText("Can_Request_Sample");
		lblCanRequestSample.setLayoutData(gridDataLbl);
		lblCanRequestSample.setData("name", "lblCanRequestSample");
		addTab(gridDataDummy,"dummyCanRequestSample");

		chkViewPriceFlag = new Button(pnlCustomerProfileInfo, SWT.CHECK);
		chkViewPriceFlag.setText("");
		chkViewPriceFlag.setVisible(true);
		chkViewPriceFlag.setData("yrc:customType", "Label");
		chkViewPriceFlag.setLayoutData(gridData1);
		chkViewPriceFlag.setData("name", "chkViewPriceFlag");
		lblViewPriceFlag = new Label(pnlCustomerProfileInfo, SWT.LEFT);
		lblViewPriceFlag.setText("View Prices");
		lblViewPriceFlag.setLayoutData(gridDataLbl);
		lblViewPriceFlag.setData("name", "lblViewPriceFlag");
		addTab(gridDataDummy,"dummyViewPriceFlag");

		chkCanOrder = new Button(pnlCustomerProfileInfo, SWT.CHECK);
		chkCanOrder.setText("");
		chkCanOrder.setVisible(true);
		chkCanOrder.setData("yrc:customType", "Label");
		chkCanOrder.setLayoutData(gridData1);
		chkCanOrder.setData("name", "chkCanOrder");
		lblCanOrder = new Label(pnlCustomerProfileInfo, SWT.LEFT);
		lblCanOrder.setText("Can Order");
		lblCanOrder.setLayoutData(gridDataLbl);
		lblCanOrder.setData("name", "lblCanOrder");
		addTab(gridDataDummy,"dummyCanOrder");

		chkViewInventory = new Button(pnlCustomerProfileInfo, SWT.CHECK);
		chkViewInventory.setText("");
		chkViewInventory.setVisible(true);
		chkViewInventory.setData("yrc:customType", "Label");
		chkViewInventory.setLayoutData(gridData1);
		chkViewInventory.setData("name", "chkViewInventory");
		lblViewInventory = new Label(pnlCustomerProfileInfo, SWT.LEFT);
		lblViewInventory.setText("View Inventory");
		lblViewInventory.setLayoutData(gridDataLbl);
		lblViewInventory.setData("name", "lblViewInventory");
		addTab(gridDataDummy,"dummyViewInventory");

		chkUseOrderMultiple = new Button(pnlCustomerProfileInfo, SWT.CHECK);
		chkUseOrderMultiple.setText("");
		chkUseOrderMultiple.setVisible(true);
		chkUseOrderMultiple.setData("yrc:customType", "Label");
		chkUseOrderMultiple.setLayoutData(gridData1);
		chkUseOrderMultiple.setData("name", "chkUseOrderMultiple");
		lblUseOrderMultiple = new Label(pnlCustomerProfileInfo, SWT.LEFT);
		lblUseOrderMultiple.setText("Use Order Multiple");
		lblUseOrderMultiple.setLayoutData(gridDataLbl);
		lblUseOrderMultiple.setData("name", "lblUseOrderMultiple");
		addTab(gridDataDummy,"dummyUseOrderMultiple");

		chkViewInvoices = new Button(pnlCustomerProfileInfo, SWT.CHECK);
		chkViewInvoices.setText("");
		chkViewInvoices.setVisible(true);
		chkViewInvoices.setData("yrc:customType", "Label");
		chkViewInvoices.setLayoutData(gridData1);
		chkViewInvoices.setData("name", "chkViewInvoices");
		lblViewInvoices = new Label(pnlCustomerProfileInfo, SWT.LEFT);
		lblViewInvoices.setText("View Invoices");
		lblViewInvoices.setLayoutData(gridDataLbl);
		lblViewInvoices.setData("name", "lblViewInvoices");
		addTab(gridDataDummy,"dummyViewInvoices");

		GridData gridDataDummy1 = new GridData();
		gridDataDummy1.horizontalAlignment = SWT.END;
//		gridData1.grabExcessHorizontalSpace = true;
		//gridData1.horizontalIndent = 30;
		gridDataDummy1.verticalAlignment = SWT.CENTER;
		gridDataDummy1.widthHint = 30;
		gridDataDummy1.horizontalSpan=1;			

		addTab(gridDataDummy1,"dummySecondItemDisplay");
		lblSecondItemDisplay = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblSecondItemDisplay.setText("Second Item# Display:");
		lblSecondItemDisplay.setLayoutData(gridDataLbl);
		lblSecondItemDisplay.setData("name", "lblSecondItemDisplay");
		comboSecondItemDisplay = new Combo(pnlCustomerProfileInfo, 8);
		comboSecondItemDisplay.setLayoutData(gridDataDummy);
		comboSecondItemDisplay.setTextLimit(50);
		comboSecondItemDisplay.setData("name", "comboSecondItemDisplay");
	}

	private void createCentralContactComposite() {
		GridData gridData1 = new GridData();
		gridData1.horizontalAlignment = SWT.END;
		// gridData9.grabExcessHorizontalSpace = true;
		//gridData1.horizontalIndent = 30;
		gridData1.verticalAlignment = 2;
		gridData1.widthHint = 30;
		gridData1.horizontalSpan=1;	

		GridData gridData2 = new GridData();
		gridData2.horizontalAlignment = SWT.BEGINNING;
		gridData2.grabExcessHorizontalSpace = true;
//		gridData2.horizontalIndent = 80;
		gridData2.verticalAlignment = 2;
		gridData2.widthHint = 300;
		gridData2.horizontalSpan=2;

		GridData gridData3 = new GridData();
		gridData3.horizontalAlignment = SWT.BEGINNING;
		gridData3.grabExcessHorizontalSpace = true;
		gridData3.verticalAlignment = 2;
		gridData3.widthHint = 300;
		gridData3.horizontalSpan=3;

		GridData gridData4 = new GridData();
		gridData4.horizontalAlignment = SWT.FILL;
		gridData4.grabExcessHorizontalSpace = true;
		gridData4.verticalAlignment = 2;
		//	gridData4.widthHint = 300;
		gridData4.horizontalSpan=3;


		addParentCustomerLinks(gridData1, gridData2, gridData4);	

		GridData gridDataType = new GridData();
		gridDataType.horizontalAlignment = SWT.BEGINNING;
		gridDataType.grabExcessHorizontalSpace = true;
		gridDataType.verticalAlignment = 2;
		gridDataType.widthHint = 100;
		gridDataType.horizontalSpan=3;	

		addTab(gridData1,"dummyType");
		lblType = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblType.setText("Type:");
		lblType.setLayoutData(gridData2);
		lblType.setData("name", "lblType");
		txtType = new Text(pnlCustomerProfileInfo, 2048);
		txtType.setText("");
		txtType.setLayoutData(gridDataType);
		txtType.setTextLimit(240);
		txtType.setData("name", "txtType");

		addTab(gridData1,"dummyAddressLine1");
		lblAddressLine1 = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblAddressLine1.setText("Address Line 1:");
		lblAddressLine1.setLayoutData(gridData2);
		lblAddressLine1.setData("name", "lblAddressLine1");
		txtAddressLine1 = new Text(pnlCustomerProfileInfo, 2048);
		txtAddressLine1.setText("");
		txtAddressLine1.setLayoutData(gridData3);
		txtAddressLine1.setTextLimit(240);
		txtAddressLine1.setData("name", "txtAddressLine1");

		addTab(gridData1,"dummyAddressLine2");
		lblAddressLine2 = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblAddressLine2.setText("Address Line 2:");
		lblAddressLine2.setLayoutData(gridData2);
		lblAddressLine2.setData("name", "lblAddressLine2");
		txtAddressLine2 = new Text(pnlCustomerProfileInfo, 2048);
		txtAddressLine2.setText("");
		txtAddressLine2.setLayoutData(gridData3);
		txtAddressLine2.setTextLimit(240);
		txtAddressLine2.setData("name", "txtAddressLine2");

		addTab(gridData1,"dummyAddressLine3");
		lblAddressLine3 = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblAddressLine3.setText("Address Line 3:");
		lblAddressLine3.setLayoutData(gridData2);
		lblAddressLine3.setData("name", "lblAddressLine3");
		txtAddressLine3 = new Text(pnlCustomerProfileInfo, 2048);
		txtAddressLine3.setText("");
		txtAddressLine3.setLayoutData(gridData3);
		txtAddressLine3.setTextLimit(240);
		txtAddressLine3.setData("name", "txtAddressLine3");

		addTab(gridData1,"dummyCity");
		lblCity = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblCity.setText("City:");
		lblCity.setLayoutData(gridData2);
		lblCity.setData("name", "lblCity");
		txtCity = new Text(pnlCustomerProfileInfo, 2048);
		txtCity.setText("");
		txtCity.setLayoutData(gridDataType);
		txtCity.setTextLimit(240);
		txtCity.setData("name", "txtCity");

		addTab(gridData1,"dummyState");
		lblState = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblState.setText("State/Province:");
		lblState.setLayoutData(gridData2);
		lblState.setData("name", "lblState");
		txtState = new Text(pnlCustomerProfileInfo, 2048);
		txtState.setText("");
		txtState.setLayoutData(gridDataType);
		txtState.setTextLimit(240);
		txtState.setData("name", "txtState");

		addTab(gridData1,"dummyPostalCode");
		lblPostalCode = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblPostalCode.setText("Postal Code"+"+"+"Zip4:");
		lblPostalCode.setLayoutData(gridData2);
		lblPostalCode.setData("name", "lblPostalCode");

		GridData gridDataPostalCode = new GridData();
		gridDataPostalCode.horizontalAlignment = SWT.BEGINNING;
		gridDataPostalCode.grabExcessHorizontalSpace = false;
		gridDataPostalCode.verticalAlignment = 2;
		gridDataPostalCode.widthHint = 160;
		gridDataPostalCode.horizontalSpan=1;	

		GridData gridDataZip = new GridData();
		gridDataZip.horizontalAlignment = SWT.BEGINNING;
		gridDataZip.grabExcessHorizontalSpace = true;
		gridDataZip.verticalAlignment = 2;
		gridDataZip.widthHint = 100;
		gridDataZip.horizontalSpan=2;	

		txtPostalCode = new Text(pnlCustomerProfileInfo, 2048);
		txtPostalCode.setText("");
		txtPostalCode.setLayoutData(gridDataPostalCode);
		txtPostalCode.setTextLimit(240);
		txtPostalCode.setData("name", "txtPostalCode");

		txtZip = new Text(pnlCustomerProfileInfo, 2048);
		txtZip.setText("");
		txtZip.setLayoutData(gridDataZip);
		txtZip.setTextLimit(240);
		txtZip.setData("name", "txtZip");

		addTab(gridData1,"dummyCountryCode");
		lblCountryCode = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblCountryCode.setText("Country Code:");
		lblCountryCode.setLayoutData(gridData2);
		lblCountryCode.setData("name", "lblCountryCode");
		txtCountryCode = new Text(pnlCustomerProfileInfo, 2048);
		txtCountryCode.setText("");
		txtCountryCode.setLayoutData(gridDataType);
		txtCountryCode.setTextLimit(240);
		txtCountryCode.setData("name", "txtCountryCode");

		addTab(gridData1,"dummyAttentionName");
		lblAttentionName = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblAttentionName.setText("Attention_Name");
		lblAttentionName.setLayoutData(gridData2);
		lblAttentionName.setData("name", "lblAttentionName");
		txtAttentionName = new Text(pnlCustomerProfileInfo, 2048);
		txtAttentionName.setText("");
		txtAttentionName.setLayoutData(gridData3);
		txtAttentionName.setTextLimit(240);
		txtAttentionName.setData("name", "txtAttentionName");

		addTab(gridData1,"dummyPhone1");
		lblPhone1 = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblPhone1.setText("Phone1");
		lblPhone1.setLayoutData(gridData2);
		lblPhone1.setData("name", "lblPhone1");
		txtPhone1 = new Text(pnlCustomerProfileInfo, 2048);
		txtPhone1.setText("");
		txtPhone1.setLayoutData(gridData3);
		txtPhone1.setTextLimit(25);
		txtPhone1.setData("name", "txtPhone1");

		addTab(gridData1,"dummyPhone2");
		lblPhone2 = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblPhone2.setText("Phone2");
		lblPhone2.setLayoutData(gridData2);
		lblPhone2.setData("name", "lblPhone2");
		txtPhone2 = new Text(pnlCustomerProfileInfo, 2048);
		txtPhone2.setText("");
		txtPhone2.setLayoutData(gridData3);
		txtPhone2.setTextLimit(25);
		txtPhone2.setData("name", "txtPhone2");

		addTab(gridData1,"dummyFax1");
		lblFax1 = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblFax1.setText("Fax1_Literal");
		lblFax1.setLayoutData(gridData2);
		lblFax1.setData("name", "lblFax1");
		txtFax1 = new Text(pnlCustomerProfileInfo, 2048);
		txtFax1.setText("");
		txtFax1.setLayoutData(gridData3);
		txtFax1.setTextLimit(25);
		txtFax1.setData("name", "txtFax1");

		addTab(gridData1,"dummyFax2");
		lblFax2 = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblFax2.setText("Fax2_Literal");
		lblFax2.setLayoutData(gridData2);
		lblFax2.setData("name", "lblFax2");
		txtFax2 = new Text(pnlCustomerProfileInfo, 2048);
		txtFax2.setText("");
		txtFax2.setLayoutData(gridData3);
		txtFax2.setTextLimit(25);
		txtFax2.setData("name", "txtFax2");

		addTab(gridData1,"dummyLocationId");
		lblLocationId = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblLocationId.setText("Location ID:");
		lblLocationId.setLayoutData(gridData2);
		lblLocationId.setData("name", "lblLocationId");
		txtLocationId = new Text(pnlCustomerProfileInfo, 2048);
		txtLocationId.setText("");
		txtLocationId.setLayoutData(gridData3);
		txtLocationId.setTextLimit(240);
		txtLocationId.setData("name", "txtLocationId");
		//txtLocationId.setEditable(false);

		addTab(gridData1,"dummyCustomerStatus");
		lblCustomerStatus = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblCustomerStatus.setText("Customer Status:");
		lblCustomerStatus.setLayoutData(gridData2);
		lblCustomerStatus.setData("name", "lblCustomerStatus");
		txtCustomerStatus = new Text(pnlCustomerProfileInfo, 2048);
		txtCustomerStatus.setText(getCustomerStaus());
		txtCustomerStatus.setLayoutData(gridData3);
		txtCustomerStatus.setTextLimit(240);
		txtCustomerStatus.setData("name", "txtCustomerStatus");
	}

	private String getCustomerStaus() {
		Element eleCustomer = parentObj.getBehavior().getLocalModel("XPXCustomerIn");
		//CustomerList/Customer/Extn/@ExtnCustomerStoreNumber
		String customerStatus="";
		Element tempCustomerStatus =YRCXmlUtils.getXPathElement(eleCustomer, "/CustomerList/Customer/Extn");
		String customerStatustmp=tempCustomerStatus.getAttribute("ExtnCustomerStatus");
		if("A".equals(customerStatustmp))
			customerStatus="Active";
		else{
			customerStatus="Suspend";
		}
		return customerStatus;
	}

	protected void addParentCustomerLinks(GridData gridData1, GridData gridData2, GridData gridData3) {
		Element generalInfo = parentObj.getBehavior().getLocalModel("XPXCustomerIn");
		ArrayList listCustomers = YRCXmlUtils.getChildren(generalInfo, "Customer");
		if(!YRCPlatformUI.isVoid(listCustomers)&& listCustomers.size()>0)
		{
			Element customerEle = (Element)listCustomers.get(0);
			if(YRCXmlUtils.getChildren(customerEle,"ParentMasterCustomer").size()>0)
			{
				addTab(gridData1,"dummyMasterCustomer");
				lblMasterCustomer = new Label(pnlCustomerProfileInfo, SWT.NONE);
				lblMasterCustomer.setText("Master Customer:");
				lblMasterCustomer.setLayoutData(gridData2);
				lblMasterCustomer.setData("name", "lblMasterCustomer");
				linkMasterCustomer = new Link(pnlCustomerProfileInfo, 0);
				linkMasterCustomer.setText(YRCXmlUtils.getXPathElement(customerEle,"/Customer/ParentMasterCustomer/Customer").getAttribute("CustomerID")+"+"+YRCXmlUtils.getXPathElement(customerEle,"/Customer/ParentMasterCustomer/Customer").getAttribute("OrganizationName"));
				linkMasterCustomer.setData("name", "linkMasterCustomer");
				linkMasterCustomer.setData("yrc:customType", "Link");
				linkMasterCustomer.setEnabled(true);
				linkMasterCustomer.setLayoutData(gridData3);
				linkMasterCustomer.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void
					widgetSelected( org.eclipse.swt.events.SelectionEvent e) {
					myBehavior.openDetailEditor((String) linkMasterCustomer.getData("name"));
				}
				});				
			}
			if(YRCXmlUtils.getChildren(customerEle,"ParentCustomerCustomer").size()>0)
			{
				addTab(gridData1,"dummyCustomer");
				lblCustomer = new Label(pnlCustomerProfileInfo, SWT.NONE);
				lblCustomer.setText("Customer:");
				lblCustomer.setLayoutData(gridData2);
				lblCustomer.setData("name", "lblCustomer");
				linkCustomer = new Link(pnlCustomerProfileInfo, 0);
				linkCustomer.setText(YRCXmlUtils.getXPathElement(customerEle,"/Customer/ParentCustomerCustomer/Customer").getAttribute("CustomerID")+"+"+YRCXmlUtils.getXPathElement(customerEle,"/Customer/ParentCustomerCustomer/Customer").getAttribute("OrganizationName"));
				linkCustomer.setData("name", "linkCustomer");
				linkCustomer.setLayoutData(gridData3);
				linkCustomer.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void
					widgetSelected( org.eclipse.swt.events.SelectionEvent e) {
					myBehavior.openDetailEditor((String) linkCustomer.getData("name"));
				}
				});	
			}
			if(YRCXmlUtils.getChildren(customerEle,"ParentBillToCustomer").size()>0)
			{
				addTab(gridData1,"dummyBillTo");
				lblBillTo = new Label(pnlCustomerProfileInfo, SWT.NONE);
				lblBillTo.setText("Bill-To:");
				lblBillTo.setLayoutData(gridData2);
				lblBillTo.setData("name", "lblBillTo");
				linkBillTo = new Link(pnlCustomerProfileInfo, 0);
				linkBillTo.setText(YRCXmlUtils.getXPathElement(customerEle,"/Customer/ParentBillToCustomer/Customer").getAttribute("CustomerID")+"+"+YRCXmlUtils.getXPathElement(customerEle,"/Customer/ParentBillToCustomer/Customer").getAttribute("OrganizationName"));
				linkBillTo.setData("name", "linkBillTo");
				linkBillTo.setLayoutData(gridData3);
				linkBillTo.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void
					widgetSelected( org.eclipse.swt.events.SelectionEvent e) {
					myBehavior.openDetailEditor((String) linkBillTo.getData("name"));
				}
				});
			}
		}
	}

	private void addTab(GridData gridData2 , String name) {
		lblFiller = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblFiller.setText("");
		lblFiller.setLayoutData(gridData2);
		lblFiller.setData("name", name);
		fillerLabelMap.put(name, lblFiller);
	}

	public String getFormId() {
		return FORM_ID;
	}

	public Composite getRootPanel() {
		return pnlRoot;
	}

	private void createCompositeMiscPnl() {

		GridLayout gridLayout6 = new GridLayout();
		gridLayout6.marginWidth = 0;
		gridLayout6.marginHeight = 0;
		GridData gridData9 = new GridData();
		gridData9.horizontalAlignment = SWT.END;
		gridData9.grabExcessHorizontalSpace = true;
		gridData9.verticalAlignment = 2;
		gridData9.horizontalSpan = 2;
		compositeMiscPnl = new Composite(pnlProfileInfo, 0);
		compositeMiscPnl.setLayoutData(gridData9);
		compositeMiscPnl.setLayout(gridLayout6);
		compositeMiscPnl.setData("yrc:customType", "TaskComposite");
		compositeMiscPnl.setData("name", "compositeMiscPnl");
		createMiscPnl();
	}

	private void createMiscPnl() {
		GridData gridData16 = new GridData();
		gridData16.horizontalAlignment = 3;
		gridData16.grabExcessHorizontalSpace = true;
		gridData16.horizontalSpan = 1;
		gridData16.horizontalIndent = 0;
		gridData16.verticalAlignment = 2;

		btnUpdate = new Button(compositeMiscPnl, 0);
		btnUpdate.setText("Update_Profile");
		btnUpdate.setLayoutData(gridData16);
		btnUpdate.setData("name", "btnUpdate");
		/*
		 * btnUpdate .addSelectionListener(new
		 * org.eclipse.swt.events.SelectionAdapter() { public void
		 * widgetSelected( org.eclipse.swt.events.SelectionEvent e) {
		 * YRCPlatformUI
		 * .fireAction("com.xpedx.sterling.rcp.pca.customerprofilerule.action.XPXUpdateCustomerProfileInfoAction"); }
		 * });
		 */
	}


	private void createHeaderPnl(String headerTitle , int align){

		pnlSearchCriteriaTitle = new Composite(pnlCustomerProfileInfo, SWT.NONE);
		pnlSearchCriteriaTitle.setBackgroundMode(SWT.INHERIT_NONE);
		pnlSearchCriteriaTitle.setData(YRCConstants.YRC_CONTROL_NAME, "pnlSearchCriteriaTitle");
		GridData pnlSearchCriteriaTitlelayoutData = new GridData();
		pnlSearchCriteriaTitlelayoutData.grabExcessHorizontalSpace = true;
		pnlSearchCriteriaTitlelayoutData.horizontalSpan=6;
		pnlSearchCriteriaTitle.setLayoutData(pnlSearchCriteriaTitlelayoutData);
		pnlSearchCriteriaTitle.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "PanelHeader");
		GridLayout pnlSearchCriteriaTitlelayout = new GridLayout(2, true);
		pnlSearchCriteriaTitlelayout.horizontalSpacing = 2;
		pnlSearchCriteriaTitlelayout.verticalSpacing = 2;
		pnlSearchCriteriaTitlelayout.marginHeight = 2;
		pnlSearchCriteriaTitlelayout.marginWidth = 2;
		pnlSearchCriteriaTitlelayout.numColumns=6;
		pnlSearchCriteriaTitle.setLayout(pnlSearchCriteriaTitlelayout);

		lblSearchCriteriaTitle = new Label(pnlSearchCriteriaTitle, align);
		GridData gridData = new GridData();
		gridData.horizontalSpan=6;
		gridData.horizontalAlignment =align;
		gridData.verticalAlignment = SWT.TOP;
		gridData.grabExcessHorizontalSpace = true;
		gridData.horizontalIndent = 3;
		gridData.widthHint = 1000;	
		lblSearchCriteriaTitle.setLayoutData(gridData);
		lblSearchCriteriaTitle.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "PanelHeader");
		lblSearchCriteriaTitle.setText(headerTitle);

	}
	public void createGeneralInfoComposite() {


		// TODO Auto-generated method stub
		GridData gridData1 = new GridData();
		gridData1.horizontalAlignment = SWT.END;
		// gridData9.grabExcessHorizontalSpace = true;
		//gridData1.horizontalIndent = 30;
		gridData1.verticalAlignment = 2;
		gridData1.widthHint = 30;
		gridData1.horizontalSpan=1;		

		GridData gridData2 = new GridData();
		gridData2.horizontalAlignment = SWT.BEGINNING;
		gridData2.grabExcessHorizontalSpace = true;
//		gridData2.horizontalIndent = 80;
		gridData2.verticalAlignment = 2;
		gridData2.widthHint = 300;
		gridData2.horizontalSpan=2;

		GridData gridData3 = new GridData();
		gridData3.horizontalAlignment = SWT.BEGINNING;
		gridData3.grabExcessHorizontalSpace = true;
		gridData3.verticalAlignment = 2;
		gridData3.widthHint = 300;
		gridData3.horizontalSpan=3;

		addTab(gridData1,"dummyECSR");
		lblECSR = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblECSR.setText("eCSR");
		lblECSR.setLayoutData(gridData2);
		lblECSR.setData("name", "lblECSR");
		comboECSR = new Combo(pnlCustomerProfileInfo, 8);
		comboECSR.setLayoutData(gridData3);
		comboECSR.setTextLimit(50);
		comboECSR.setData("name", "comboECSR");
		addTab(gridData1,"dummyECSR2");
		lblECSR2 = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblECSR2.setText("eCSR2");
		lblECSR2.setLayoutData(gridData2);
		lblECSR2.setData("name", "lblECSR2");
		comboECSR2 = new Combo(pnlCustomerProfileInfo, 8);
		comboECSR2.setLayoutData(gridData3);
		comboECSR2.setTextLimit(50);
		comboECSR2.setData("name", "comboECSR2");		
		addTab(gridData1,"dummyCustomerDivision");

		lblCustomerDivision = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblCustomerDivision.setText("Company");
		lblCustomerDivision.setLayoutData(gridData2);
		lblCustomerDivision.setData("name", "lblCustomerDivision");

		txtCustomerDivision = new Text(pnlCustomerProfileInfo, 2048);
		txtCustomerDivision.setText(getDivisionData("txtCustomerDivision"));
		txtCustomerDivision.setLayoutData(gridData3);
		txtCustomerDivision.setData("name", "txtCustomerDivision");
		addTab(gridData1,"dummyShipFromBranch");
		lblShipFromBranch = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblShipFromBranch.setText("Ship_From_Branch");
		lblShipFromBranch.setLayoutData(gridData2);
		lblShipFromBranch.setData("name", "lblShipFromBranch");
		txtShipFromBranch = new Text(pnlCustomerProfileInfo, 2048);
		txtShipFromBranch.setText(getDivisionData("txtShipFromBranch"));
		txtShipFromBranch.setLayoutData(gridData3);
		txtShipFromBranch.setData("name", "txtShipFromBranch");
		addTab(gridData1,"dummyBrandCode");
		lblBrandCode = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblBrandCode.setText("Brand_Code");
		lblBrandCode.setLayoutData(gridData2);
		lblBrandCode.setData("name", "lblBrandCode");
		txtBrandCode = new Text(pnlCustomerProfileInfo, 2048);
		txtBrandCode.setText("");
		txtBrandCode.setLayoutData(gridData3);
		txtBrandCode.setData("name", "txtBrandCode");
		addTab(gridData1,"dummyCustomerClass");
		lblCustomerClass = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblCustomerClass.setText("Customer_Class");
		lblCustomerClass.setLayoutData(gridData2);
		lblCustomerClass.setData("name", "lblCustomerClass");
		txtCustomerClass = new Text(pnlCustomerProfileInfo, 2048);
		txtCustomerClass.setText("");
		txtCustomerClass.setLayoutData(gridData3);
		txtCustomerClass.setData("name", "txtCustomerClass");
		addTab(gridData1,"dummyServiceOptmizationCode");
		lblServiceOptmizationCode = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblServiceOptmizationCode.setText("Service_Optimization_Code");
		lblServiceOptmizationCode.setLayoutData(gridData2);
		lblServiceOptmizationCode.setData("name", "lblServiceOptmizationCode");
		txtServiceOptmizationCode = new Text(pnlCustomerProfileInfo, 2048);
		txtServiceOptmizationCode.setText("");
		txtServiceOptmizationCode.setLayoutData(gridData3);
		txtServiceOptmizationCode.setData("name", "txtServiceOptmizationCode");
		addTab(gridData1,"dummyPrimarySalesRep");
		lblPrimarySalesRep = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblPrimarySalesRep.setText("Primary_Sales_Rep");
		lblPrimarySalesRep.setLayoutData(gridData2);
		lblPrimarySalesRep.setData("name", "lblPrimarySalesRep");
		txtPrimarySalesRep = new Text(pnlCustomerProfileInfo, 2048);
		txtPrimarySalesRep.setText("");
		txtPrimarySalesRep.setLayoutData(gridData3);
		txtPrimarySalesRep.setData("name", "txtPrimarySalesRep");
		addTab(gridData1,"dummySalesRep1");
		lblSalesRep1 = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblSalesRep1.setText("Sales_Rep1");
		lblSalesRep1.setLayoutData(gridData2);
		lblSalesRep1.setData("name", "lblSalesRep1");
		txtSalesRep1 = new Text(pnlCustomerProfileInfo, 2048);
		txtSalesRep1.setText("");
		txtSalesRep1.setLayoutData(gridData3);
		txtSalesRep1.setData("name", "txtSalesRep1");
		addTab(gridData1,"dummySalesRep2");
		lblSalesRep2 = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblSalesRep2.setText("Sales_Rep2");
		lblSalesRep2.setLayoutData(gridData2);
		lblSalesRep2.setData("name", "lblSalesRep2");
		txtSalesRep2 = new Text(pnlCustomerProfileInfo, 2048);
		txtSalesRep2.setText("");
		txtSalesRep2.setLayoutData(gridData3);
		txtSalesRep2.setData("name", "txtSalesRep2");
		addTab(gridData1,"dummySalesRep3");
		lblSalesRep3 = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblSalesRep3.setText("Sales_Rep3");
		lblSalesRep3.setLayoutData(gridData2);
		lblSalesRep3.setData("name", "lblSalesRep3");
		txtSalesRep3 = new Text(pnlCustomerProfileInfo, 2048);
		txtSalesRep3.setText("");
		txtSalesRep3.setLayoutData(gridData3);
		txtSalesRep3.setData("name", "txtSalesRep3");
		addTab(gridData1,"dummySalesRep4");
		lblSalesRep4 = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblSalesRep4.setText("Sales_Rep4");
		lblSalesRep4.setLayoutData(gridData2);
		lblSalesRep4.setData("name", "lblSalesRep4");
		txtSalesRep4 = new Text(pnlCustomerProfileInfo, 2048);
		txtSalesRep4.setText("");
		txtSalesRep4.setLayoutData(gridData3);
		txtSalesRep4.setData("name", "txtSalesRep4");
		addTab(gridData1,"dummyNAICSCode");
		lblNAICSCode = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblNAICSCode.setText("NAICS_Code");
		lblNAICSCode.setLayoutData(gridData2);
		lblNAICSCode.setData("name", "lblNAICSCode");
		txtNAICSCode = new Text(pnlCustomerProfileInfo, 2048);
		txtNAICSCode.setText("");
		txtNAICSCode.setLayoutData(gridData3);
		txtNAICSCode.setData("name", "txtNAICSCode");
		addTab(gridData1,"NAICSName");
		lblNAICSName = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblNAICSName.setText("NAICS_Name");
		lblNAICSName.setLayoutData(gridData2);
		lblNAICSName.setData("name", "lblNAICSName");
		txtNAICSName = new Text(pnlCustomerProfileInfo, 2048);
		txtNAICSName.setText("");
		txtNAICSName.setLayoutData(gridData3);
		txtNAICSName.setData("name", "txtNAICSName");
		addTab(gridData1,"dummyInvoiceDistMethod");
		lblInvoiceDistMethod = new Label(pnlCustomerProfileInfo, SWT.NONE);
		lblInvoiceDistMethod.setText("Invoice_Dist_Method");
		lblInvoiceDistMethod.setLayoutData(gridData2);
		lblInvoiceDistMethod.setData("name", "lblInvoiceDistMethod");
		txtInvoiceDistMethod = new Text(pnlCustomerProfileInfo, 2048);
		txtInvoiceDistMethod.setText("");
		txtInvoiceDistMethod.setLayoutData(gridData3);
		txtInvoiceDistMethod.setTextLimit(25);
		txtInvoiceDistMethod.setData("name", "txtInvoiceDistMethod");		
	}


	private String getDivisionData(String controlName) {
		String divisionReturn="";
		String divisionReturntmp="";
		String divisioncode="";
		String environmentVariable="";
		Element eleCustomer = parentObj.getBehavior().getLocalModel("XPXCustomerIn");
		if("txtShipFromBranch".equals(controlName)){

			divisioncode = YRCXmlUtils.getAttributeValue(eleCustomer, "/CustomerList/Customer/Extn/@ExtnShipFromBranch");
			environmentVariable=YRCXmlUtils.getAttributeValue(eleCustomer, "/CustomerList/Customer/Extn/@ExtnEnvironmentCode");
			String divisionCode1=divisioncode+"_"+environmentVariable;
			divisionReturntmp=XPXUtils.divisionMap.get(divisionCode1);
//			divisionReturn=divisionReturntmp+"("+divisionCode1+")";
			divisionReturn=YRCPlatformUI.getFormattedString("DisplayDivisionContactKey", new String[]{divisionReturntmp, divisionCode1});
		}
		else if("txtCustomerDivision".equals(controlName)){  //updated code for JIRA 4192 to show only division number
			divisioncode = YRCXmlUtils.getAttributeValue(eleCustomer, "/CustomerList/Customer/Extn/@ExtnCustomerDivision");
			environmentVariable=YRCXmlUtils.getAttributeValue(eleCustomer, "/CustomerList/Customer/Extn/@ExtnEnvironmentCode");
			//String divisionCode1=divisioncode+"_"+environmentVariable;
			String divisionCode1=divisioncode;
			//divisionReturntmp=XPXUtils.divisionMap.get(divisionCode1);
			divisionReturn = divisionCode1;
			//divisionReturn=YRCPlatformUI.getFormattedString("DisplayDivisionContactKey", new String[]{divisionReturntmp, divisionCode1});
//			divisionReturn=divisionReturntmp+"("+divisionCode1+")";
		}

		if(divisionReturntmp==null){
			divisionReturn=divisioncode;
		}
		return divisionReturn;
	}

	private void setBindingForComponents() {
		YRCStyledTextBindingData stbd = null;
		YRCTextBindingData tbd = null;
		YRCComboBindingData cbd = null;
		YRCLabelBindingData lblbd = null;
		YRCButtonBindingData chkBoxBindingData = null;
		YRCLinkBindingData lbd = null;

		chkBoxBindingData = new YRCButtonBindingData();
		chkBoxBindingData.setCheckedBinding("Y");
		chkBoxBindingData.setUnCheckedBinding("N");
		chkBoxBindingData
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnSampleRequestFlag");
		chkBoxBindingData
		.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnSampleRequestFlag");
		chkBoxBindingData.setName("chkCanRequestSample");
		chkCanRequestSample.setData("YRCButtonBindingDefination",
				chkBoxBindingData);


		chkBoxBindingData = new YRCButtonBindingData();
		chkBoxBindingData.setCheckedBinding("Y");
		chkBoxBindingData.setUnCheckedBinding("N");
		chkBoxBindingData
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnCustLinePONoFlag");
		chkBoxBindingData
		.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnCustLinePONoFlag");
		chkBoxBindingData.setName("chkCustomerLinePONumber");
		chkCustomerLinePONumber.setData("YRCButtonBindingDefination",
				chkBoxBindingData);


//		tbd = new YRCTextBindingData();
//		tbd
//		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnCustEmailAddress");
//		tbd
//		.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnCustEmailAddress");
//		// tbd.setDataType("Quantity");
//		tbd.setName("txtCustomerEmailAddress");
//		txtCustomerEmailAddress.setData(
//		YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnCustomerStoreNumber");
		tbd.setName("txtLocationId");
		txtLocationId.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd.setTargetBinding("XPXCustomerOut:/Customer/CustomerAdditionalAddressList/CustomerAdditionalAddress/PersonInfo/@AddressLine1");
		tbd.setName("txtAddressLine1");
		txtAddressLine1.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd.setTargetBinding("XPXCustomerOut:/Customer/CustomerAdditionalAddressList/CustomerAdditionalAddress/PersonInfo/@AddressLine2");
		tbd.setName("txtAddressLine2");
		txtAddressLine2.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd.setTargetBinding("XPXCustomerOut:/Customer/CustomerAdditionalAddressList/CustomerAdditionalAddress/PersonInfo/@AddressLine3");
		tbd.setName("txtAddressLine3");
		txtAddressLine3.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);


		tbd = new YRCTextBindingData();
		tbd.setTargetBinding("XPXCustomerOut:/Customer/CustomerAdditionalAddressList/CustomerAdditionalAddress/PersonInfo/@City");
		tbd.setName("txtCity");
		txtCity.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd.setTargetBinding("XPXCustomerOut:/Customer/CustomerAdditionalAddressList/CustomerAdditionalAddress/PersonInfo/@State");
		tbd.setName("txtState");
		txtState.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd.setTargetBinding("XPXCustomerOut:/Customer/CustomerAdditionalAddressList/CustomerAdditionalAddress/PersonInfo/@ZipCode");
		tbd.setName("txtPostalCode");
		txtPostalCode.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd.setTargetBinding("XPXCustomerOut:/Customer/CustomerAdditionalAddressList/CustomerAdditionalAddress/PersonInfo/Extn/@ExtnZip4");
		tbd.setName("txtZip");
		txtZip.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);		

		tbd = new YRCTextBindingData();
		tbd.setTargetBinding("XPXCustomerOut:/Customer/CustomerAdditionalAddressList/CustomerAdditionalAddress/PersonInfo/@Country");
		tbd.setName("txtCountryCode");
		txtCountryCode.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnInvoiceDistMethod");
		tbd.setName("txtInvoiceDistMethod");
		txtInvoiceDistMethod.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION,
				tbd);


		chkBoxBindingData = new YRCButtonBindingData();
		chkBoxBindingData.setCheckedBinding("Y");
		chkBoxBindingData.setUnCheckedBinding("N");
		chkBoxBindingData
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnECSR1EmailConfirmFlag");
		chkBoxBindingData
		.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnECSR1EmailConfirmFlag");
		chkBoxBindingData.setName("chkCsr1EmailConfirmationFlag");
		chkCsr1EmailConfirmationFlag.setData("YRCButtonBindingDefination",
				chkBoxBindingData);

		chkBoxBindingData = new YRCButtonBindingData();
		chkBoxBindingData.setCheckedBinding("Y");
		chkBoxBindingData.setUnCheckedBinding("N");
		chkBoxBindingData
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnECSR2EmailConfirmFlag");
		chkBoxBindingData
		.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnECSR2EmailConfirmFlag");
		chkBoxBindingData.setName("chkCsr2EmailConfirmationFlag");
		chkCsr2EmailConfirmationFlag.setData("YRCButtonBindingDefination",
				chkBoxBindingData);

		chkBoxBindingData = new YRCButtonBindingData();
		chkBoxBindingData.setCheckedBinding("Y");
		chkBoxBindingData.setUnCheckedBinding("N");
		chkBoxBindingData
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnSalesRepEmailConfirmFlag");
		chkBoxBindingData
		.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnSalesRepEmailConfirmFlag");
		chkBoxBindingData.setName("chkSalesRepEmailConfirmationFlag");
		chkSalesRepEmailConfirmationFlag.setData("YRCButtonBindingDefination",
				chkBoxBindingData);

		// eCSR to be done
		cbd = new YRCComboBindingData();
		cbd.setCodeBinding("@UserKey");
		cbd.setDescriptionBinding("@Loginid");
		cbd.setListBinding("XPXGetUserList:/UserList/User");
		cbd
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnECSR1Key");
		cbd.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnECSR1Key");
		cbd.setName("comboECSR");
		comboECSR.setData(YRCConstants.YRC_COMBO_BINDING_DEFINATION, cbd);

		cbd = new YRCComboBindingData();
		cbd.setCodeBinding("@UserKey");
		cbd.setDescriptionBinding("@Loginid");
		cbd.setListBinding("XPXGetUserList:/UserList/User");
		cbd
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnECSR2Key");
		cbd.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnECSR2Key");
		cbd.setName("comboECSR2");
		comboECSR2.setData(YRCConstants.YRC_COMBO_BINDING_DEFINATION, cbd);

		cbd = new YRCComboBindingData();
		cbd.setCodeBinding("@Code");
		cbd.setDescriptionBinding("@Description");
		cbd.setListBinding("XPXUseSKUList:/UseSKUList/UseSKU");
		cbd.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnUseCustSKU");
		cbd.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnUseCustSKU");
		cbd.setName("comboSecondItemDisplay");
		comboSecondItemDisplay.setData(YRCConstants.YRC_COMBO_BINDING_DEFINATION, cbd);

		tbd = new YRCTextBindingData();
		tbd
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnMaxOrderAmount");
		tbd
		.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnMaxOrderAmount");
		tbd.setDataType("Price");
		tbd.setName("txtMaxOrderAmount");
		txtMaxOrderAmount
		.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnMinOrderAmount");
		tbd
		.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnMinOrderAmount");
		tbd.setDataType("Price");
		tbd.setName("txtMinOrderAmount");
		txtMinOrderAmount
		.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);


		chkBoxBindingData = new YRCButtonBindingData();
		chkBoxBindingData.setCheckedBinding("Y");
		chkBoxBindingData.setUnCheckedBinding("N");
		chkBoxBindingData
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnViewPricesFlag");
		chkBoxBindingData
		.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnViewPricesFlag");
		chkBoxBindingData.setName("chkViewPriceFlag");
		chkViewPriceFlag.setData("YRCButtonBindingDefination",
				chkBoxBindingData);

		chkBoxBindingData = new YRCButtonBindingData();
		chkBoxBindingData.setCheckedBinding("Y");
		chkBoxBindingData.setUnCheckedBinding("N");
		chkBoxBindingData
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnCanOrderFlag");
		chkBoxBindingData
		.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnCanOrderFlag");
		chkBoxBindingData.setName("chkCanOrder");
		chkCanOrder.setData("YRCButtonBindingDefination", chkBoxBindingData);

		chkBoxBindingData = new YRCButtonBindingData();
		chkBoxBindingData.setCheckedBinding("Y");
		chkBoxBindingData.setUnCheckedBinding("N");
		chkBoxBindingData
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnCanViewInvFlag");
		chkBoxBindingData
		.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnCanViewInvFlag");
		chkBoxBindingData.setName("chkViewInventory");
		chkViewInventory.setData("YRCButtonBindingDefination",
				chkBoxBindingData);


		chkBoxBindingData = new YRCButtonBindingData();
		chkBoxBindingData.setCheckedBinding("Y");
		chkBoxBindingData.setUnCheckedBinding("N");
		chkBoxBindingData
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnUseOrderMulUOMFlag");
		chkBoxBindingData
		.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnUseOrderMulUOMFlag");
		chkBoxBindingData.setName("chkUseOrderMultiple");
		chkUseOrderMultiple.setData("YRCButtonBindingDefination",
				chkBoxBindingData);

		chkBoxBindingData = new YRCButtonBindingData();
		chkBoxBindingData.setCheckedBinding("Y");
		chkBoxBindingData.setUnCheckedBinding("N");
		chkBoxBindingData
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnPreviewInvoicesFlag");
		chkBoxBindingData
		.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnPreviewInvoicesFlag");
		chkBoxBindingData.setName("chkViewInvoices");
		chkViewInvoices.setData("YRCButtonBindingDefination",
				chkBoxBindingData);

		chkBoxBindingData = new YRCButtonBindingData();
		chkBoxBindingData.setCheckedBinding("Y");
		chkBoxBindingData.setUnCheckedBinding("N");
		chkBoxBindingData
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnCustLineAccNoFlag");
		chkBoxBindingData
		.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnCustLineAccNoFlag");
		chkBoxBindingData.setName("chkCustLineAcct");
		chkCustLineAcct.setData("YRCButtonBindingDefination",
				chkBoxBindingData);

		/*	tbd = new YRCTextBindingData();
		tbd
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnCustLineAccLbl");
		tbd
		.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnCustLineAccLbl");
		tbd.setName("txtCustLineAcct");
		txtCustLineAcct.setData(
				YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);
		 */

		if(!("C".equals(suffixType))){
			chkBoxBindingData = new YRCButtonBindingData();
			chkBoxBindingData.setCheckedBinding("Y");
			chkBoxBindingData.setUnCheckedBinding("N");
			chkBoxBindingData
			.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnCustLineField1Flag");
			chkBoxBindingData
			.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnCustLineField1Flag");
			chkBoxBindingData.setName("chkCustLineField1");
			chkCustLineField1.setData("YRCButtonBindingDefination",
					chkBoxBindingData);

			/*	tbd = new YRCTextBindingData();
			tbd
			.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnCustLineField1Label");
			tbd
			.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnCustLineField1Label");
			tbd.setName("txtCustLineField1");
			txtCustLineField1.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION,
					tbd);
			 */
			chkBoxBindingData = new YRCButtonBindingData();
			chkBoxBindingData.setCheckedBinding("Y");
			chkBoxBindingData.setUnCheckedBinding("N");
			chkBoxBindingData
			.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnCustLineField2Flag");
			chkBoxBindingData
			.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnCustLineField2Flag");
			chkBoxBindingData.setName("chkCustLineField2");
			chkCustLineField2.setData("YRCButtonBindingDefination",
					chkBoxBindingData);

			tbd = new YRCTextBindingData();
			tbd
			.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnCustLineField2Label");
			tbd
			.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnCustLineField2Label");
			tbd.setName("txtCustLineField2");
			txtCustLineField2.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION,
					tbd);

			chkBoxBindingData = new YRCButtonBindingData();
			chkBoxBindingData.setCheckedBinding("Y");
			chkBoxBindingData.setUnCheckedBinding("N");
			chkBoxBindingData
			.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnCustLineField3Flag");
			chkBoxBindingData
			.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnCustLineField3Flag");
			chkBoxBindingData.setName("chkCustLineField3");
			chkCustLineField3.setData("YRCButtonBindingDefination",
					chkBoxBindingData);

			tbd = new YRCTextBindingData();
			tbd
			.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnCustLineField3Label");
			tbd
			.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnCustLineField3Label");
			tbd.setName("txtCustLineField3");
			txtCustLineField3.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION,
					tbd);
		}
		tbd = new YRCTextBindingData();
		tbd
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnAttnName");
		tbd.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnAttnName");
		tbd.setName("txtAttentionName");
		txtAttentionName.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnPhone1");
		tbd.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnPhone1");
		// tbd.setDataType("PhoneNo");
		tbd.setName("txtPhone1");
		txtPhone1.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnPhone2");
		tbd.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnPhone2");
		tbd.setName("txtPhone2");
		txtPhone2.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnFax1");
		tbd.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnFax1");
		tbd.setName("txtFax1");
		txtFax1.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnFax2");
		tbd.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnFax2");
		tbd.setName("txtFax2");
		txtFax2.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);



		tbd = new YRCTextBindingData();
		tbd
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnSuffixType");
		tbd.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnSuffixType");
		tbd.setName("txtType");
		txtType.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);



		tbd = new YRCTextBindingData();
		tbd
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnBrandCodeName");
//		tbd.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnBrandCode");
		tbd.setName("txtBrandCode");
		txtBrandCode.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnCustomerClass");
		tbd
		.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnCustomerClass");
		tbd.setName("txtCustomerClass");
		txtCustomerClass.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnServiceOptCode");
		tbd
		.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnServiceOptCode");
		tbd.setName("txtServiceOptmizationCode");
		txtServiceOptmizationCode.setData(
				YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnCurrencyCode");
		tbd.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnCurrencyCode");
		tbd.setName("txtCurrencyCode");
		txtCurrencyCode.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnMinChargeAmount");
		tbd.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnMinChargeAmount");
		tbd.setDataType("Price");
		tbd.setName("txtSmallOrderFee");
		txtSmallOrderFee.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);


		tbd = new YRCTextBindingData();
		tbd
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnShipComplete");
		tbd.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnShipComplete");
		tbd.setName("txtShipComplete");
		txtShipComplete.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		chkBoxBindingData = new YRCButtonBindingData();
		chkBoxBindingData.setCheckedBinding("Y");
		chkBoxBindingData.setUnCheckedBinding("N");
		chkBoxBindingData
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnOrderUpdateFlag");
		chkBoxBindingData
		.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnOrderUpdateFlag");
		chkBoxBindingData.setName("chkOrderUpdateFlag");
		chkOrderUpdateFlag.setData("YRCButtonBindingDefination",
				chkBoxBindingData);

		// txtPrimarySalesRep
		tbd = new YRCTextBindingData();
		tbd
		.setSourceBinding("PrimarySalesRepList:/PrimarySalesRepList/SalesRep/@SalesRepName");
		// tbd.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnShipComplete");
		tbd.setName("txtPrimarySalesRep");
		txtPrimarySalesRep.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION,
				tbd);
		// comboSalesRep

		chkBoxBindingData = new YRCButtonBindingData();
		chkBoxBindingData.setCheckedBinding("Y");
		chkBoxBindingData.setUnCheckedBinding("N");
		chkBoxBindingData
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnShipToOverrideFlag");
		chkBoxBindingData
		.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnShipToOverrideFlag");
		chkBoxBindingData.setName("chkShipToOverrideFlag");
		chkShipToOverrideFlag.setData("YRCButtonBindingDefination",
				chkBoxBindingData);

		tbd = new YRCTextBindingData();
		tbd
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnNAICSCode");
		tbd.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnNAICSCode");
		tbd.setName("txtNAICSCode");
		txtNAICSCode.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		tbd = new YRCTextBindingData();
		tbd
		.setSourceBinding("XPXCustomerIn:/CustomerList/Customer/Extn/@ExtnNAICSName");
		tbd.setTargetBinding("XPXCustomerOut:/Customer/Extn/@ExtnNAICSName");
		tbd.setName("txtNAICSName");
		txtNAICSName.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION, tbd);

		YRCButtonBindingData bbd = new YRCButtonBindingData();
		bbd.setName("btnUpdate");
		bbd.setActionHandlerEnabled(true);
		bbd
		.setActionId("com.xpedx.sterling.rcp.pca.customerprofilerule.action.XPXUpdateCustomerProfileInfoAction");
		btnUpdate.setData(YRCConstants.YRC_BUTTON_BINDING_DEFINATION, bbd);

	}


	public void adjustScrollPnl(ScrolledComposite scrPnl, Composite scrChild,
			Composite scrParent, boolean isHScrollReqd, boolean isVScrollReqd) {

		Control childIterator[] = scrChild.getChildren();
		int noOfChildren = childIterator.length;
		int HEIGHT = 5;
		int WIDTH = 5;
		int selectedHeight = 0;
		int selectedPanelHeight = 0;
		for (int k = 0; k < noOfChildren; k++) {
			int boundHeight = childIterator[k].getBounds().height;
			int boundWidth = childIterator[k].getBounds().width;
			if (isVScrollReqd) {

				HEIGHT += 10;
				if (WIDTH < boundWidth)
					WIDTH = boundWidth;
			}
			if (!isHScrollReqd)
				continue;
			WIDTH += boundWidth + 5;
			if (HEIGHT < boundHeight)
				HEIGHT = boundHeight;
		}
		scrPnl.setMinSize(1000, HEIGHT+200);
		// scrPnl.setMinSize(1000, 1050);
		if (isVScrollReqd
				&& (selectedHeight < scrPnl.getOrigin().y || selectedHeight
						+ selectedPanelHeight > scrPnl.getSize().y
						+ scrPnl.getOrigin().y))
			scrPnl.setOrigin(0, selectedHeight);
		scrParent.layout(true, true);
	}

	public Object getInput() {
		Object inObject = null;
		org.eclipse.ui.part.WorkbenchPart currentPart = YRCDesktopUI
		.getCurrentPart();
		inObject = ((YRCEditorPart) currentPart).getEditorInput();
		return inObject;
	}

	public void showRootPanel(boolean show) {
		pnlRoot.setVisible(show);
	}

	public void clearPage() {

		Control headerIterator[] = pnlPrimaryInformation.getChildren();
		int noOfChildren = headerIterator.length;
		for (int k = 0; k < noOfChildren; k++) {
			Composite childpnl = (Composite) headerIterator[k];
			childpnl.dispose();
		}
		// System.out.println("Clear Lines.");
	}

	public IYRCPanelHolder getPanelHolder() {
		// TODO Complete getPanelHolder
		return null;
	}

	public String getHelpId() {
		// TODO Complete getHelpId
		return null;
	}

	/* Added */
	public YRCWizardBehavior getWizardBehavior() {
		return wizBehavior;
	}

	/* Added */
	public void setWizBehavior(YRCWizardBehavior wizBehavior) {
		this.wizBehavior = wizBehavior;
	}

	public CustomerProfileInfoPanelBehavior getPageBehavior() {
		return myBehavior;
	}

	private void updateNonBindedComponents() {
		setControlsEnabled(readOnlyFields(), false);

	}

	/**
	 * This method validates the user authorization
	 * to update the screen controls
	 */	
	private void checkUserPermissions() {
		if (!YRCPlatformUI.hasPermission(XPXConstants.RES_ID_MANAGE_CUSTOMER)) {
			setControlsEnabled(allControlList(), false);
		} else {
			if (!YRCPlatformUI
					.hasPermission(XPXConstants.RES_ID_MANAGE_CUSTOMER_OR_USER_INTEG_ATTR)) {

				setControlsEnabled(getIntegrationDataControls(), false);
			}
		}
	}

	private Control[] readOnlyFields() {
		return new Control[] { txtCustomerDivision, txtLegacyCustomerNumber,
				txtType, txtSuffix, txtCustomerOrderBranch,
				txtShipFromBranch, txtCustomerStatus, txtCustomerName,
				txtBrandCode,txtInvoiceDistMethod, txtCustomerClass, txtServiceOptmizationCode,
				txtCurrencyCode, txtSAPNumber, txtMasterSAPNumber,
				chkCanRequestSample, txtShipComplete, chkOrderUpdateFlag, txtPrimarySalesRep,
				txtNAICSCode, txtNAICSName, chkShipToOverrideFlag, txtPhone1,
				txtFax1, txtSalesRep1, txtSalesRep2, txtSalesRep3,
				txtSalesRep4, txtSAPName, txtMasterSAPName };
	}

	private Control[] readOnlyforSAPChilds(){
		return new Control[] {
				txtAddressLine1,txtAddressLine2,txtAttentionName,
				txtAddressLine3,txtCity,
				txtState,txtPostalCode,
				txtZip,txtCountryCode,txtLocationId
		};
	}

	private Control[] enableFieldsForMSAP(){
		return new Control[] {
				txtPhone1,txtFax1
		};
	}




	private Control[] getIntegrationDataControls() {
		System.out.println("inside getIntegrationDataControls method");
		return new Control[] { txtWmLocationId };
	}
	/** function used to create list for controls **/
	private void CreateListforControls(){
		HideControlsList=new ArrayList<Control>();
		if("MC".equalsIgnoreCase(suffixType)){

			Control[]elements= {lblECSR,comboECSR,lblECSR2,comboECSR2,lblSalesRep1,txtSalesRep1,lblSalesRep2,txtSalesRep2,
					lblSalesRep3,txtSalesRep3,lblSalesRep4,txtSalesRep4,lblNAICSCode,txtNAICSCode,lblNAICSName,txtNAICSName,
					lblInvoiceDistMethod,txtInvoiceDistMethod,fillerLabelMap.get("dummyInvoiceDistMethod"),
					chkCustLineAcct,lblCustLineAcct,txtCustLineAcctMsg,txtCustomerLinePONumberMsg,lblCustomerFieldMsg1,lblCustomerFieldMsg2,lblCustomerFieldMsg3,lblCustomerFieldMsg4,lblCustomerFieldMsg5,chkCustLineField1,lblCustLineField1,txtCustLineField1,
					chkCustLineField2,lblCustLineField2,txtCustLineField2,chkCustLineField3,lblCustLineField3,txtCustLineField3,
					lblCustomerEmailAddress,txtCustomerEmailAddress,lblInvoiceEmailId,txtInvoiceEmailId,chkConfirmation,lblConfirmation,
					txtConfirmation,txtConfirmation,chkCancelled,lblCancelled,txtCancelled,chkBackorder,lblBackorder,txtBackorder,chkInvoiced,lblInvoiced,txtInvoiced
					,chkCsr1EmailConfirmationFlag,lblCsr1EmailConfirmationFlag,chkCsr2EmailConfirmationFlag,lblCsr2EmailConfirmationFlag,
					lblMaxOrderAmount,txtMaxOrderAmount,stxtMaxOrderCurrency,lblMinOrderAmount,txtMinOrderAmount,stxtMinOrderCurrency,lblSmallOrderFee,fillerLabelMap.get("dummySmallOrderFee"),txtSmallOrderFee,stxtSmallOrderCurrency
					,fillerLabelMap.get("dummyECSR"),fillerLabelMap.get("dummyECSR2"),fillerLabelMap.get("dummyPrimarySalesRep"),
					fillerLabelMap.get("dummySalesRep1"),fillerLabelMap.get("dummySalesRep2"),fillerLabelMap.get("dummySalesRep3"),fillerLabelMap.get("dummySalesRep4")
					,fillerLabelMap.get("NAICSName"),fillerLabelMap.get("dummyNAICSCode"),
					fillerLabelMap.get("dummyShipComplete"),lblShipComplete,txtShipComplete,
					lblLocationId,txtLocationId,fillerLabelMap.get("dummyLocationId")
					,chkCanRequestSample,lblCanRequestSample,fillerLabelMap.get("dummyCanRequestSample")
					,lblOrderUpdateFlag, chkOrderUpdateFlag,fillerLabelMap.get("dummyOrderUpdateFlag"),
					chkShipToOverrideFlag,lblShipToOverrideFlag,fillerLabelMap.get("dummyShipToOverrideFlag"),
					fillerLabelMap.get("dummyCurrencyCode"),lblCurrencyCode,txtCurrencyCode
					,lblCustomerStatus,txtCustomerStatus,fillerLabelMap.get("dummyCustomerStatus"),lblShipFromBranch, txtShipFromBranch,fillerLabelMap.get("dummyShipFromBranch")
					,lblBrandCode, txtBrandCode,fillerLabelMap.get("dummyBrandCode"),
					lblCustomerClass, txtCustomerClass,fillerLabelMap.get("dummyCustomerClass"),
					lblServiceOptmizationCode, txtServiceOptmizationCode,fillerLabelMap.get("dummyServiceOptmizationCode"),
					lblCustomerDivision, txtCustomerDivision,fillerLabelMap.get("dummyCustomerDivision"),
					lblPrimarySalesRep,txtPrimarySalesRep,fillerLabelMap.get("dummyPrimarySalesRep"),lblCustomerLinePONumber,chkCustomerLinePONumber,fillerLabelMap.get("dummyCustomerLinePONumber")
			};
			HideControlsList=Arrays.asList(elements);

		}
		else if("C".equalsIgnoreCase(suffixType)){
			Control[]elements= {
					lblECSR,comboECSR,lblECSR2,comboECSR2,lblSalesRep1,txtSalesRep1,lblSalesRep2,txtSalesRep2,
					lblSalesRep3,txtSalesRep3,lblSalesRep4,txtSalesRep4,lblNAICSCode,txtNAICSCode,lblNAICSName,txtNAICSName,
					lblInvoiceDistMethod,txtInvoiceDistMethod,fillerLabelMap.get("dummyInvoiceDistMethod"),
					fillerLabelMap.get("dummyECSR"),fillerLabelMap.get("dummyECSR2"),fillerLabelMap.get("dummyPrimarySalesRep"),
					fillerLabelMap.get("dummySalesRep1"),fillerLabelMap.get("dummySalesRep2"),fillerLabelMap.get("dummySalesRep3"),fillerLabelMap.get("dummySalesRep4")
					,fillerLabelMap.get("NAICSName"),fillerLabelMap.get("dummyNAICSCode"),lblLocationId,txtLocationId,fillerLabelMap.get("dummyLocationId")
					,chkCanRequestSample,lblCanRequestSample,fillerLabelMap.get("dummyCanRequestSample"),chkViewPriceFlag,lblViewPriceFlag,fillerLabelMap.get("dummyViewPriceFlag"),chkCanOrder,lblCanOrder,fillerLabelMap.get("dummyCanOrder"),
					chkViewInventory,lblViewInventory,fillerLabelMap.get("dummyViewInventory"),chkUseOrderMultiple,lblUseOrderMultiple,fillerLabelMap.get("dummyUseOrderMultiple"),chkViewInvoices,lblViewInvoices,fillerLabelMap.get("dummyViewInvoices"),
					fillerLabelMap.get("dummySecondItemDisplay"),lblSecondItemDisplay,comboSecondItemDisplay,
					chkCsr1EmailConfirmationFlag,lblCsr1EmailConfirmationFlag,chkCsr2EmailConfirmationFlag,lblCsr2EmailConfirmationFlag,
					fillerLabelMap.get("dummyCsr1EmailConfirmationFlag"),fillerLabelMap.get("dummyCsr2EmailConfirmationFlag"),chkSalesRepEmailConfirmationFlag,lblSalesRepEmailConfirmationFlag,fillerLabelMap.get("dummySalesRepEmailConfirmationFlag"),
					fillerLabelMap.get("dummyMaxOrderAmount"),lblMaxOrderAmount,stxtMaxOrderCurrency,txtMaxOrderAmount,fillerLabelMap.get("dummyMinOrderAmount"),lblMinOrderAmount,txtMinOrderAmount,stxtMinOrderCurrency,lblSmallOrderFee,txtSmallOrderFee,stxtSmallOrderCurrency,fillerLabelMap.get("dummySmallOrderFee")
					,lblCustomerStatus,txtCustomerStatus,fillerLabelMap.get("dummyCustomerStatus"),lblShipFromBranch, txtShipFromBranch,fillerLabelMap.get("dummyShipFromBranch")
					,lblBrandCode, txtBrandCode,fillerLabelMap.get("dummyBrandCode"),
					lblCustomerClass, txtCustomerClass,fillerLabelMap.get("dummyCustomerClass"),
					lblServiceOptmizationCode, txtServiceOptmizationCode,fillerLabelMap.get("dummyServiceOptmizationCode"),
					lblCustomerDivision, txtCustomerDivision,fillerLabelMap.get("dummyCustomerDivision"),
					lblPrimarySalesRep,txtPrimarySalesRep,fillerLabelMap.get("dummyPrimarySalesRep")
					,lblShipComplete, txtShipComplete,fillerLabelMap.get("dummyShipComplete"), 
					lblShipToOverrideFlag,chkShipToOverrideFlag,fillerLabelMap.get("dummyShipToOverrideFlag"),
					lblOrderUpdateFlag,chkOrderUpdateFlag,fillerLabelMap.get("dummyOrderUpdateFlag"),
					lblCurrencyCode, txtCurrencyCode,fillerLabelMap.get("dummyCurrencyCode")

			};
			HideControlsList=Arrays.asList(elements);
		}
		else if("S".equalsIgnoreCase(suffixType)){
			Control[]elements= {
					fillerLabelMap.get("dummySecondItemDisplay"),lblSecondItemDisplay,comboSecondItemDisplay
					,chkCustLineAcct,lblCustLineAcct,txtCustLineAcctMsg,txtCustomerLinePONumberMsg,lblCustomerFieldMsg1,lblCustomerFieldMsg2,lblCustomerFieldMsg3,lblCustomerFieldMsg4,lblCustomerFieldMsg5,chkCustLineField1,lblCustLineField1,txtCustLineField1,
					chkCustLineField2,lblCustLineField2,txtCustLineField2,chkCustLineField3,lblCustLineField3,txtCustLineField3,lblECSR,comboECSR,lblECSR2,comboECSR2,
					fillerLabelMap.get("dummyECSR"),fillerLabelMap.get("dummyECSR2"),lblInvoiceDistMethod,txtInvoiceDistMethod,fillerLabelMap.get("dummyInvoiceDistMethod")
					,chkUseOrderMultiple,lblUseOrderMultiple,fillerLabelMap.get("dummyUseOrderMultiple"),chkCanRequestSample,lblCanRequestSample,fillerLabelMap.get("dummyCanRequestSample")
					,chkCsr1EmailConfirmationFlag,lblCsr1EmailConfirmationFlag,chkCsr2EmailConfirmationFlag,lblCsr2EmailConfirmationFlag,
					fillerLabelMap.get("dummyCsr1EmailConfirmationFlag"),fillerLabelMap.get("dummyCsr2EmailConfirmationFlag"),chkSalesRepEmailConfirmationFlag,lblSalesRepEmailConfirmationFlag,fillerLabelMap.get("dummySalesRepEmailConfirmationFlag"),
					fillerLabelMap.get("dummyMaxOrderAmount"),lblMaxOrderAmount,txtMaxOrderAmount,stxtMaxOrderCurrency,fillerLabelMap.get("dummyMinOrderAmount"),lblMinOrderAmount,txtMinOrderAmount,stxtMinOrderCurrency,lblSmallOrderFee,txtSmallOrderFee,stxtSmallOrderCurrency,fillerLabelMap.get("dummySmallOrderFee")
					,chkViewPriceFlag,lblViewPriceFlag,fillerLabelMap.get("dummyViewPriceFlag"),chkCanOrder,lblCanOrder,fillerLabelMap.get("dummyCanOrder"),chkViewInventory,
					lblViewInventory,fillerLabelMap.get("dummyViewInventory"),fillerLabelMap.get("chkUseOrderMultiple"),lblUseOrderMultiple,fillerLabelMap.get("dummyUseOrderMultiple")
					,chkViewInvoices,lblViewInvoices,fillerLabelMap.get("dummyViewInvoices"),lblCustomerLinePONumber,chkCustomerLinePONumber,fillerLabelMap.get("dummyCustomerLinePONumber")

			};
			HideControlsList=Arrays.asList(elements);

		}
		else if("B".equalsIgnoreCase(suffixType)){
			Control[]elements= {chkCustLineAcct,lblCustLineAcct,txtCustLineAcctMsg,txtCustomerLinePONumberMsg,lblCustomerFieldMsg1,lblCustomerFieldMsg2,lblCustomerFieldMsg3,lblCustomerFieldMsg4,lblCustomerFieldMsg5,chkCustLineField1,lblCustLineField1,txtCustLineField1,
					chkCustLineField2,lblCustLineField2,txtCustLineField2,chkCustLineField3,lblCustLineField3,txtCustLineField3,
					chkViewPriceFlag,lblViewPriceFlag,fillerLabelMap.get("dummyViewPriceFlag"),chkCanOrder,lblCanOrder,chkViewInventory,lblViewInventory,fillerLabelMap.get("dummyViewInventory"),
					chkUseOrderMultiple,lblUseOrderMultiple,fillerLabelMap.get("dummyUseOrderMultiple"),chkViewInvoices,lblViewInvoices,fillerLabelMap.get("dummyViewInvoices"),fillerLabelMap.get("dummySecondItemDisplay"),lblSecondItemDisplay,comboSecondItemDisplay,
					lblLocationId,txtLocationId,fillerLabelMap.get("dummyLocationId"),chkSalesRepEmailConfirmationFlag,lblSalesRepEmailConfirmationFlag,fillerLabelMap.get("dummySalesRepEmailConfirmationFlag")
					,lblCustomerLinePONumber,chkCustomerLinePONumber,fillerLabelMap.get("dummyCustomerLinePONumber")
			};
			HideControlsList=Arrays.asList(elements);

		}
	}
	/**function is used to create a list of all available controls **/ 
	private Control[] allControlList() {
		return new Control[] {lblECSR,comboECSR,lblECSR2,comboECSR2,lblSalesRep1,txtSalesRep1,lblSalesRep2,txtSalesRep2,
				lblSalesRep3,txtSalesRep3,lblSalesRep4,txtSalesRep4,lblNAICSCode,txtNAICSCode,lblNAICSName,txtNAICSName,
				lblInvoiceDistMethod,txtInvoiceDistMethod,
				chkCustLineAcct,lblCustLineAcct,txtCustLineAcctMsg,txtCustomerLinePONumberMsg,lblCustomerFieldMsg1,lblCustomerFieldMsg2,lblCustomerFieldMsg3,lblCustomerFieldMsg4,lblCustomerFieldMsg5,chkCustLineField1,lblCustLineField1,txtCustLineField1,
				chkCustLineField2,lblCustLineField2,txtCustLineField2,chkCustLineField3,lblCustLineField3,txtCustLineField3,
				lblCustomerEmailAddress,txtCustomerEmailAddress,lblInvoiceEmailId,txtInvoiceEmailId,chkConfirmation,lblConfirmation,
				txtConfirmation,txtConfirmation,chkCancelled,lblCancelled,txtCancelled,chkBackorder,lblBackorder,txtBackorder,chkInvoiced,lblInvoiced,txtInvoiced
				,chkCsr1EmailConfirmationFlag,lblCsr1EmailConfirmationFlag,chkCsr2EmailConfirmationFlag,lblCsr2EmailConfirmationFlag,chkSalesRepEmailConfirmationFlag,lblSalesRepEmailConfirmationFlag,
				lblMaxOrderAmount,txtMaxOrderAmount,stxtMaxOrderCurrency,lblMinOrderAmount,txtMinOrderAmount,stxtMinOrderCurrency,lblSmallOrderFee,txtSmallOrderFee,stxtSmallOrderCurrency,fillerLabelMap.get("dummyECSR"),fillerLabelMap.get("dummyECSR2"),
				fillerLabelMap.get("dummySalesRep1"),fillerLabelMap.get("dummySalesRep2"),fillerLabelMap.get("dummySalesRep3"),fillerLabelMap.get("dummySalesRep4")
				,fillerLabelMap.get("NAICSName"),fillerLabelMap.get("dummyNAICSCode"),fillerLabelMap.get("dummyShipComplete"),lblShipComplete,txtShipComplete,
				chkCustLineAcct,lblCustLineAcct,txtCustLineAcctMsg,txtCustomerLinePONumberMsg,lblCustomerFieldMsg1,lblCustomerFieldMsg2,lblCustomerFieldMsg3,lblCustomerFieldMsg4,lblCustomerFieldMsg5,chkCustLineField1,lblCustLineField1,txtCustLineField1,
				chkCustLineField2,lblCustLineField2,txtCustLineField2,chkCustLineField3,lblCustLineField3,txtCustLineField3,
				chkViewPriceFlag,lblViewPriceFlag,fillerLabelMap.get("dummyViewPriceFlag"),chkCanOrder,lblCanOrder,chkViewInventory,lblViewInventory,fillerLabelMap.get("dummyViewInventory"),
				chkUseOrderMultiple,lblUseOrderMultiple,fillerLabelMap.get("dummyUseOrderMultiple"),chkViewInvoices,lblViewInvoices,fillerLabelMap.get("dummyViewInvoices"),fillerLabelMap.get("dummySecondItemDisplay"),lblSecondItemDisplay,comboSecondItemDisplay
				,lblLocationId,txtLocationId,fillerLabelMap.get("dummyLocationId"),lblShipToOverrideFlag,chkShipToOverrideFlag,fillerLabelMap.get("dummyShipToOverrideFlag")
				,chkCanRequestSample,lblCanRequestSample,fillerLabelMap.get("dummyCanRequestSample")
				,lblCustomerLinePONumber,chkCustomerLinePONumber,fillerLabelMap.get("dummyCustomerLinePONumber")
				,fillerLabelMap.get("dummyCsr2EmailConfirmationFlag"),fillerLabelMap.get("dummyCsr1EmailConfirmationFlag")
				,fillerLabelMap.get("dummyCurrencyCode"),lblCurrencyCode,txtCurrencyCode,
				lblOrderUpdateFlag, chkOrderUpdateFlag,fillerLabelMap.get("dummyOrderUpdateFlag")
				,lblCustomerStatus,txtCustomerStatus,fillerLabelMap.get("dummyCustomerStatus"),
				lblShipFromBranch, txtShipFromBranch,fillerLabelMap.get("dummyShipFromBranch")
				,lblBrandCode, txtBrandCode,fillerLabelMap.get("dummyBrandCode"),
				lblCustomerClass, txtCustomerClass,fillerLabelMap.get("dummyCustomerClass"),
				lblServiceOptmizationCode, txtServiceOptmizationCode,fillerLabelMap.get("dummyServiceOptmizationCode"),
				lblCustomerDivision, txtCustomerDivision,fillerLabelMap.get("dummyCustomerDivision"),
				lblPrimarySalesRep,txtPrimarySalesRep,fillerLabelMap.get("dummyPrimarySalesRep"),btnUpdate,
				fillerLabelMap.get("dummyAddressLine1"),lblAddressLine1,txtAddressLine1,fillerLabelMap.get("dummyAddressLine2"),lblAddressLine2,txtAddressLine2,
				fillerLabelMap.get("dummyAddressLine3"),lblAddressLine3,txtAddressLine3,fillerLabelMap.get("dummyCity"),lblCity,txtCity,fillerLabelMap.get("dummyState"),lblState,txtState,
				fillerLabelMap.get("dummyPostalCode"),lblPostalCode,txtPostalCode,txtZip,fillerLabelMap.get("dummyCountryCode"),lblCountryCode,txtCountryCode,
				fillerLabelMap.get("dummyAttentionName"),lblAttentionName,txtAttentionName,fillerLabelMap.get("dummyPhone1"),lblPhone1,txtPhone1,fillerLabelMap.get("dummyPhone2"),lblPhone2,txtPhone2
				,fillerLabelMap.get("dummyFax1"),lblFax1,txtFax1,fillerLabelMap.get("dummyFax2"),lblFax2,txtFax2,
				fillerLabelMap.get("dummyCanOrder")



		};
	}

	private void setControlsEnabled(Control[] controls, boolean enabled) {
		for (Control control : controls) {
			if (null != control && !control.isDisposed())
				control.setEnabled(enabled);
		}

	}

	private void setControlsInvisible(Control[] controls, boolean enabled) {
		for (Control control : controls) {
			if (null != control) {
				control.setVisible(enabled);
				control.dispose();
			}
		}

	}

	private void updateSalesRepDetails(CustomerProfileMaintenance parentObj) {
		ArrayList<Element> SalesRepArrayList = YRCXmlUtils.getChildren(
				parentObj.getBehavior().getLocalModel("SalesRepList"),
		"SalesRep");
		String[] salesRepNames = { "", "", "", "" };
		for (int i = 0; i < SalesRepArrayList.size(); i++) {
			Element SalesRep = (Element) SalesRepArrayList.get(i);
			String salesRepName = YRCXmlUtils.getAttribute(SalesRep,
			"SalesRepName");
			if (!YRCPlatformUI.isVoid(salesRepName)) {
				salesRepNames[i] = salesRepName;
			}

		}
		Element eleCustomer = parentObj.getBehavior().getLocalModel("XPXCustomerIn");
		String suffixType = YRCXmlUtils.getAttributeValue(eleCustomer, "/CustomerList/Customer/Extn/@ExtnSuffixType");
		if(("S".equals(suffixType))||("B".equals(suffixType)) ){
			txtSalesRep1.setText(salesRepNames[0]);
			txtSalesRep2.setText(salesRepNames[1]);
			txtSalesRep3.setText(salesRepNames[2]);
			txtSalesRep4.setText(salesRepNames[3]);
		}
	}

	private void updateCustomerAddressFields(CustomerProfileMaintenance parentObj)
	{
		ArrayList<Element> customerAdditionalAddressList = YRCXmlUtils.getChildren(YRCXmlUtils.getXPathElement(parentObj.getBehavior().getLocalModel("XPXCustomerIn"), "/CustomerList/Customer/CustomerAdditionalAddressList"),"CustomerAdditionalAddress");
		if(!YRCPlatformUI.isVoid(customerAdditionalAddressList))
		{
			for(int i=0;i<customerAdditionalAddressList.size();i++)
			{
				Element customerAdditionalAddress = customerAdditionalAddressList.get(i);
				if("S".equals(myBehavior.getSuffixType()) && "Y".equals(customerAdditionalAddress.getAttribute("IsDefaultShipTo")))
				{
					if(!YRCPlatformUI.isVoid(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo")))
					{
						txtAddressLine1.setText(YRCXmlUtils.getAttribute(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo"), "AddressLine1"));
						txtAddressLine2.setText(YRCXmlUtils.getAttribute(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo"), "AddressLine2"));
						txtAddressLine3.setText(YRCXmlUtils.getAttribute(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo"), "AddressLine3"));
						txtCity.setText(YRCXmlUtils.getAttribute(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo"), "City"));
						txtState.setText(YRCXmlUtils.getAttribute(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo"), "State"));
						txtPostalCode.setText(YRCXmlUtils.getAttribute(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo"), "ZipCode"));
						if(!YRCPlatformUI.isVoid(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo/Extn")))
						{
							txtZip.setText(YRCXmlUtils.getAttribute(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo/Extn"), "ExtnZip4"));
						}
						txtCountryCode.setText(YRCXmlUtils.getAttribute(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo"), "Country"));
						setCustomerAdditionalAddressKey(customerAdditionalAddress.getAttribute("CustomerAdditionalAddressKey"));
						return;

					}

				}
				else if(!"S".equals(myBehavior.getSuffixType()) && "Y".equals(customerAdditionalAddress.getAttribute("IsDefaultBillTo")))
				{
					if(!YRCPlatformUI.isVoid(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo")))
					{
						txtAddressLine1.setText(YRCXmlUtils.getAttribute(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo"), "AddressLine1"));
						txtAddressLine2.setText(YRCXmlUtils.getAttribute(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo"), "AddressLine2"));
						txtAddressLine3.setText(YRCXmlUtils.getAttribute(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo"), "AddressLine3"));
						txtCity.setText(YRCXmlUtils.getAttribute(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo"), "City"));
						txtState.setText(YRCXmlUtils.getAttribute(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo"), "State"));
						txtPostalCode.setText(YRCXmlUtils.getAttribute(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo"), "ZipCode"));
						if(!YRCPlatformUI.isVoid(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo/Extn")))
						{
							txtZip.setText(YRCXmlUtils.getAttribute(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo/Extn"), "ExtnZip4"));
						}
						txtCountryCode.setText(YRCXmlUtils.getAttribute(YRCXmlUtils.getXPathElement(customerAdditionalAddress, "/CustomerAdditionalAddress/PersonInfo"), "Country"));
						setCustomerAdditionalAddressKey(customerAdditionalAddress.getAttribute("CustomerAdditionalAddressKey"));
						return;

					}
				}
			}
		}
	}

	public String getCustomerAdditionalAddressKey() {
		return CustomerAdditionalAddressKey;
	}

	public void setCustomerAdditionalAddressKey(String customerAdditionalAddressKey) {
		CustomerAdditionalAddressKey = customerAdditionalAddressKey;
	}
	/**function used to disable fields for ShipTo & BillTo **/
	public void disableControls(){
		//Element generalInfo = getModel("XPXCustomerIn");

		String suffixType = YRCXmlUtils.getAttributeValue(eleCustomer, "/CustomerList/Customer/Extn/@ExtnSuffixType");
		if("B".equals(suffixType) || "S".equals(suffixType)){

			setControlsEnabled(readOnlyforSAPChilds(), false);

		}
		if("MC".equals(suffixType) || "C".equals(suffixType)){
			setControlsEnabled(enableFieldsForMSAP(), true);
		}

	}

}
