/*
 * Created on Apr 14,2010
 *
 */
package com.xpedx.sterling.rcp.pca.orderlines.screen;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;

import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Table;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.xpedx.sterling.rcp.pca.ExtnAutoLoader;
import com.xpedx.sterling.rcp.pca.util.IXPXCollapsibleCompositeListener;
import com.xpedx.sterling.rcp.pca.util.XPXCacheManager;
import com.xpedx.sterling.rcp.pca.util.XPXCollapsibleCompositeHelper;
import com.xpedx.sterling.rcp.pca.util.XPXConstants;
import com.xpedx.sterling.rcp.pca.util.XPXUtils;
import com.yantra.yfc.rcp.YRCApiContext;
import com.yantra.yfc.rcp.YRCDesktopUI;
import com.yantra.yfc.rcp.YRCEditorInput;
import com.yantra.yfc.rcp.YRCPlatformUI;
import com.yantra.yfc.rcp.YRCWizardPageBehavior;
import com.yantra.yfc.rcp.YRCXmlUtils;
import com.yantra.yfc.rcp.internal.YRCApiCaller;
import com.yantra.yfc.rcp.internal.YRCScreenHandler;


/**
 * @author sdodda
 * 
 * Generated by MTCE
 */

public class OrderLinesPanelBehavior extends YRCWizardPageBehavior implements IXPXCollapsibleCompositeListener{

	private OrderLinesPanel page;
	private Element orderElementBeforeAddition;
	private Element orderLevelPAndAResponseEle;
//	private Element originalSalesOrderElement;
	private Element eleCustomerInfo;
	private Element targetOrderModel;
	private Element dashBoardListElem = null;
	private boolean isDraftOrder;
	private Element inputElement;
	private String seller;
	private String orderHeaderKey;
	private String enterpriseCode;
	private String sOrgCode;
	private String sBillToID;
	private String sContactID;
	private String sUserID;
	private String sShipToID;
	private String shipNode;
	private boolean addBlankLine;
	private boolean isFromOrderEntryWizard = false;
	private boolean readOnlyPage;
	private String shipCompleteFlag;
	private String maxOrderAmount;
	private String minOrderAmount;
	private String minChargeAmount;
	private String sMaxOrderStatus;
	private String sMinOrderStatus;
	private Object inputObject;
	private String pnaErrorValue;
	private boolean pnaErrorFlag=false;
	private int noOfProductLines = 0;
	private int noOfOtherLines = 0;
	public static final HashMap masterUOMList = new HashMap<String, String>();
	private XPXCollapsibleCompositeHelper searchCriteria;
	public Hashtable<String, String> StatusTable = new Hashtable<String, String>();
	public Hashtable<String, String> HeaderStatusTable = new Hashtable<String, String>();
	public Hashtable<String, String> PlacedOrderHeaderErrorTable=new Hashtable<String, String>();
	public Hashtable<String,String> PlacedOrderLineError=new Hashtable<String, String>();
	public ArrayList< String> errList=new ArrayList<String>();
	private boolean isfailedOrder=true;

	/**
	 * Constructor for the behavior class.
	 */
	public OrderLinesPanelBehavior(OrderLinesPanel ownerComposite, String formId, Object inputObject) {
		super(ownerComposite);
		
		YRCScreenHandler screenHandler = new YRCScreenHandler(this, ownerComposite, formId);
		setScreenHandler(screenHandler);
		ownerComposite.setData("YRCScreenHandler", screenHandler);
		setOwnerForm(ownerComposite, true);
		
		this.page = ownerComposite;
		this.inputElement = ((YRCEditorInput)((YRCEditorInput) inputObject).getInputObject()).getXml();
		this.inputObject = ((YRCEditorInput) inputObject).getInputObject();
		inputObject = this.inputObject;
		XPXCacheManager.getInstance().getRuleIDErrorCode(this);
		init();
		orderElementBeforeAddition = null;
		isDraftOrder = true;
		orderHeaderKey = YRCXmlUtils.getAttribute(this.inputElement, "OrderHeaderKey");
		this.readInput(inputObject);
		this.addBlankLine = false;
		initPage();
	}
	public OrderLinesPanelBehavior(OrderLinesPanel ownerComposite, String formId, Object inputObject,boolean addBlankLine, Element eleCustomerInfo) {
		super(ownerComposite);
		if("YCD_TASK_ORDER_ENTRY".equals(((YRCEditorInput) inputObject).getTaskName())){
			isFromOrderEntryWizard=true;
		}
		YRCScreenHandler screenHandler = new YRCScreenHandler(this, ownerComposite, formId);
		setScreenHandler(screenHandler);
		ownerComposite.setData("YRCScreenHandler", screenHandler);
		setOwnerForm(ownerComposite, true);
		//super(ownerComposite, formId, inputObject);
		this.page = ownerComposite;
		this.inputElement = ((YRCEditorInput) inputObject).getXml();
		this.inputObject = inputObject;
		if(null == this.inputElement && (((YRCEditorInput) inputObject).getInputObject()) instanceof YRCEditorInput){
			this.inputObject = (YRCEditorInput)((YRCEditorInput) inputObject).getInputObject();
			this.inputElement = ((YRCEditorInput)this.inputObject).getXml();
		}
		this.eleCustomerInfo = eleCustomerInfo;
		/*Element custExtn = YRCXmlUtils.getChildElement(eleCustomerInfo, "Extn");ExtnOrderDivision
		shipNode = !YRCPlatformUI.isVoid(custExtn.getAttribute("ExtnShipFromBranch"))?
				custExtn.getAttribute("ExtnShipFromBranch"):custExtn.getAttribute("ExtnCustOrderBranch");*/
		
		init();
		orderElementBeforeAddition = null;
		isDraftOrder = true;
		orderHeaderKey = YRCXmlUtils.getAttribute(this.inputElement, "OrderHeaderKey");
		this.readInput(this.inputObject);
		this.addBlankLine = addBlankLine;
//		initLineTypes();
		 initPage();
	}
	
	private void readInput(Object inputObject) {
		enterpriseCode = ((YRCEditorInput) inputObject).getAttributeValue("Order/@EnterpriseCode");
		sOrgCode = ((YRCEditorInput) inputObject).getAttributeValue("Order/@SellerOrganizationCode");
		seller = ((YRCEditorInput) inputObject).getAttributeValue("Order/@SellerOrganizationCode");
		sBillToID = ((YRCEditorInput) inputObject).getAttributeValue("Order/@BillToID");
		// sBillToID =
		// YRCXmlUtils.getAttribute((Element)((YRCEditorInput)page.getInput()).getInputObject(),
		// "BillToID");
		sContactID = ((YRCEditorInput) inputObject).getAttributeValue("Order/@CustomerContactID");
		sUserID = ((YRCEditorInput) inputObject).getAttributeValue("Order/@BuyerUserId");
		sShipToID = ((YRCEditorInput) inputObject).getAttributeValue("Order/@BuyerOrganizationCode");
		sMinOrderStatus = ((YRCEditorInput) inputObject).getAttributeValue("Order/@MinOrderStatus");
		sMaxOrderStatus = ((YRCEditorInput) inputObject).getAttributeValue("Order/@MaxOrderStatus");
		
	}

	/**
	 * This method initializes the behavior class.
	 */
	@Override
	public void init() {
//		System.out.println("init().....");
	}

	@Override
	public void initPage() {
		if(searchCriteria==null)
		{
			searchCriteria = new XPXCollapsibleCompositeHelper(((OrderLinesPanel)getOwnerForm()).pnlHeader, "searchCriteria");
			searchCriteria.addCollapsibleCompositeListener(this);
		}
		
		else if( searchCriteria.isCollapsed()){
			
			searchCriteria.expand();
		}
//        System.out.println("after listener090.");
		
        //Fix for performance issue - Call the LineTypeList, OrderChargesList and MasterUomList and populate in cache.
        //The remaining 2 apis - XPXGetCustomerListService,XPXGetCustomerListService are called on successful completion of the above apis.
		/*String[] apinames = {"XPXGetLineTypeList","XPXGetItemUOMMasterList","XPXGetOrderChargesList","XPXGetCustomerListService","XPXGetOrderDetailsService"};
        Document[] docInput = {
				YRCXmlUtils.createFromString("<CommonCode CallingOrganizationCode='" + YRCXmlUtils.getAttribute(this.inputElement, "EnterpriseCode") + "' CodeType='LineType'/>"),
				YRCXmlUtils.createFromString("<ItemUOMMaster CallingOrganizationCode='" + YRCXmlUtils.getAttribute(this.inputElement, "EnterpriseCode") + "'/>"),
				YRCXmlUtils.createFromString("<CommonCode CallingOrganizationCode='" + YRCXmlUtils.getAttribute(this.inputElement, "EnterpriseCode") + "' CodeType='XPXChargeType'/>"),
				YRCXmlUtils.createFromString("<Customer  CustomerID='" + sShipToID + "' OrganizationCode='" + enterpriseCode + "'/>"),
				YRCXmlUtils.createFromString("<Order OrderHeaderKey='" + YRCXmlUtils.getAttribute(this.inputElement, "OrderHeaderKey") + "' />")
		};*/
        XPXCacheManager.getInstance().getUomList(YRCXmlUtils.getAttribute(this.inputElement, "EnterpriseCode"), this);
        XPXCacheManager.getInstance().getLineTypeList(YRCXmlUtils.getAttribute(this.inputElement, "EnterpriseCode"), this);
        XPXCacheManager.getInstance().getOrderChargesList(YRCXmlUtils.getAttribute(this.inputElement, "EnterpriseCode"), this);
		//callApis(apinames, docInput);
		preparePnAStatusCodes();
		preparePnAHeaderStatusCode();
		preaprePlacedOrderHeaderErrors();
		preparePlaceOrderLineErrors();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.yantra.yfc.rcp.YRCBaseBehavior#handleApiCompletion(com.yantra.yfc.rcp.YRCApiContext)
	 */
	@Override
	public void handleApiCompletion(YRCApiContext ctx) {
		if (ctx.getInvokeAPIStatus() > 0){
			if (page.isDisposed()) {
				YRCPlatformUI.trace("Page is Disposed");
			} else {
				String[] apinames = ctx.getApiNames();
				for (int i = 0; i < apinames.length; i++) {
					String apiname = apinames[i];
					if ("XPXGetLineTypeList".equals(apiname)) {
						Element outXml = ctx.getOutputXmls()[i].getDocumentElement();
					
						setModel("LineTypeList",outXml);
					} else if ("XPXGetOrderChargesList".equals(apiname)) {
						Element outXml = ctx.getOutputXmls()[i].getDocumentElement();
						setModel("ChargesList",outXml);
						//Call the other APIs required to paint order detail screen
						//String[] orderDetailApiNames = {"XPXGetCustomerListService","XPXGetOrderDetailsService"};
						String[] orderDetailApiNames = {"XPXGetCustomerListService"};
				        Document[] docInput = {
								YRCXmlUtils.createFromString("<Customer  CustomerID='" + sShipToID + "' OrganizationCode='" + enterpriseCode + "'/>")
								//,YRCXmlUtils.createFromString("<Order OrderHeaderKey='" + YRCXmlUtils.getAttribute(this.inputElement, "OrderHeaderKey") + "' />")
						};
				        callApis(orderDetailApiNames, docInput);
					}
					else if ("XPXGetItemUOMMasterList".equals(apiname)) {
						Element outXml = ctx.getOutputXmls()[i].getDocumentElement();
						NodeList nl = outXml.getElementsByTagName("ItemUOMMaster");
						if(!YRCPlatformUI.isVoid(nl))
						{
							for(int j=0;j<nl.getLength();j++)
							{
								Element temp = (Element) nl.item(j);
								masterUOMList.put(temp.getAttribute("UnitOfMeasure"), temp.getAttribute("Description"));
							}
						}
					}
					else if ("XPXGetCustomerListService".equals(apiname)) {
						Element outXml = ctx.getOutputXmls()[i].getDocumentElement();
						setModel("ShipToCustomer",outXml);
						this.eleCustomerInfo = YRCXmlUtils.getXPathElement(outXml, "/CustomerList/Customer");
						Element extnElem = YRCXmlUtils.getXPathElement(getModel("ShipToCustomer"), "/CustomerList/Customer/Extn");
						/*shipCompleteFlag= YRCXmlUtils.getAttributeValue(getModel("ShipToCustomer"), "/CustomerList/Customer/Extn/@ExtnShipComplete");
						maxOrderAmount= YRCXmlUtils.getAttributeValue(getModel("ShipToCustomer"), "/CustomerList/Customer/Extn/@ExtnMaxOrderAmount");
						minOrderAmount= YRCXmlUtils.getAttributeValue(getModel("ShipToCustomer"), "/CustomerList/Customer/Extn/@ExtnMinOrderAmount");
						minChargeAmount= YRCXmlUtils.getAttributeValue(getModel("ShipToCustomer"), "/CustomerList/Customer/Extn/@ExtnMinChargeAmount");
						String envCode = YRCXmlUtils.getAttributeValue(getModel("ShipToCustomer"), "/CustomerList/Customer/Extn/@ExtnEnvironmentCode");
						String shipFromBranch = YRCXmlUtils.getAttributeValue(getModel("ShipToCustomer"), "/CustomerList/Customer/Extn/@ExtnShipFromBranch");*/
						shipCompleteFlag= extnElem.getAttribute("ExtnShipComplete");
						maxOrderAmount= extnElem.getAttribute("ExtnMaxOrderAmount");
						minOrderAmount= extnElem.getAttribute("ExtnMinOrderAmount");
						minChargeAmount= extnElem.getAttribute("ExtnMinChargeAmount");
						String envCode = extnElem.getAttribute("ExtnEnvironmentCode");
						String shipFromBranch = extnElem.getAttribute("ExtnShipFromBranch");
						
						if(YRCPlatformUI.isVoid(minOrderAmount) ||  Double.parseDouble(minOrderAmount) == 0)
						{
							//Document docInput = YRCXmlUtils.createFromString("<Organization OrganizationCode='"+shipFromBranch+"_"+envCode+"' />");
							//callApi("getOrganizationList", docInput);
							String[] orderDetailApiNames = {"getOrganizationList","XPXGetOrderListServiceCC"};
					        Document[] docInput = {
					        		YRCXmlUtils.createFromString("<Organization OrganizationCode='"+shipFromBranch+"_"+envCode+"' />"),
									YRCXmlUtils.createFromString("<Order OrderHeaderKey='" + YRCXmlUtils.getAttribute(this.inputElement, "OrderHeaderKey") + "' />")
							};
					        callApis(orderDetailApiNames, docInput);
						}
						else
						{
							String[] orderDetailApiNames = {"XPXGetOrderListServiceCC"};
					        Document[] docInput = {
									YRCXmlUtils.createFromString("<Order OrderHeaderKey='" + YRCXmlUtils.getAttribute(this.inputElement, "OrderHeaderKey") + "' />")
							};
					        callApis(orderDetailApiNames, docInput);
						}
					}
					else if ("getOrganizationList".equals(apiname)) {
						Element outXml = ctx.getOutputXmls()[i].getDocumentElement();
						Element extnElem = YRCXmlUtils.getXPathElement(outXml, "/OrganizationList/Organization/Extn");
						if(extnElem!=null)
						{
							minOrderAmount = extnElem.getAttribute("ExtnMinOrderAmt");
							minChargeAmount = extnElem.getAttribute("ExtnSmallOrderFee");
						}
					}
					else if ("XPXGetOrderListServiceCC".equals(apiname)) {
						Element outXml = ctx.getOutputXmls()[i].getDocumentElement();
						
						orderElementBeforeAddition = (Element)outXml.getElementsByTagName("Order").item(0);
						
//						originalSalesOrderElement = YRCXmlUtils.getCopy(outXml);
				       	setModel("OriginalOrder", orderElementBeforeAddition, false);
 	                    RemoveNeedsAttentionButtonVisibility(outXml);
				       	if(XPXUtils.isFullFillmentOrder(outXml)){
				       		setModel("placedOrderLineErrorMap",outXml);
				       	}
				       	
				       	if(outXml.getAttribute("EntryType").equals("B2B") )
						{
							this.getOriginalB2BOrderDetails();
						}
				        else{
				        	this.getXfrCircles();
				        }
					} 
					else if("XPXGetTransferCirclesList".equals(apiname))
					{
						Element outXml = ctx.getOutputXmls()[i].getDocumentElement();
						Element xferCirclesList = YRCXmlUtils.getXPathElement(outXml, "/OrganizationList/Organization/Extn/XPXXferCircleList");
						if(YRCPlatformUI.isVoid(xferCirclesList))
						{
							addBaseOrgAsXferCircle(outXml);	
						}
						else
						{
							NodeList xrefCircleNodeList = xferCirclesList.getElementsByTagName("XPXXferCircle");
							if(!YRCPlatformUI.isVoid(xrefCircleNodeList)&& xrefCircleNodeList.getLength()<=1)
							{	
								if(xrefCircleNodeList.getLength()==0)
								{
									addBaseOrgAsXferCircle(outXml);							
								}
								else if(xrefCircleNodeList.getLength()==1)
								{
									Element temp =(Element) xrefCircleNodeList.item(0);
									if(YRCPlatformUI.isVoid(temp.getAttribute("DivisionNo")))
											{
										temp.setAttribute("DivisionNo", YRCXmlUtils.getXPathElement(outXml, "/OrganizationList/Organization").getAttribute("OrganizationCode"));
										temp.setAttribute("DivisionName", YRCXmlUtils.getXPathElement(outXml, "/OrganizationList/Organization").getAttribute("OrganizationName"));
											}
									setModel("TransferCirclesList",xferCirclesList);							
								}
							}
							else
							{
								setModel("TransferCirclesList",xferCirclesList);
							}
						}

						// Check if PnA is also performed along with this command,
						// if not then proceed with handleSalesOrder() which will paint the UI
						Document docPnAInput = XPXUtils.preparePnAInputDocForOrderLines(orderElementBeforeAddition, eleCustomerInfo);
						if(null == docPnAInput){
							this.handleSalesOrder();
							page.showRootPanel(true);
						} else {
							//Invoke PnA docPnAInput
							callApi(XPXUtils.PRICE_AND_AVAILABILITY_SRVC, docPnAInput);
							
						}
						// invoke pna
					} else if (XPXUtils.PRICE_AND_AVAILABILITY_SRVC.equals(apiname)) {
						Document orderLevelPAndAResponseDoc = ctx.getOutputXmls()[i];
					
						if(!YRCPlatformUI.isVoid(orderLevelPAndAResponseDoc)){
							orderLevelPAndAResponseEle = orderLevelPAndAResponseDoc.getDocumentElement();
							getPnAErrorMessage(orderLevelPAndAResponseEle);
							setModel("OrderLevelPAndAResponse", orderLevelPAndAResponseEle, false);
						}
						
						this.handleSalesOrder();
						page.showRootPanel(true);
						
					} else if("getOrderList".equals(apiname)){
						Element outXml = ctx.getOutputXmls()[i].getDocumentElement();
						setModel("placedOrderLineErrorMap",outXml);
						
						
					} else  if("XPXUOMListService".equals(apiname)){
						Element outXml = ctx.getOutputXmls()[i].getDocumentElement();
						YRCXmlUtils.getString(outXml);
						NodeList nl = outXml.getElementsByTagName("Item");
						if(!YRCPlatformUI.isVoid(nl))
						{
							for(int j=0;j<nl.getLength();j++)
							{
								Element orderItemEle=(Element) nl.item(j);
								String itemId=orderItemEle.getAttribute("ItemID");
								Element eleUOMList=YRCXmlUtils.getChildElement(orderItemEle, "UOMList");
								
								NodeList listUOM = eleUOMList.getElementsByTagName("UOM");
								for(int k=0;k<listUOM.getLength();k++)
								{
									Element uOMElement = (Element) listUOM.item(k);
								String conversion=uOMElement.getAttribute("Conversion");
								uOMElement.setAttribute("UnitOfMeasureDesc",(String) masterUOMList.get(uOMElement.getAttribute("UnitOfMeasure")) );
								String conversionStr[]=null;
								if(conversion !=null && conversion.contains(".")){
									conversionStr=conversion.split("\\.");
									uOMElement.setAttribute("Conversion", conversionStr[0]);
								}else{
									uOMElement.setAttribute("Conversion", conversion);
								}
								
								}
								page.itemUOMListMap.put(itemId, eleUOMList);
								YRCXmlUtils.getString(eleUOMList);
								
							}
						}
						
						setModel("orderUOMList",outXml);

					} else if("getXPXItemBranchListService".equals(apiname)){
						
						Element outXml = ctx.getOutputXmls()[i].getDocumentElement();
//						System.out.println("its Inside Muldiple Handle------"+YRCXmlUtils.getString(outXml));
						YRCXmlUtils.getString(outXml);
						NodeList itemListNode = outXml.getElementsByTagName("XPXItemExtn");
						if(!YRCPlatformUI.isVoid(itemListNode))
						{
							for(int j=0;j<itemListNode.getLength();j++)
							{
								Element orderItemEle=(Element) itemListNode.item(j);
								String ItemID=orderItemEle.getAttribute("ItemID");
								String orderMultiple="";
							    if(orderItemEle!=null)
							    {	
							    	orderMultiple = orderItemEle.getAttribute("OrderMultiple");
							    }
							    if (orderMultiple == null || orderMultiple.trim().length() == 0) {
							    	orderMultiple = "1";
								}
							   page.itemMultipleListMap.put(ItemID,orderMultiple);
								
								
							}
						}
					} else if("getXPXReferenceOrderListService".equals(apiname)){
						Element outXml = ctx.getOutputXmls()[i].getDocumentElement();
						setModel("customerOriginalB2BOrder", outXml);
						this.getXfrCircles();
					}
				}

				if ("XPXChangeOrderDetailsService".equals(ctx.getApiName()) 
						|| "XPXMarkOrderToCompleteService".equals(ctx.getApiName())
						|| "confirmDraftOrder".equals(ctx.getApiName())) {
					Element outXml = ctx.getOutputXml().getDocumentElement();
					setModel("XPXChangeOrderDetailsService_X", outXml, false);
					if(isFromOrderEntryWizard && !"Errors".equals(outXml.getNodeName()))
						isFromOrderEntryWizard = false;
					String strTxMsg = outXml.getAttribute("TransactionMessage");
					if(YRCPlatformUI.isVoid(strTxMsg)){
						page.clearLines();
						this.initPage();
					} else {
						YRCPlatformUI.showError("Processing Action Failed!!! ", strTxMsg);
					}
					YRCDesktopUI.getCurrentPart().showBusy(false);
				}
				
				if ("changeOrder".equals(ctx.getApiName())) {
					//remove the busy symbol
					YRCDesktopUI.getCurrentPart().showBusy(false);
				}

				if ("XPXSendCSREmailService".equals(ctx.getApiName())) {
					Element outXml = ctx.getOutputXml().getDocumentElement();
					if(!YRCPlatformUI.isVoid(outXml)){
					String emailId=outXml.getAttribute("CSREmailId");
					if(!YRCPlatformUI.isVoid(emailId))
						YRCPlatformUI.showInformation("Information", "Email has been Triggered");
					
					}
				}
				

			}
		}
		//In case of Invoke API failure
		else if(ctx.getInvokeAPIStatus()==-1){
			Element outXml = ctx.getOutputXml().getDocumentElement();
			String[] apinames = ctx.getApiNames();
			for (int i = 0; i < apinames.length; i++) {
				String apiname = apinames[i];
				if(XPXUtils.PRICE_AND_AVAILABILITY_SRVC.equals(apiname)){
					Element dummyPnaResponse = YRCXmlUtils.createFromString("<PriceAndAvailability><Items></Items></PriceAndAvailability>").getDocumentElement();
					setModel("OrderLevelPAndAResponse", dummyPnaResponse, false);
					this.handleSalesOrder();
					page.showRootPanel(true);
				}
			}
			if("Errors".equals(outXml.getNodeName())){
			//	page.setAllButtonsEnabled(true);
				if ("XPXPlaceFulfillmentOrdersService".equals(ctx.getApiName())) {
					YRCPlatformUI.trace("Failed while Placing Fulfillment Orders: ", outXml);
					YRCPlatformUI.showError("Failed!", "Unable to place fulfillment order(s) at this time.");
				}else {
					Element errorEle = (Element) outXml.getElementsByTagName(
							"Error").item(0);
					if (!YRCPlatformUI.isVoid(errorEle)) {
						YRCPlatformUI.trace(errorEle
								.getAttribute("ErrorDescription"), outXml);
						YRCPlatformUI.showError("Failed!", errorEle
								.getAttribute("ErrorDescription"));
					}
				}
			}
		}
		super.handleApiCompletion(ctx);		
	}
	/*//Added for 4321
	private Element addRuleIDError(Element orderdListXML){
		Element eleOrder = (Element)orderdListXML.getElementsByTagName("Order").item(0);
		Element orderHdrExtn = (Element)eleOrder.getElementsByTagName("Extn").item(0);
		String HdrRuleID = orderHdrExtn.getAttribute("ExtnOrdHdrLevelFailedRuleID");
		if(!YRCPlatformUI.isVoid(HdrRuleID)){
			String ordHdrRuleDescription = XPXCacheManager.getsetRuleIDDescription(HdrRuleID);
			Element extnError = YRCXmlUtils.createChild(eleOrder,"Error");
			extnError.setAttribute(HdrRuleID, ordHdrRuleDescription);
		}
		Element orderLinesList = (Element)eleOrder.getElementsByTagName("OrderLines").item(0);
		if(orderLinesList!=null){
			NodeList orderLineList = orderLinesList.getElementsByTagName("OrderLine");
			int orderLineListLength = orderLineList.getLength();
			if(orderLineListLength>0){
				for(int i=0;i<orderLineListLength;i++){
					Element eleOrderLine = (Element)orderLineList.item(i);
					Element orderLineExtn = (Element)eleOrderLine.getElementsByTagName("Extn").item(0);
					String lineRuelID = orderLineExtn.getAttribute("ExtnOrdLineLevelFailedRuleID");
					if(!YRCPlatformUI.isVoid(lineRuelID)){
						String ordLineRuleDesc =  XPXCacheManager.getsetRuleIDDescription(lineRuelID);
						Element extnLineError = YRCXmlUtils.createChild(eleOrderLine,"Error");
						extnLineError.setAttribute(lineRuelID, ordLineRuleDesc);
					}
				}
			}
		}
		System.out.println(YRCXmlUtils.getString(eleOrder));
		return eleOrder;
		
	}*/
	
	private static Document getDummyOutPutDoc() {
		Document returnDoc = null;
		InputStream is = OrderLinesPanelBehavior.class
				.getClassLoader()
				.getResourceAsStream(
						"com/sterlingcommerce/xpedx/webchannel/utilities/priceandavailability/XPEDXDummyOutputDoc.xml");
		returnDoc = YRCXmlUtils.createFromStream(is);
		if(returnDoc == null){
			is = OrderLinesPanelBehavior.class.getClassLoader().getResourceAsStream(
			"com/xpedx/sterling/rcp/pca/orderlines/screen/XPEDXDummyOutputDoc.xml");
			returnDoc = YRCXmlUtils.createFromStream(is);
		}
		return returnDoc;
	}
	
	
	private Document getItemItemBranchListDoc() {
		String query=getItemListAPIQuery();
		
		String sShipfromDiv = "";
		String ShipfromDiv="";
		String envCode="";
		Element orderDetailsElem = getModel("OriginalOrder");
		sShipfromDiv = YRCXmlUtils.getAttributeValue(orderDetailsElem, "Order/Extn/@ExtnOrderDivision");
		
		if(!YRCPlatformUI.isVoid(sShipfromDiv)){
			String [] tmpDiv=sShipfromDiv.split("_");
			ShipfromDiv=tmpDiv[0];	
			envCode=YRCXmlUtils.getAttributeValue(orderDetailsElem, "Order/Extn/@ExtnEnvtId");
		
		}
		else{
			Element eleCustDetails = (Element)getCustomerDetails();
			Element custDetailsExtnElement = YRCXmlUtils.getChildElement(eleCustDetails, "Extn");
			envCode = custDetailsExtnElement.getAttribute("ExtnEnvironmentCode");
			String shipFromBranch = custDetailsExtnElement.getAttribute("ExtnShipFromBranch");
			String [] tmpDiv=shipFromBranch.split("_");
			ShipfromDiv=tmpDiv[0];
		}
		
		
		
		Document orderItemDoc=YRCXmlUtils.createFromString("<XPXItemExtn EnvironmentID='"+envCode+"' XPXDivision='"+ShipfromDiv+"'>" +
				"<ComplexQuery Operation='OR'><Or>" +
				query+
			"</Or></ComplexQuery></XPXItemExtn>");
		return orderItemDoc;
	}
	
	private Document getUOMListDocument() {

		String query=getItemListAPIQuery();
		Document orderItemDoc=YRCXmlUtils.createFromString("<XPXUOMListAPI CustomerID='" + sShipToID + "' OrganizationCode='" + enterpriseCode + "'>" +
			"<ComplexQuery Operation='OR'><Or>" +
			query+
		"</Or></ComplexQuery></XPXUOMListAPI>");
		return orderItemDoc;
	}
	
	private Document prepareInputToGetFulfillmentOrderList(){
		Element orderDetailsElem = getModel("OriginalOrder");
		String webConfNumber=YRCXmlUtils.getAttributeValue(orderDetailsElem, "/Order/Extn/@ExtnWebConfNum");
			Element orderElement=YRCXmlUtils.createFromString("<Order><ComplexQuery Operation='OR'><Or>" +
					"<Exp Name='OrderType' Value='STOCK_ORDER' QryType='EQ'/>" +
					"<Exp Name='OrderType' Value='DIRECT_ORDER' QryType='EQ'/>" +
					"<Exp Name='OrderType' Value='SPECIAL_ORDER' QryType='EQ'/>" +
					"<Exp Name='OrderType' Value='THIRD_PARTY' QryType='EQ'/>" +
				"</Or></ComplexQuery></Order>").getDocumentElement();
			Element OrderChildEle=YRCXmlUtils.createChild(orderElement, "Extn");
			OrderChildEle.setAttribute("ExtnWebConfNum", webConfNumber);
			return orderElement.getOwnerDocument();
	}
	
private String getItemListAPIQuery(){
		
		Element orderDetailsElem = getModel("OriginalOrder");
		NodeList orderItemList=orderDetailsElem.getElementsByTagName("OrderLine");
		int length=orderItemList.getLength();
		List<String> itemList=new ArrayList<String>();
		for (int  i=0;i<length;i++){
			
			Element orderItemEle=(Element) orderItemList.item(i);

			if("P".equals(((Element)orderItemEle).getAttribute("LineType"))){
				String elementId=YRCXmlUtils.getXPathElement(orderItemEle, "/OrderLine/Item").getAttribute("ItemID");
				itemList.add(elementId);
			}
		}
		String itemQuery = "";
		for(int i=0;i<itemList.size();i++){
			itemQuery=itemQuery.concat("<Exp Name='ItemID' QryType='EQ' Value='"+itemList.get(i)+"' />");
		}
		return itemQuery;
		
	}
	
	private void getPnAErrorMessage(Element orderLevelPAndAResponseEle2) {

		String statusCode=YRCXmlUtils.getChildElement(orderLevelPAndAResponseEle2, "HeaderStatusCode").getTextContent();	
		String environmentId=YRCXmlUtils.getChildElement(orderLevelPAndAResponseEle2, "EnvironmentId").getTextContent();
		if(!YRCPlatformUI.isVoid(statusCode)){
			String inputString = environmentId+"_"+statusCode;
			pnaErrorFlag=false;
			if(!("00".equals(statusCode))){
			if(!HeaderStatusTable.containsKey(inputString)){
				setPnAErrorValue("Unknown Header Error");
				
			}else{
				setPnAErrorValue(HeaderStatusTable.get(inputString));
			}
			}
		}
		else{
			setPnAErrorValue("UnIdentified Error in getting Price and Availabilty Information");
			pnaErrorFlag=true;
			
		}


		
	}
	public void setPnAErrorValue(String pnaErrorValue) {
		this.pnaErrorValue=pnaErrorValue;
		
	}
	public String getPnAErrorValue(){
		return pnaErrorValue;
	}
	private void getOriginalB2BOrderDetails() {
		Element orderDetailsElem = getModel("OriginalOrder");
		String liasonMessageId = YRCXmlUtils.getAttributeValue(orderDetailsElem, "/Order/Extn/@ExtnMsgHeaderId");
		Element inputRefernceOrderElement = YRCXmlUtils.createDocument("XPXRefOrderHdr").getDocumentElement();
		inputRefernceOrderElement.setAttribute("MsgHeaderId", liasonMessageId);
		String webConfNumber=YRCXmlUtils.getAttributeValue(orderDetailsElem, "/Order/Extn/@ExtnWebConfNum");
		if(XPXUtils.isCustomerOrder(orderDetailsElem) 
				&& (XPXUtils.isPlaced(orderDetailsElem) || XPXUtils.isBeyondPlaced(orderDetailsElem)) 
				&& !YRCPlatformUI.isVoid(webConfNumber))
		{
			String[] apiNames ={"getOrderList", "getXPXReferenceOrderListService"};
			Document[] docInputs={ this.prepareInputToGetFulfillmentOrderList(),inputRefernceOrderElement.getOwnerDocument()};
			callApis(apiNames, docInputs);
		} else {
			String[] apiNames ={"getXPXReferenceOrderListService"};
			Document[] docInputs={inputRefernceOrderElement.getOwnerDocument()};
			callApis(apiNames, docInputs);
		}
	}
	private void getXfrCircles() {
		Element orderDetailsElem = getModel("OriginalOrder");
		String custOrderBranch = YRCXmlUtils.getAttributeValue(getModel("ShipToCustomer"), "/CustomerList/Customer/Extn/@ExtnCustOrderBranch");
		String enviCode=YRCXmlUtils.getAttributeValue(getModel("ShipToCustomer"), "/CustomerList/Customer/Extn/@ExtnEnvironmentCode");
		custOrderBranch = XPXUtils.updateNodeSyntax(enviCode, custOrderBranch);
		Document docXferCirclesInput = YRCXmlUtils.createFromString("<Organization OrganizationKey='"+custOrderBranch+"' />"); 
		String webConfNumber=YRCXmlUtils.getAttributeValue(orderDetailsElem, "/Order/Extn/@ExtnWebConfNum");
		if(XPXUtils.isCustomerOrder(orderDetailsElem) 
				&& (XPXUtils.isPlaced(orderDetailsElem) || XPXUtils.isBeyondPlaced(orderDetailsElem)) 
				&& !YRCPlatformUI.isVoid(webConfNumber))
		{
			// Query for the Child Orders only if they are not queried already
			if(null == getModel("placedOrderLineErrorMap")){
				
				String[] apiNames ={"getOrderList","XPXUOMListService","getXPXItemBranchListService","XPXGetTransferCirclesList"};
				Document[] docInputs={this.prepareInputToGetFulfillmentOrderList(),this.getUOMListDocument(),this.getItemItemBranchListDoc(),docXferCirclesInput};
				callApis(apiNames, docInputs);
			} else {
				String[] apiNames ={"XPXUOMListService","getXPXItemBranchListService","XPXGetTransferCirclesList"};
				Document[] docInputs={this.getUOMListDocument(),this.getItemItemBranchListDoc(),docXferCirclesInput};
				callApis(apiNames, docInputs);
			}
		} else {
			// In case of has Order Lines on the order - Get the UOM List, Item Branch details AND Transfer Circles
			if(this.hasOrderLines(orderDetailsElem)){
			String[] apiNames ={"XPXUOMListService","getXPXItemBranchListService","XPXGetTransferCirclesList"};
			Document[] docInputs={this.getUOMListDocument(),this.getItemItemBranchListDoc(),docXferCirclesInput};
			callApis(apiNames, docInputs);
			} else {
				// Get Transfer circles alone in case there are no line on the order.
				String[] apiNames ={"XPXGetTransferCirclesList"};
				Document[] docInputs={docXferCirclesInput};
				callApis(apiNames, docInputs);
			}
		}
	}

	private boolean hasOrderLines(Element orderDetailsElem) {
		Element eleOrdLines = YRCXmlUtils.getChildElement(orderDetailsElem, "OrderLines");
		if(null != eleOrdLines){
			List listOfOrdLine = YRCXmlUtils.getChildren(eleOrdLines, "OrderLine");
			if(null != listOfOrdLine){
				return listOfOrdLine.size()>0;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	private void addBaseOrgAsXferCircle(Element outXml) {
		Element xpexCircleDoc = YRCXmlUtils.createFromString("<XPXXferCircleList/>").getDocumentElement();
		Element temp = YRCXmlUtils.createChild(xpexCircleDoc, "XPXXferCircle");
		temp.setAttribute("DivisionNo", YRCXmlUtils.getXPathElement(outXml, "/OrganizationList/Organization").getAttribute("OrganizationCode"));
		temp.setAttribute("DivisionName", YRCXmlUtils.getXPathElement(outXml, "/OrganizationList/Organization").getAttribute("OrganizationName"));
		xpexCircleDoc.appendChild(temp);
		setModel("TransferCirclesList",xpexCircleDoc);
	}

	public void initLineTypes() {
		Document doc= 
				YRCXmlUtils.createFromString("<CommonCode CallingOrganizationCode='"+YRCXmlUtils.getAttribute(this.inputElement, "EnterpriseCode")+"' CodeType='LineType'/>");
			
		YRCApiContext ctx = new YRCApiContext();
		ctx.setFormId("com.xpedx.sterling.rcp.pca.orderlines.wizard.XPXOrderLinesWizard");
		ctx.setApiName("XPXGetLineTypeList");
		ctx.setInputXml(doc);
		if (!page.isDisposed())
			callApi(ctx, page);
		
	}

	private void handleSalesOrder() {
		Element orderDetailsElem = getModel("OriginalOrder");
		Element placedOrderLineError = getModel("placedOrderLineErrorMap");
		
		this.populateVariablesBeforePageLoad(orderDetailsElem);
		page.setAllButtonsEnabled(true);
		page.setControlsView(orderDetailsElem);
		this.stampPlacedOrderErrors(orderDetailsElem);
		page.createHeader(orderDetailsElem);
		page.setControlsHiddenForCancelOrder(orderDetailsElem, false);
		page.setControlsEnableForFewOrderStatus(orderDetailsElem, false);
		if(!YRCPlatformUI.isVoid(placedOrderLineError)){
			stampPlacedOrderErrors(placedOrderLineError);
		}
		
		setModel("OrderDetails", orderDetailsElem, false);
		//ExtnOrderDivision
		shipNode = YRCXmlUtils.getAttributeValue(orderDetailsElem, "Order/Extn/@ExtnOrderDivision");
		if(XPXUtils.isCustomerOrder(orderDetailsElem) 
				&& !(XPXUtils.isPlaced(orderDetailsElem))){
			Element eleOrderHoldTypes = YRCXmlUtils.getChildElement(orderDetailsElem, "OrderHoldTypes");
			List listOrderHold = YRCXmlUtils.getChildren(eleOrderHoldTypes, "OrderHoldType");
			
			for (Object objOrderHold : listOrderHold) {
				Element eleOrderHold = (Element) objOrderHold;
				if("NEEDS_ATTENTION".equals(eleOrderHold.getAttribute("HoldType")) && "1100".equals(eleOrderHold.getAttribute("Status"))){
					setControlVisible("btnPlaceOrder", false);
				}
				
			}
		} else {
			setControlVisible("btnPlaceOrder", false);
			if(XPXUtils.isFullFillmentOrder(orderDetailsElem)){
				setControlVisible("btnMarkOrderComplete", false);
			}
			
		}
		
		if("N".equals(YRCXmlUtils.getAttribute(orderDetailsElem, "DraftOrderFlag"))){
			setControlVisible("btnConfirmOrder", false);
		}
		else{
			setControlVisible("btnPlaceOrder", false);
			setControlVisible("btnMarkOrderComplete", false);
		
		}
		
		

		Element orderLinesElement = YRCXmlUtils.getChildElement(orderDetailsElem, "OrderLines");
		boolean isAnyOrderLineExists = false;
		ArrayList listOrderLine = YRCXmlUtils.getChildren(orderLinesElement, "OrderLine");
		if (listOrderLine.size() > 0) {
			isAnyOrderLineExists = true;
		}

		if (isAnyOrderLineExists) {
			page.createLines(listOrderLine,getModel("OrderLevelPAndAResponse"), null);
		} else {
			if(addBlankLine){
//				setModel("OrderDetails", this.inputElement, false);
				page.addBlankLines(3);
			}
		}
		
		setEnableMarkCompleteButton();
		renderUpdateOrderButton();
		setDirty(false);
	}
	
	private void renderUpdateOrderButton() {
		Element orderDetailsElem = getModel("OriginalOrder");
		String orderType=orderDetailsElem.getAttribute("OrderType");
		if(XPXUtils.isPlaced(orderDetailsElem) && XPXConstants.ORD_TYPE_CUSTOMER.equals(orderType)){
			Element eleOrderHoldTypes = YRCXmlUtils.getChildElement(orderDetailsElem, "OrderHoldTypes");
			List listOrderHold = YRCXmlUtils.getChildren(eleOrderHoldTypes, "OrderHoldType");
			
			for (Object objOrderHold : listOrderHold) {
				Element eleOrderHold = (Element) objOrderHold;
				if("NEEDS_ATTENTION".equals(eleOrderHold.getAttribute("HoldType")) && "1100".equals(eleOrderHold.getAttribute("Status")) && !isReadOnlyPage()){
					setControlVisible("btnUpdateOrder", true);
					getControl("btnUpdateOrder").setEnabled(true);
				}
			}
		}
	}
	/**
	 * @return
	 */
	private Element populateVariablesBeforePageLoad(Element orderDetailsElem) {
		isDraftOrder = !YRCPlatformUI.equals(orderDetailsElem.getAttribute("DraftOrderFlag"), "N");
		seller = orderDetailsElem.getAttribute("SellerOrganizationCode");
		boolean needsAttention = false;
		boolean hasFullfilmentOrders = false;
		
		String orderType=orderDetailsElem.getAttribute("OrderType");
		if(XPXUtils.isPlaced(orderDetailsElem) && XPXConstants.ORD_TYPE_CUSTOMER.equals(orderType)){
			
//			Check If the Customer Order is placed to legacy
			Element placedOrderLineError = getModel("placedOrderLineErrorMap");
				if(null != placedOrderLineError){
					List nodesList = null;
					if("Order".equals(placedOrderLineError.getNodeName())){
						nodesList = new ArrayList();
						nodesList.add(placedOrderLineError);
					} else {
						nodesList = YRCXmlUtils.getChildren(placedOrderLineError, "Order");
					}
					
					if(null !=nodesList && nodesList.size()>0)
						hasFullfilmentOrders = true;
				}
			
			
			
			// Check if Order is on Needs Attention Hold
			Element eleOrderHoldTypes = YRCXmlUtils.getChildElement(orderDetailsElem, "OrderHoldTypes");
			List listOrderHold = YRCXmlUtils.getChildren(eleOrderHoldTypes, "OrderHoldType");
			for (Object objOrderHold : listOrderHold) {
				Element eleOrderHold = (Element) objOrderHold;
				if("NEEDS_ATTENTION".equals(eleOrderHold.getAttribute("HoldType")) && "1100".equals(eleOrderHold.getAttribute("Status"))){
					needsAttention = true;
					break;
				}
			}
		}
		
		// Mark Page ReadOnly, 
		//		if it is a Customer Order beyond Place statua (or) in Placed Status and has Fulfillment Orders in system.
		//		If order is in Cancelled status.
		//		If User dont have permissions to edit this order.
		if( XPXUtils.isReferenceOrder(orderDetailsElem)
				|| (XPXUtils.isCustomerOrder(orderDetailsElem) && (XPXUtils.isBeyondPlaced(orderDetailsElem) || (XPXUtils.isPlaced(orderDetailsElem) && true==hasFullfilmentOrders)))
				|| !checkUserPermissions()
                || XPXUtils.isCancelOrder(orderDetailsElem) || checkOrderLockFlag()			
		){
			//adding checkOrderLockFlag() as well.. bug # 2582
			readOnlyPage = true;
		}
		
		// Set the Class level variables indicating no. of Product and Other Lines present in Order.
		Element eleOrderLines = YRCXmlUtils.getChildElement(orderDetailsElem, "OrderLines");
		ArrayList<Element> listOrderLine = YRCXmlUtils.getChildren(eleOrderLines, "OrderLine");
//		Reset the values.
		noOfProductLines = 0;
		noOfOtherLines = 0;
		for (Element eleOrderLine : listOrderLine) {
			if(XPXConstants.LEGACY_PRODUCT_TYPE.equals(eleOrderLine.getAttribute("LineType"))){
				noOfProductLines += 1;
			} else {
				noOfOtherLines += 1;
			}
		}
		
		
		return orderDetailsElem;
	}

	private void callApi(String apinames, Document inputXml) {
		YRCApiContext ctx = new YRCApiContext();
		ctx.setFormId("com.xpedx.sterling.rcp.pca.orderlines.wizard.XPXOrderLinesWizard");
		ctx.setApiName(apinames);
		ctx.setInputXml(inputXml);
		ctx.setShowError(false);
		if (!page.isDisposed())
			callApi(ctx, page);
	}

	 private void callApis(String apinames[], Document inputXmls[]) {
		YRCApiContext ctx = new YRCApiContext();
		ctx.setFormId("com.xpedx.sterling.rcp.pca.orderlines.wizard.XPXOrderLinesWizard");
		ctx.setApiNames(apinames);
		ctx.setInputXmls(inputXmls);
		if (!page.isDisposed())
			callApi(ctx, page);
	}

	public void updateOrderAction() {
		if (getControl("btnUpdateOrder").isVisible()) {
			targetOrderModel = null;
			page.getTargetModelAndCallUpdateApi(true);			
		}
	}
	
	public void confirmOrderAction() {
		if (getControl("btnConfirmOrder").isVisible()) {
			Element orderDetailsElem = getModel("OrderDetails");
			if(orderDetailsElem!=null)
			{
				//Compare the extnTotalOrderValue with 
				Element orderExtn = YRCXmlUtils.getChildElement(orderDetailsElem, "Extn");
				if(orderExtn!=null){
					String totalOrderVal =  orderExtn.getAttribute("ExtnTotalOrderValue");
					Document validationDoc = validateTotalOrderAmountValue(totalOrderVal);
					if(validationDoc.getDocumentElement().hasAttribute("MinChargeAmount"))
					{
						//Show the warning pop-up
						String message = "";
						if(validationDoc.getDocumentElement().hasAttribute("MinOrderAmount")){
							message = "less than "+validationDoc.getDocumentElement().getAttribute("MinOrderAmount");;
						}	
						if(!YRCPlatformUI.getConfirmation("Warning", "Your order amount is "+message+". An extra penalty of {0} will be charged.", validationDoc.getDocumentElement().getAttribute("MinChargeAmount"))){
							return;
						}
					}
					YRCDesktopUI.getCurrentPart().showBusy(true);
					Document docConfirmDraftOrd = YRCXmlUtils.createDocument("ConfirmDraftOrder");
					Element eleConfirmDraftOrd = docConfirmDraftOrd.getDocumentElement();
					YRCXmlUtils.setAttribute(eleConfirmDraftOrd, "OrderHeaderKey", inputElement.getAttribute("OrderHeaderKey"));

					YRCApiContext ctx = new YRCApiContext();
					ctx.setApiName("confirmDraftOrder");
					ctx.setInputXml(docConfirmDraftOrd);
					ctx.setFormId("com.yantra.pca.ycd.rcp.tasks.orderEntry.wizards.YCDOrderEntryWizard");
					ctx.setShowError(false);
					ctx.setUserData("isRefreshReqd", String.valueOf(false));
					callApi(ctx, page);
				}
			}
			/*YRCDesktopUI.getCurrentPart().showBusy(true);
			Document docConfirmDraftOrd = YRCXmlUtils.createDocument("ConfirmDraftOrder");
			Element eleConfirmDraftOrd = docConfirmDraftOrd.getDocumentElement();
			YRCXmlUtils.setAttribute(eleConfirmDraftOrd, "OrderHeaderKey", inputElement.getAttribute("OrderHeaderKey"));

			YRCApiContext ctx = new YRCApiContext();
			ctx.setApiName("confirmDraftOrder");
			ctx.setInputXml(docConfirmDraftOrd);
			ctx.setFormId("com.yantra.pca.ycd.rcp.tasks.orderEntry.wizards.YCDOrderEntryWizard");
			ctx.setShowError(false);
			ctx.setUserData("isRefreshReqd", String.valueOf(false));
			callApi(ctx, page);*/
		}
	}
	
	public void appendOrderLine(Element eleOrder, Element orderLineElem, OrderLinePanelBehavior childpanel) {
		Element orderLinesElem = null;
		Node OldNode=null;
		Element eleNew=null;
		if (null == targetOrderModel){
			if(isFromOrderEntryWizard){
				targetOrderModel = YRCXmlUtils.getCopy(getModel("OrderDetails"));
				targetOrderModel.setAttribute("OrderType", XPXConstants.ORD_TYPE_CUSTOMER);
				YRCXmlUtils.mergeElement(eleOrder, targetOrderModel, false);
				NodeList n1=targetOrderModel.getElementsByTagName("Instructions");
				for(int j=0;j<n1.getLength();j++){
				OldNode=n1.item(j);
				}
				targetOrderModel.removeChild(OldNode);
				
	      
				NodeList n2=eleOrder.getElementsByTagName("Instructions");
				for(int i=0;i<n2.getLength();i++){
					Node newNode=n2.item(i);
					eleNew=(Element) newNode;		
				}

				 YRCXmlUtils.importElement(targetOrderModel, eleNew);

			}else{
				targetOrderModel = eleOrder;
//				targetOrderModel = XPXUtils.createNewDraftOrderElement(getModel("OrderDetails"), enterpriseCode);
			}
		}
		Element extnElem = null;
		if(null==dashBoardListElem){
			extnElem = YRCXmlUtils.getChildElement(targetOrderModel, "Extn", true);
			dashBoardListElem = YRCXmlUtils.getChildElement(extnElem, "XPXDashboardOverrideList", true);
		}
		childpanel.appendDashBoardOverride(dashBoardListElem,targetOrderModel.getAttribute("OrderHeaderKey"));
		orderLinesElem = YRCXmlUtils.getChildElement(targetOrderModel, "OrderLines", true);
		YRCXmlUtils.importElement(orderLinesElem, orderLineElem);
	}
	public void callUpdateApi() {
		if(null == targetOrderModel){
			YRCPlatformUI.showError("MESSAGE_NO_LINE_ADDED",
					YRCPlatformUI.getString("MESSAGE_NO_LINE_ADDED"));
			return;
		}
		if (targetOrderModel.hasAttribute("OrderHeaderKey")) {
			YRCDesktopUI.getCurrentPart().showBusy(true);
			String tempOrderType = YRCXmlUtils.getAttribute(getOrderDetails(), "OrderType");
			if(!YRCPlatformUI.isVoid(tempOrderType)){
				targetOrderModel.setAttribute("OrderType", YRCXmlUtils.getAttribute(getOrderDetails(), "OrderType"));
			}
			if(!YRCPlatformUI.isVoid(seller))
				targetOrderModel.setAttribute("SellerOrganizationCode", seller);
			targetOrderModel.setAttribute("DraftOrderFlag", YRCXmlUtils.getAttribute(getOrderDetails(), "DraftOrderFlag"));
		
			
			//Edit order flow - Check the Minimum Order Amount against the Total Order Value and show warning.
			String draftOrderFlag = targetOrderModel.getAttribute("DraftOrderFlag");
			if(draftOrderFlag!=null && draftOrderFlag.equals("N"))
			{
				String message = "Do you want to confirm the order?";
				String updatedFOTotal = null;
				int fulOdrSize = 1;
				//Call service to fetch the edited order's updated value
				YRCApiContext ctx1 = new YRCApiContext();
				ctx1.setApiName("fetchUpdatedOrderTotal");
				ctx1.setInputXml(targetOrderModel.getOwnerDocument());
				ctx1.setFormId("com.xpedx.sterling.rcp.pca.orderlines.wizard.XPXOrderLinesWizard");
				//callApi(ctx, page);
				YRCApiCaller syncapiCaller= new YRCApiCaller(ctx1,true);
				syncapiCaller.invokeApi();
				//Get the order details like Total Order Value
				Document outputXml = ctx1.getOutputXml();
				if(outputXml != null)
				{
					String ohk = outputXml.getDocumentElement().getAttribute("OrderHeaderKey");
					if(ohk!=null && ohk.equals(targetOrderModel.getAttribute("OrderHeaderKey")))
					{
						String foSize = outputXml.getDocumentElement().getAttribute("FOSize");
						if(outputXml.getDocumentElement().hasAttribute("UpdatedTotalOrderValue"))
						{
							//The order has been  modified with pending changes
							updatedFOTotal = outputXml.getDocumentElement().getAttribute("UpdatedTotalOrderValue");
						}
						fulOdrSize = Integer.parseInt(foSize);
					}
				}
				
				//updatedFOTotal will be null for multiple FOs
				if(updatedFOTotal!=null)
				{
					//There is only one FO whose Updated Total Order Val is returned
					Document validationDoc = validateTotalOrderAmountValue(updatedFOTotal);
					if(validationDoc.getDocumentElement().hasAttribute("MinChargeAmount"))
					{
						//Show the warning pop-up
						if(validationDoc.getDocumentElement().hasAttribute("MinOrderAmount")){
							message = "Your order amount is less than "+validationDoc.getDocumentElement().getAttribute("MinOrderAmount")+". An extra penalty of "+validationDoc.getDocumentElement().getAttribute("MinChargeAmount")+" will be charged.";
						}	
					}
				}
				
				if(!YRCPlatformUI.getConfirmation("Warning", message )){
					//User has clicked on Cancel in the confirmation pop-up
					if(fulOdrSize == 1){
						if(YRCXmlUtils.getChildElement(targetOrderModel, "PendingChanges")!=null)
							targetOrderModel.removeChild(YRCXmlUtils.getChildElement(targetOrderModel, "PendingChanges"));
						Element newPCElem= YRCXmlUtils.createChild(targetOrderModel, "PendingChanges");
						newPCElem.setAttribute("ResetPendingChanges", "Y");
						
						YRCApiContext ctx = new YRCApiContext();
						ctx.setApiName("changeOrder");
						ctx.setInputXml(targetOrderModel.getOwnerDocument());
						ctx.setFormId("com.xpedx.sterling.rcp.pca.orderlines.wizard.XPXOrderLinesWizard");
						ctx.setShowError(false);
						ctx.setUserData("isRefreshReqd", String.valueOf(false));
						callApi(ctx, page);
						targetOrderModel = null;
						return;
					}
				}
				else
				{
					//User has clicked on OK in the confirmation pop-up
					if(YRCXmlUtils.getChildElement(targetOrderModel, "PendingChanges")!=null)
						targetOrderModel.removeChild(YRCXmlUtils.getChildElement(targetOrderModel, "PendingChanges"));
					if(fulOdrSize == 1)
					{
						Element newPCElem= YRCXmlUtils.createChild(targetOrderModel, "PendingChanges");
						newPCElem.setAttribute("ResetPendingChanges", "Y");
					}
				}	
			}
			
			
			//Call the Order Edit service
			YRCApiContext ctx = new YRCApiContext();
			ctx.setApiName("XPXChangeOrderDetailsService");
			ctx.setInputXml(targetOrderModel.getOwnerDocument());
			ctx.setFormId("com.xpedx.sterling.rcp.pca.orderlines.wizard.XPXOrderLinesWizard");
			ctx.setShowError(false);
			ctx.setUserData("isRefreshReqd", String.valueOf(false));
			callApi(ctx, page);
			targetOrderModel = null;
		}
		
	}
	public void markOrderComplete() {
		YRCDesktopUI.getCurrentPart().showBusy(true);
		Document docTargetModel = YRCXmlUtils.createDocument("Order");
		docTargetModel.getDocumentElement().setAttribute("OrderHeaderKey", YRCXmlUtils.getAttributeValue(getModel("OrderDetails"), "/Order/@OrderHeaderKey")); 
		YRCPlatformUI.trace("Mark Order Complete:", YRCXmlUtils.getString(docTargetModel));
		YRCApiContext apiConterxt = new YRCApiContext();
		apiConterxt.setApiName("XPXMarkOrderToCompleteService");
		apiConterxt.setInputXml(docTargetModel);
		apiConterxt.setFormId("com.xpedx.sterling.rcp.pca.orderlines.wizard.XPXOrderLinesWizard");
		callApi(apiConterxt);
	}
	
	public Element getLineTypes(){
		return getModel("LineTypeList");
	}
	
	public Element getChargesList(){
		return getModel("ChargesList");
	}
	public Element getShipToCustomerDetails(){
		return getModel("ShipToCustomer");
	}
	
	public Element getInputElement(){
		
		return this.inputElement;
	}
	public Element getOrderDetails(){
		return this.orderElementBeforeAddition;
	}
	public Element getCustomerDetails(){
		return this.eleCustomerInfo;
	}
	public boolean isFromOrderEntryWizard(){
		return this.isFromOrderEntryWizard;	
	}
	public String getDefaultShipNode(){
		return this.shipNode;
	}
	public void placeOrderAction() {
		if (getControl("btnPlaceOrder").isVisible()) {
			page.setAllButtonsEnabled(false);
			Document docOrd = YRCXmlUtils.createDocument("Order");
			Element eleOrd = docOrd.getDocumentElement();
			YRCXmlUtils.setAttribute(eleOrd, "OrderHeaderKey", inputElement.getAttribute("OrderHeaderKey"));
			
			YRCApiContext ctx = new YRCApiContext();
			ctx.setApiName("XPXPlaceFulfillmentOrdersService");
			ctx.setInputXml(docOrd);
			ctx.setFormId("com.xpedx.sterling.rcp.pca.orderlines.wizard.XPXOrderLinesWizard");
			ctx.setShowError(false);
			ctx.setUserData("isRefreshReqd", String.valueOf(false));
			callApi(ctx, page);
		}
		
	}
	public boolean isReadOnlyPage() {
		return readOnlyPage;
	}
	public void clearDashBoardOverride(){
		dashBoardListElem= null;
	}
	public String getShipCompleteFlag(){
		return shipCompleteFlag;
	}
	public String getMinOrderStatus(){
		return sMinOrderStatus;
	}
	public String getMaxOrderStatus(){
		return sMaxOrderStatus;
	}
	
	
	/**
	 * @return the isDraftOrder
	 */
	public boolean isDraftOrder() {
		return isDraftOrder;
	}
	/**
	 * @param isDraftOrder the isDraftOrder to set
	 */
	public void setDraftOrder(boolean isDraftOrder) {
		this.isDraftOrder = isDraftOrder;
	}
	/**
	 * @return the maxOrderAmount
	 */
	public String getMaxOrderAmount() {
		return maxOrderAmount;
	}
	/**
	 * @param maxOrderAmount the maxOrderAmount to set
	 */
	public void setMaxOrderAmount(String maxOrderAmount) {
		this.maxOrderAmount = maxOrderAmount;
	}
	/**
	 * @return the minOrderAmount
	 */
	public String getMinOrderAmount() {
		return minOrderAmount;
	}
	/**
	 * @param minOrderAmount the minOrderAmount to set
	 */
	public void setMinOrderAmount(String minOrderAmount) {
		this.minOrderAmount = minOrderAmount;
	}
	/**
	 * @return the minChargeAmount
	 */
	public String getMinChargeAmount() {
		return minChargeAmount;
	}
	/**
	 * @param minChargeAmount the minChargeAmount to set
	 */
	public void setMinChargeAmount(String minChargeAmount) {
		this.minChargeAmount = minChargeAmount;
	}
	public boolean orderStatusLessThanPlaced(){
		if(YRCPlatformUI.isVoid(sMinOrderStatus)){
			return true;
		}
		if("1100.0100".compareTo(sMinOrderStatus)>0){
			return true;
		}else{
			return false;
		}
	}
	/**
	 * This method validates the user authorization
	 * to update the screen controls
	 */	
	private boolean checkUserPermissions() {
		if (!YRCPlatformUI.hasPermission(XPXConstants.RES_ID_MANAGE_ORDER)&& "YCD_TASK_VIEW_ORDER_SUMMARY".equals(((YRCEditorInput) inputObject).getTaskName())){
			return false;
		}
		return true;
	}	
	public Element getLocalModel(String modelName){
		return getModel(modelName);
	}
/*START - Collapsible Composite***/
	
	public void setFocus(Control ctrl)
	{
		if(ctrl instanceof Table)
			((Table)ctrl).setSelection(0);
		ctrl.setFocus();
	}
	
	public void panelCollapsed(String panelId, boolean userDriven)
	{

	}
	
	public void panelExpanded(String panelId, boolean userDriven)
	{

		setFocus(page.pnlOrderHdr);
	}
	/*END - Collapsible Composite***/
	public void getAttention(String checkSelection){
		
		Element orderElement = getModel("OriginalOrder");
		page.clearOrderLines();
		if(checkSelection.equals("Checked")){
			Element orderLinesElement = YRCXmlUtils.getChildElement(orderElement, "OrderLines");
			boolean isAnyOrderLineExists = false;
			ArrayList listOrderLine = YRCXmlUtils.getChildren(orderLinesElement, "OrderLine");
			ArrayList sortedOrderLineWithError = new ArrayList();
			ArrayList sortedOrderLine = new ArrayList();
		
			if (listOrderLine.size() > 0) {
				isAnyOrderLineExists = true;
				for(int i=0;i<listOrderLine.size();i++){
					Element orderLineElement = (Element)listOrderLine.get(i);
					Element errorElement = YRCXmlUtils.getChildElement(orderLineElement, "Error");
					if(errorElement != null && errorElement.hasAttributes())
					{
						sortedOrderLineWithError.add(orderLineElement);
					}
					else{
						sortedOrderLine.add(orderLineElement);
					}
				}
				sortedOrderLineWithError.addAll(sortedOrderLine);
				
			}

			if (isAnyOrderLineExists) {
				page.createLines(sortedOrderLineWithError,getModel("OrderLevelPAndAResponse"),null);
			}
			
				
		}
		else if(checkSelection.equals("UnChecked")){
			page.clearOrderLines();
			Element orderLinesElement = YRCXmlUtils.getChildElement(orderElement, "OrderLines");
			boolean isAnyOrderLineExists = false;
			ArrayList listOrderLine = YRCXmlUtils.getChildren(orderLinesElement, "OrderLine");
			if (listOrderLine.size() > 0) {
				isAnyOrderLineExists = true;
			}

			if (isAnyOrderLineExists) {
				page.createLines(listOrderLine,getModel("OrderLevelPAndAResponse"),null);
			}
			
		}
		
			
		
		
	}
	
	public boolean isCSRReviewing(){
		 boolean returnFlag=false;
		Element orderElement = getModel("OriginalOrder");
		Element eleOrderHoldTypes = YRCXmlUtils.getChildElement(orderElement, "OrderHoldTypes");
		if(!YRCPlatformUI.isVoid(eleOrderHoldTypes)){
		List listOrderHold = YRCXmlUtils.getChildren(eleOrderHoldTypes, "OrderHoldType");
		for (Object objOrderHold : listOrderHold) {
			Element eleOrderHold = (Element) objOrderHold;
			if(XPXConstants.ORDER_IN_EXCEPTION_HOLD.equals(eleOrderHold.getAttribute("HoldType"))|| XPXConstants.LEGACY_CNCL_ORD_HOLD.equals(eleOrderHold.getAttribute("HoldType"))|| XPXConstants.LEGACY_CNCL_LNE_HOLD.equals(eleOrderHold.getAttribute("HoldType"))|| XPXConstants.LEG_ERR_CODE_HOLD.equals(eleOrderHold.getAttribute("HoldType"))){
				returnFlag=true;
			}
		}
	}
		return returnFlag;
	}
	/*Method to check if order has any errors related order rules*/
	private void preparePnAStatusCodes(){
		StatusTable.put("A_00", "");
		StatusTable.put("A_01", "Invalid Item Number");
		StatusTable.put("A_02", " Item number missing (blank)");
		StatusTable.put("A_03", "Bad UOM Not a Access primary or alternate UOM");
		StatusTable.put("A_04", "Overflow error");
		
		StatusTable.put("M_00", "");
		StatusTable.put("M_01", "Invalid Item Number");
		StatusTable.put("M_02", "Item number missing");
		StatusTable.put("M_03", "Bad UOM Not a Max primary or alternate UOM");
		StatusTable.put("M_04", "Overflow error (UOM/Price Conversion)");
		StatusTable.put("M_05", "Order Branch Missing");
		StatusTable.put("M_06", "Item is suspended");
		StatusTable.put("M_07", "Item is non-standard");
		StatusTable.put("M_08", "Item Balance record is missing");
		StatusTable.put("M_09", "Suspended Item Balance");
		StatusTable.put("M_10", "Requested Qty has non-numeric data");
		StatusTable.put("M_11", "Requested UOM missing ");
		StatusTable.put("M_12", "Requested UOM not in eComm UOM file");

	}
	
	private void preparePnAHeaderStatusCode(){
		HeaderStatusTable.put("M_00", "test");
		HeaderStatusTable.put("M_01", "Invalid Customer");
		HeaderStatusTable.put("M_02", "Company # missing/blank");
		HeaderStatusTable.put("M_03", "Invalid Ship to # for this customer");
		HeaderStatusTable.put("M_04", "Environment not correct");
		
		HeaderStatusTable.put("A_00", "");
		HeaderStatusTable.put("A_01", "Invalid Customer");
	}
	
	public void removeErrorLabelValue(){
		if(!YRCPlatformUI.isVoid(page.orderHeaderPanel.lblHeaderErr) && pnaErrorFlag)
			page.orderHeaderPanel.lblHeaderErr.setText("");
		
	}
	public boolean hasErrors() {
		Element orderDetailsElem = getModel("OriginalOrder");
		if (!YRCPlatformUI.isVoid(YRCXmlUtils.getAttribute(orderDetailsElem,
				"HasError")) && !( "N".equals(YRCXmlUtils.getAttribute(orderDetailsElem,
				"HasError"))))
			return true;
		return false;
	}
	
//	public void getPlacedOrderErrors(){
//		Element orderDetailsElem = getModel("OriginalOrder");
//		Element orderExtn = YRCXmlUtils.getChildElement(orderDetailsElem, "Extn");
//		String webConfNumber=orderExtn.getAttribute("ExtnWebConfNum");
//		String orderType=orderDetailsElem.getAttribute("OrderType");
//		String status=orderDetailsElem.getAttribute("Status");
//		if((!XPXUtils.isFullFillmentOrder(orderDetailsElem))&&"Placed".equals(status))
//		{	
//
//			
//			Element orderElement=YRCXmlUtils.createFromString("<Order><ComplexQuery Operation='OR'><Or><Exp Name='OrderType' Value='STOCK_ORDER' QryType='EQ'/>"	
//			+"<Exp Name='OrderType' Value='DIRECT_ORDER' QryType='EQ'/>"
//			+"<Exp Name='OrderType' Value='SPECIAL_ORDER' QryType='EQ'/>"
//			+"<Exp Name='OrderType' Value='THIRD_PARTY' QryType='EQ'/>"
//			+"</Or></ComplexQuery></Order>").getDocumentElement();
//			Element OrderChildEle=YRCXmlUtils.createChild(orderElement, "Extn");
//			OrderChildEle.setAttribute("ExtnWebConfNum", webConfNumber);
//			Document doc=orderElement.getOwnerDocument();
//			YRCApiContext ctx = new YRCApiContext();
//			ctx.setFormId("com.xpedx.sterling.rcp.pca.orderlines.wizard.XPXOrderLinesWizard");
//			ctx.setApiName("getOrderList");
//			
//			ctx.setInputXml(doc);
//			if (!page.isDisposed())
//				callApi(ctx, page);
//			
//		}
//
//		
//	}
	
	private void stampPlacedOrderErrors(Element outXml) {
		boolean currOrdIsErrored = false;
		errList = new ArrayList<String>();
		List nodesList = null;
		if("Order".equals(outXml.getNodeName())){
			nodesList = new ArrayList();
			nodesList.add(outXml);
			currOrdIsErrored = true;
		} else {
			nodesList = YRCXmlUtils.getChildren(outXml, "Order");
		}
		
		
		
		for (Object object : nodesList) {
			Element ele=(Element) object;
			String orderNo = "";
			if(currOrdIsErrored) {
				orderNo=ele.getAttribute("OrderNo");
			}
			String errorCodetmp="";
			String errorCode="";
			String enviCode=YRCXmlUtils.getAttributeValue(ele, "/Order/Extn/@ExtnEnvtId");
			Element custExtn = YRCXmlUtils.getChildElement(ele, "Extn");
			if(!YRCPlatformUI.isVoid(custExtn)){
			errorCodetmp=custExtn.getAttribute("ExtnHeaderStatusCode");
			errorCode=enviCode+"_"+errorCodetmp;
			}
			if(!YRCPlatformUI.isVoid(errorCodetmp)){
				if(!("M0000".equals(errorCodetmp)))
				getErrorCodesforPlacedOrder(orderNo,errorCode);	
			}
			
		}
		
	}
	
	public void preaprePlacedOrderHeaderErrors(){
	PlacedOrderHeaderErrorTable.put("M_M0002","Order not found in change mode");
	PlacedOrderHeaderErrorTable.put("M_M0003",	"Order in use in change mode");
	PlacedOrderHeaderErrorTable.put("M_M0004",	"Order status not valid in change mode");
	PlacedOrderHeaderErrorTable.put("M_M0005",	"Order not found for delete in change mode");
	PlacedOrderHeaderErrorTable.put("M_M0006",	"Customer # does not exist in customer master file");
	PlacedOrderHeaderErrorTable.put("M_M0007",	"This Customer/Ship-To has been Suspended");
	PlacedOrderHeaderErrorTable.put("M_M0008",	"This ship-to number is not on file");
	PlacedOrderHeaderErrorTable.put("M_M0009",	"Order status not valid for delete");
	PlacedOrderHeaderErrorTable.put("M_M0010",	"Order in use, delete not allowed");
	PlacedOrderHeaderErrorTable.put("M_M0020"	,"Invalid request date");
	PlacedOrderHeaderErrorTable.put("M_M0021",	"Order source code is required for this company");
	PlacedOrderHeaderErrorTable.put("M_M0023",	"Warehouse ID is not valid");
	PlacedOrderHeaderErrorTable.put("M_M0036",	"Next shipping date is taken");
	PlacedOrderHeaderErrorTable.put("M_M0037",	"date/warehouse/carrier is not in the date file");
	PlacedOrderHeaderErrorTable.put("M_M0037"	,"date/warehouse/carrier is not in the date file");
	PlacedOrderHeaderErrorTable.put("M_M0039"	,"Company number sent is zero or blank");
	PlacedOrderHeaderErrorTable.put("M_M0040",	"Customer number sent is zero or blank");
	PlacedOrderHeaderErrorTable.put("M_M0097",	"Requested ship date is a far off date in future, ship date is invalid or blank");
	PlacedOrderHeaderErrorTable.put("M_M0099",	"Environment sent is invalid");
	
	PlacedOrderHeaderErrorTable.put("A_01" ,"Invalid Order Nbr");
	PlacedOrderHeaderErrorTable.put("A_02" ,"Invalid Customer Order Number");
	PlacedOrderHeaderErrorTable.put("A_05" ,"Invalid Ship To Suffix");
	PlacedOrderHeaderErrorTable.put("A_08" ,"Invalid Branch Number Ship From");
	PlacedOrderHeaderErrorTable.put("A_09" ,"Invalid Required Date");
	PlacedOrderHeaderErrorTable.put("A_10" ,"Invalid Promise Date");
	PlacedOrderHeaderErrorTable.put("A_12" ,"Order Status must ='',C,F,H,I,P");
	PlacedOrderHeaderErrorTable.put("A_17" ,"Invalid Backorder Status");
	PlacedOrderHeaderErrorTable.put("A_24" ,"Invalid State Code");
	PlacedOrderHeaderErrorTable.put("A_36" ,"Invalid Freight in Amount");
	PlacedOrderHeaderErrorTable.put("A_37" ,"Invalid Freight out Amount");
	PlacedOrderHeaderErrorTable.put("A_39" ,"Invalid Address");
	PlacedOrderHeaderErrorTable.put("A_46" ,"Too many Header Comments");
	PlacedOrderHeaderErrorTable.put("A_47" ,"Invalid Customer Order Date");
	PlacedOrderHeaderErrorTable.put("A_49" ,"'S' Order Promise Date > 7 Days Out");
	PlacedOrderHeaderErrorTable.put("A_52" ,"Rush Order");
	PlacedOrderHeaderErrorTable.put("A_58","Header Comment Added .com");
	


}
private void preparePlaceOrderLineErrors() {
	
	
	PlacedOrderLineError.put("M_M0000","");
	PlacedOrderLineError.put("M_M0011","Invalid Line Type");
	PlacedOrderLineError.put("M_M0012",	"Item number is not in the item master file");
	PlacedOrderLineError.put("M_M0013",	"This item is suspended - cannot be ordered.");
	PlacedOrderLineError.put("M_M0014",	"Quantity(s) are invalid");
	PlacedOrderLineError.put("M_M0019",	"Invalid line code provided for header code send");
	PlacedOrderLineError.put("M_M0022",	"If change or delete is attempted on a direct order.");
	PlacedOrderLineError.put("M_M0024"	,"Header process code(NHOPCD) = 'A' and line process");
	PlacedOrderLineError.put("M_M0025",	"Header process code(NHOPCD) = 'D' and line process");
	PlacedOrderLineError.put("M_M0029",	"Invalid Customer UOM");
	PlacedOrderLineError.put("M_M0030",	"Invalid MAX UOM");
	PlacedOrderLineError.put("M_M0031",	"If the customer ordered UOM is not there a Base UO");
	PlacedOrderLineError.put("M_M0075"	,"Qty ordered > 9999999");
	PlacedOrderLineError.put("M_M0078"	,"Item number in IAXRF");
	PlacedOrderLineError.put("M_M0080",	"Invalid Order Multiple");
	PlacedOrderLineError.put("M_M0098",	"Item not found in ITBAL");
	
	PlacedOrderLineError.put("A_00" ,"Product Not Found, Changed");
	PlacedOrderLineError.put("A_03" ,"Invalid Part Key");
	PlacedOrderLineError.put("A_07" ,"Invalid Branch Number Ship From");
	PlacedOrderLineError.put("A_08" ,"Invalid Base Unit");
	PlacedOrderLineError.put("A_09" ,"Invalid Order Quantity");
	PlacedOrderLineError.put("A_13" ,"Invalid Unit of Measure");
	PlacedOrderLineError.put("A_14" ,"Invalid Unit Price");
	PlacedOrderLineError.put("A_15" ,"Invalid Item Type");
	PlacedOrderLineError.put("A_16" ,"Invalid Commodity Code");
	PlacedOrderLineError.put("A_17" ,"Invalid Required Date");
	PlacedOrderLineError.put("A_18" ,"Invalid Promise Date");
	PlacedOrderLineError.put("A_26" ,"Invalid Bacorder Switch");
	PlacedOrderLineError.put("A_28" ,"Invalid Customer Part Number");
	PlacedOrderLineError.put("A_29" ,"Unit Price Not Equal");
	PlacedOrderLineError.put("A_31" ,"Backorder Quantity Created");
	PlacedOrderLineError.put("A_32" ,"Cannot Add Line to Backorder");
	PlacedOrderLineError.put("A_36","Non Stock Added on .com");
	PlacedOrderLineError.put("A_37","Line Comments Added on .com");

	
}
	private void getErrorCodesforPlacedOrder(String orderNo, String errorCode) {
		
		if(PlacedOrderHeaderErrorTable.containsKey(errorCode)){
			String listVal="Error: "+orderNo+((!YRCPlatformUI.isVoid(orderNo))?"-":"")+PlacedOrderHeaderErrorTable.get(errorCode);
			errList.add(listVal);
			
		}else{
			String list="Unknown Header Error";
			errList.add(list);
		}
		
	}
	public Element getTargetModel(String modelName){
		return getModel(modelName);
	}
	
	private void setEnableMarkCompleteButton() {
		
		Element orderDetailsElem = getModel("OriginalOrder");
		String orderType=orderDetailsElem.getAttribute("OrderType");
		if(XPXUtils.isPlaced(orderDetailsElem) && XPXConstants.ORD_TYPE_CUSTOMER.equals(orderType)){
		if(isfailedOrder){
			getControl("btnMarkOrderComplete").setEnabled(true);
		}
				
		}
	}
	public int getNoOfProductLines() {
		return noOfProductLines;
	}
	public int getNoOfOtherLines() {
		return noOfOtherLines;
	}

	// Adding checkOrderLockFlag() - to Disable Order Update button @Header/Misc panel and Delete
	// buttons @order line level - part of CR changes (2582) 
	//By checking following conditions -  only Fulfillment Order Types,not for Draft Orders statuses & ExtnOrderLockFlag=Y then
	// this method will return TRUE & show lable error@OrderHeader Panel as required.
	public boolean checkOrderLockFlag() 
	{
	
		Element orginalOrderDetailsElem = getModel("OriginalOrder");
		String extnOrderLockFlag = "",isDraftOrder,ordType,isOrderStatus;		
		if (!YRCPlatformUI.isVoid(orginalOrderDetailsElem))
			{
				extnOrderLockFlag = YRCXmlUtils.getAttributeValue(
				orginalOrderDetailsElem, "Order/Extn/@ExtnOrderLockFlag");
				isDraftOrder=YRCXmlUtils.getAttributeValue(
				orginalOrderDetailsElem, "Order/@DraftOrderFlag");
				isOrderStatus=YRCXmlUtils.getAttributeValue(
						orginalOrderDetailsElem, "Order/@Status");
				ordType=YRCXmlUtils.getAttributeValue(
				orginalOrderDetailsElem, "Order/@OrderType");
				if(extnOrderLockFlag.equalsIgnoreCase("Y") && !(ordType.equalsIgnoreCase("Customer")) && !(isDraftOrder.equalsIgnoreCase("Y"))  &&  !(isOrderStatus.equalsIgnoreCase("Cancelled")))
					{ 

					return true;
					}
			
			}
		return false;
	}
	//Added for JIRA 4323
	public boolean checkPermananentOrderLockFlag() 
	{
	
		Element orginalOrderDetailsElem = getModel("OriginalOrder");
		String extnOUFailureLockFlag = "",isDraftOrder,ordType,isOrderStatus;		
		if (!YRCPlatformUI.isVoid(orginalOrderDetailsElem))
			{
			extnOUFailureLockFlag = YRCXmlUtils.getAttributeValue(orginalOrderDetailsElem, "Order/Extn/@ExtnOUFailureLockFlag");
				if(extnOUFailureLockFlag.equalsIgnoreCase("Y"))
					{ 
					page.setAllButtonsEnabled(false);
					readOnlyPage = true;
						return true;
					}
			
			}
		return false;
	}
	
	private Document validateTotalOrderAmountValue(String totalOrderAmount){
		Document validationDoc = YRCXmlUtils.createDocument("Order");
		validationDoc.getDocumentElement().setAttribute("TotalOrderAmount", totalOrderAmount);
		if(totalOrderAmount!=null)
		{
			long totalAmt = Math.round(Double.parseDouble(totalOrderAmount));
			//long maxOrderAmount = Math.round(Double.parseDouble(getMaxOrderAmount()));
			long minOrderAmount = Math.round(Double.parseDouble(getMinOrderAmount()));
			/*if(maxOrderAmount!=0 && totalAmt > maxOrderAmount){
				validationDoc.getDocumentElement().setAttribute("MaxOrderAmount", getMaxOrderAmount());
				validationDoc.getDocumentElement().setAttribute("MinChargeAmount", getMinChargeAmount());
			}*/
			if(minOrderAmount!=0 && totalAmt < minOrderAmount){
				validationDoc.getDocumentElement().setAttribute("MinOrderAmount", getMinOrderAmount());
				validationDoc.getDocumentElement().setAttribute("MinChargeAmount", getMinChargeAmount());
			}
		}
		return validationDoc;
	}

	public void sendNeedAttentionMail() {
		
		Element orderEle=getModel("OriginalOrder");
		YRCXmlUtils.getString(orderEle);
		if(!YRCPlatformUI.isVoid(orderEle)){
		String shipNode = orderEle.getAttribute("ShipNode");
		String webConfirmationNo=YRCXmlUtils.getAttributeValue(orderEle, "Order/Extn/@ExtnWebConfNum");
		String holdType="";
		if(!YRCPlatformUI.isVoid(webConfirmationNo)){
		Element eleOrderHoldTypes = YRCXmlUtils.getChildElement(orderEle, "OrderHoldTypes");
		List listOrderHold = YRCXmlUtils.getChildren(eleOrderHoldTypes, "OrderHoldType");
		
		for (Object objOrderHold : listOrderHold) {
			Element eleOrderHold = (Element) objOrderHold;
			if("NEEDS_ATTENTION".equals(eleOrderHold.getAttribute("HoldType")) && "1100".equals(eleOrderHold.getAttribute("Status"))){
				holdType=eleOrderHold.getAttribute("HoldType");
			}
		}
		
		Element docEle=YRCXmlUtils.createFromString("<Order OrderHeaderKey='" + YRCXmlUtils.getAttribute(this.inputElement, "OrderHeaderKey") + "' ShipNode='"+shipNode+"' />").getDocumentElement();
		Element eleExtnOrderEle = YRCXmlUtils.createChild(docEle, "Extn");
		eleExtnOrderEle.setAttribute("ExtnWebConfNum", webConfirmationNo);
		Element eleHoldTypes=YRCXmlUtils.createChild(docEle, "OrderHoldTypes");
		Element eleHoldType=YRCXmlUtils.createChild(eleHoldTypes, "OrderHoldType");
		eleHoldType.setAttribute("HoldType", holdType);
		eleHoldType.setAttribute("Status", "1100");
		
		Document inputDoc=docEle.getOwnerDocument();
		YRCXmlUtils.getString(inputDoc);
		YRCApiContext ctx = new YRCApiContext();
		ctx.setFormId("com.xpedx.sterling.rcp.pca.orderlines.wizard.XPXOrderLinesWizard");
		ctx.setApiName("XPXSendCSREmailService");
		ctx.setInputXml(inputDoc);
		if (!page.isDisposed())
			callApi(ctx, page);
		}
		}
		
	}
	//Added for JIRA 4326, If the order has both Needs_Attention hold and permanenet hold then show the RemoveNeedsAttention Button
	private void RemoveNeedsAttentionButtonVisibility(Element outXml) {
			Element originalOrderEle= outXml;
			String holdType = null;
			String extnOUFailureLockFlag = "N";
    		//System.out.println("The order element is :" + YRCXmlUtils.getString(originalOrderEle));
    		extnOUFailureLockFlag = YRCXmlUtils.getAttributeValue(outXml, "OrderList/Order/Extn/@ExtnOUFailureLockFlag");
    		
    		Element eleOrderHoldTypes = YRCXmlUtils.getXPathElement(originalOrderEle, "OrderList/Order/OrderHoldTypes"); 
    	//	System.out.println(YRCXmlUtils.getString(eleOrderHoldTypes));
    		List listOrderHold = YRCXmlUtils.getChildren(eleOrderHoldTypes, "OrderHoldType");
    		
    		for (Object objOrderHold : listOrderHold) {
    			Element eleOrderHold = (Element) objOrderHold;
    			if("NEEDS_ATTENTION".equals(eleOrderHold.getAttribute("HoldType")) && "1100".equals(eleOrderHold.getAttribute("Status"))){
    				holdType=eleOrderHold.getAttribute("HoldType");
    			}
    		}
    		if ("Y".equalsIgnoreCase(extnOUFailureLockFlag)&& "NEEDS_ATTENTION".equalsIgnoreCase(holdType)){
    			setControlVisible("btnIsReviewed", true);
    		}
    		
    		//Element referenceElement = getModel("OrderDetails");
    		String OrderStatus = YRCXmlUtils.getAttributeValue(outXml, "OrderList/Order/@MaxOrderStatus");
    		
    		if(OrderStatus!= null && !("".equalsIgnoreCase(OrderStatus))){
    			Double f = Double.valueOf(OrderStatus);
	    		Double webhld = 1100.5450;
	    		if( f > webhld  ){
	    			YRCXmlUtils.getXPathElement(outXml, "OrderList/Order/Extn").setAttribute("ExtnWebHoldFlag","N");
	    		}
    		}
    		
    	}
	//Added for JIRA 4326. If the needs attention button clicked the hold status should be changed to 1300
	public void changeHoldStatus() {
		Element orderEle=getModel("OriginalOrder");
		YRCXmlUtils.getString(orderEle);
		if(!YRCPlatformUI.isVoid(orderEle)){
		String webConfirmationNo=YRCXmlUtils.getAttributeValue(orderEle, "Order/Extn/@ExtnWebConfNum");
		String holdType="";
		if(!YRCPlatformUI.isVoid(webConfirmationNo)){
		Element eleOrderHoldTypes = YRCXmlUtils.getChildElement(orderEle, "OrderHoldTypes");
		List listOrderHold = YRCXmlUtils.getChildren(eleOrderHoldTypes, "OrderHoldType");
		
		for (Object objOrderHold : listOrderHold) {
			Element eleOrderHold = (Element) objOrderHold;
			if("NEEDS_ATTENTION".equals(eleOrderHold.getAttribute("HoldType")) && "1100".equals(eleOrderHold.getAttribute("Status"))){
				holdType=eleOrderHold.getAttribute("HoldType");
				setControlVisible("btnIsReviewed", false);
			}
		}
		
		 Element elemModel = YRCXmlUtils.createDocument("Order")
			.getDocumentElement();
		 elemModel.setAttribute("OrderHeaderKey", orderHeaderKey);
		 elemModel.setAttribute("Override", "Y");
	
		 Element eleHoldTypes=YRCXmlUtils.createChild(elemModel, "OrderHoldTypes");
		 Element eleHoldType=YRCXmlUtils.createChild(eleHoldTypes, "OrderHoldType");
		 eleHoldType.setAttribute("HoldType", holdType);
		 eleHoldType.setAttribute("Status", "1300");
		
		Document inputDoc=elemModel.getOwnerDocument();
		YRCXmlUtils.getString(inputDoc);
		YRCApiContext ctx = new YRCApiContext();
		ctx.setFormId("com.xpedx.sterling.rcp.pca.orderlines.wizard.XPXOrderLinesWizard");
		ctx.setApiName("changeOrder");
		ctx.setInputXml(inputDoc);
		if (!page.isDisposed())
			callApi(ctx, page);
		}
		}
		
	}

}