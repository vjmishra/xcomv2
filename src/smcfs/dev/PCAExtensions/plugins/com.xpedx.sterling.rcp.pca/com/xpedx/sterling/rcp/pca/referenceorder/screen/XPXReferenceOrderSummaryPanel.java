package com.xpedx.sterling.rcp.pca.referenceorder.screen;

import java.util.ArrayList;
import java.util.Iterator;

import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.w3c.dom.Element;

import com.xpedx.sterling.rcp.pca.util.XPXUtils;
import com.yantra.yfc.rcp.IYRCComposite;
import com.yantra.yfc.rcp.IYRCPanelHolder;
import com.yantra.yfc.rcp.YRCConstants;
import com.yantra.yfc.rcp.YRCPlatformUI;
import com.yantra.yfc.rcp.YRCScrolledCompositeListener;
import com.yantra.yfc.rcp.YRCTableBindingData;
import com.yantra.yfc.rcp.YRCTblClmBindingData;
import com.yantra.yfc.rcp.YRCXmlUtils;

/**
 * @author sdodda
 * 
 * Generated by MTCE Copyright © 2005, 2006 Sterling Commerce, Inc. All Rights
 * Reserved.
 */

public class XPXReferenceOrderSummaryPanel extends Composite implements IYRCComposite {

	public static final String FORM_ID = "com.xpedx.sterling.rcp.pca.referenceorder.screen.XPXReferenceOrderSummaryPanel";

	private Composite pnlRoot = null;
	private XPXReferenceOrderSummaryPanelBehavior myBehavior;

	private Composite pnlTitleHeader;
	private Composite pnlPrimaryInformation;
	private Composite pnlOrderHdr;
	private Composite pnlLines;
	private ScrolledComposite scrolledPnlforLines;
	private Composite compositeHolder;
	Composite pnlDynamicLineParent;
	private Composite pnlTitleOrderLines;
	private Composite MiscPnl;
	private ScrolledComposite scrolledPnlforHdr;
	private YRCScrolledCompositeListener scrolledPnlforLinesLsnr;
	private Object inputObject;
	
	private Table tblOrderLines;
	private TableColumn clmLineNo;
	private TableColumn clmItemID;
	private TableColumn clmLineType;
	private TableColumn clmQuantity;
	private TableColumn clmReqUOM;
	private TableColumn clmDesc;
	private TableColumn clmUnitPriceInPricingUOM;
	private TableColumn clmPricingUOM;


	private int pnlNo;

	public Button btnResubmit;

	public XPXReferenceOrderSummaryPanel(Composite parent, int style, Object inputObject) {
		super(parent, style);
		this.inputObject=inputObject;
		pnlNo = 1;
		initialize();
		setBindingForComponents();
		myBehavior = new XPXReferenceOrderSummaryPanelBehavior(this, FORM_ID, inputObject);

	}

	private void initialize() {
		createRootPanel();
		this.setLayout(new FillLayout());
		setSize(new org.eclipse.swt.graphics.Point(1000, 200));
	}

	public String getFormId() {
		return FORM_ID;
	}

	public Composite getRootPanel() {
		return pnlRoot;
	}

	private void createRootPanel() {
		GridLayout gridLayout5 = new GridLayout();
		gridLayout5.verticalSpacing = 2;
		gridLayout5.marginHeight = 0;
		gridLayout5.marginWidth = 0;
		pnlRoot = new Composite(this, SWT.NONE);
		pnlRoot.setData("yrc:customType", "TaskComposite");
		pnlRoot.setData("name", "parent");
		pnlRoot.setLayout(gridLayout5);
		showRootPanel(true);
		createComposite();
		createCompositeHolder();

	}

	private void createCompositeHolder() {
		GridLayout gridLayout6 = new GridLayout();
		gridLayout6.marginWidth = 0;
		gridLayout6.marginHeight = 0;
		GridData gridData9 = new GridData();
		gridData9.horizontalAlignment = 4;
		gridData9.grabExcessHorizontalSpace = true;
		gridData9.verticalAlignment = 2;
		compositeHolder = new Composite(getRootPanel(), 0);
		compositeHolder.setLayoutData(gridData9);
		compositeHolder.setLayout(gridLayout6);
		compositeHolder.setData("yrc:customType", "TaskComposite");
		compositeHolder.setData("name", "compositeHolder");
		createMiscPnl();
	}

	private void createMiscPnl() {
		GridData gridData6 = new GridData();
		gridData6.horizontalAlignment = 1;
		gridData6.grabExcessHorizontalSpace = true;
		gridData6.horizontalSpan = 1;
		gridData6.horizontalIndent = 0;
		gridData6.verticalAlignment = 2;
		GridData gridData16 = new GridData();
		gridData16.horizontalAlignment = 3;
		gridData16.grabExcessHorizontalSpace = true;
		gridData16.horizontalSpan = 1;
		gridData16.horizontalIndent = 0;
		gridData16.verticalAlignment = 2;
		GridLayout gridLayout4 = new GridLayout();
		gridLayout4.numColumns = 7;
		gridLayout4.horizontalSpacing = 2;
		gridLayout4.marginWidth = 5;
		gridLayout4.marginHeight = 1;
		gridLayout4.makeColumnsEqualWidth = false;
		GridData gridData5 = new GridData();
		gridData5.grabExcessHorizontalSpace = true;
		gridData5.verticalAlignment = 4;
		gridData5.horizontalAlignment = 4;

		MiscPnl = new Composite(compositeHolder, 0);
		MiscPnl.setLayoutData(gridData5);
		MiscPnl.setLayout(gridLayout4);
		MiscPnl.setData("name", "MiscPnl");

		btnResubmit = new Button(MiscPnl, 0);
		btnResubmit.setText("Resubmit All");
		btnResubmit.setLayoutData(gridData16);
		btnResubmit.setToolTipText("Resubmit line");
		btnResubmit.setData("name", "btnResubmit");
		btnResubmit.setImage(YRCPlatformUI.getImage("Refresh"));
		btnResubmit.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { 
			public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) {    
				myBehavior.reprocessReferenceOrder();
			}
		});
		btnResubmit.setVisible(false);
		
	}

	private void createComposite() {
		createHeaderComposite();
		createPnlOrderLines();
	}
	
	private void createHeaderComposite()
    {
        GridLayout gridLayout5 = new GridLayout();
        gridLayout5.marginWidth = 1;
        gridLayout5.marginHeight = 1;
        gridLayout5.verticalSpacing = 0;
        gridLayout5.horizontalSpacing = 0;
        GridData gridData21 = new GridData();
        gridData21.horizontalAlignment = 4;
        gridData21.grabExcessHorizontalSpace = true;
        gridData21.grabExcessVerticalSpace = false;
        gridData21.verticalAlignment = 4;
        pnlTitleHeader = new Composite(getRootPanel(), 0);
        pnlTitleHeader.setLayoutData(gridData21);
        pnlTitleHeader.setLayout(gridLayout5);
        pnlTitleHeader.setData("name", "pnlTitleHeader");
        XPXUtils.addGradientPanelHeader(pnlTitleHeader, "Primary_Details",true);
        GridLayout gridLayout1 = new GridLayout();
		gridLayout1.marginWidth = 1;
		gridLayout1.marginHeight = 1;
		GridData gridData = new GridData();
		gridData.horizontalAlignment = 4;
		gridData.grabExcessHorizontalSpace = true;
		gridData.verticalAlignment = 4;
		gridData.heightHint = 200;
        pnlOrderHdr = new Composite(getRootPanel(), 0);
        pnlOrderHdr.setLayoutData(gridData);
        pnlOrderHdr.setLayout(gridLayout1);
        pnlOrderHdr.setData("name", "pnlOrderHdr");
        createPnlHeaderPrimaryInfo();
    }
	
	private void createPnlHeaderPrimaryInfo() {
        
        GridData gridData1 = new GridData();
		gridData1.horizontalAlignment = 4;
		gridData1.grabExcessHorizontalSpace = true;
		gridData1.grabExcessVerticalSpace = false;
		gridData1.verticalAlignment = 4;
		gridData1.heightHint = 200; 
		scrolledPnlforHdr = new ScrolledComposite(pnlOrderHdr, SWT.V_SCROLL);
		scrolledPnlforHdr.setLayoutData(gridData1);
		scrolledPnlforHdr.setExpandHorizontal(true);
		scrolledPnlforHdr.setExpandVertical(true);
		scrolledPnlforHdr.setAlwaysShowScrollBars(true);

		GridLayout gridLayout = new GridLayout();
		gridLayout.numColumns = 1;
		gridLayout.verticalSpacing = 1;
		gridLayout.marginWidth = 0;
		gridLayout.marginHeight = 0;
		gridLayout.horizontalSpacing = 5;
		GridData gridData0 = new GridData();
		gridData0.horizontalAlignment = 4;
		gridData0.grabExcessVerticalSpace = true;
		gridData0.grabExcessHorizontalSpace = true;
		gridData0.verticalAlignment = 4;
		pnlPrimaryInformation = new Composite(scrolledPnlforHdr, 0);
		pnlPrimaryInformation.setLayoutData(gridData0);
		pnlPrimaryInformation.setLayout(gridLayout);
		pnlPrimaryInformation.setData("name", "pnlPrimaryInformation");
		pnlPrimaryInformation.setData("yrc:customType", "TaskComposite");
		
		GridLayout gridLayoutScroll = new GridLayout();
		
		scrolledPnlforHdr.setLayout(gridLayoutScroll);
		scrolledPnlforHdr.setContent(pnlPrimaryInformation);
		scrolledPnlforHdr.setData("yrc:customType", "TaskComposite");
		scrolledPnlforHdr.setData("name", "scrolledPnlforHdr");

	}

	private void createPnlOrderLines()
    {
        GridLayout gridLayout = new GridLayout();
        gridLayout.numColumns = 1;
        gridLayout.marginWidth = 1;
        gridLayout.verticalSpacing = 1;
        gridLayout.marginHeight = 1;
        gridLayout.horizontalSpacing = 0;
        gridLayout.makeColumnsEqualWidth = false;
        GridData gridData11 = new GridData();
        gridData11.horizontalAlignment = 4;
        gridData11.grabExcessHorizontalSpace = true;
        gridData11.horizontalSpan = 4;
        gridData11.verticalSpan = 1;
        gridData11.grabExcessVerticalSpace = true;
        gridData11.verticalAlignment = 4;
        gridData11.exclude = true;
        gridData11.minimumHeight = 100;
        GridLayout gridLayout5 = new GridLayout();
        gridLayout5.marginWidth = 1;
        gridLayout5.marginHeight = 1;
        gridLayout5.verticalSpacing = 0;
        gridLayout5.horizontalSpacing = 0;
        GridData gridData21 = new GridData();
        gridData21.horizontalAlignment = 4;
        gridData21.grabExcessHorizontalSpace = true;
        gridData21.grabExcessVerticalSpace = false;
        gridData21.horizontalSpan = 2;
        gridData21.verticalAlignment = 4;
		pnlTitleOrderLines = new Composite(getRootPanel(), 0);
        pnlTitleOrderLines.setLayoutData(gridData21);
        pnlTitleOrderLines.setLayout(gridLayout5);
        XPXUtils.addGradientPanelHeader(pnlTitleOrderLines, "Order_Lines", true);

        GridLayout gridLayout1 = new GridLayout();
		gridLayout1.marginWidth = 1;
		gridLayout1.marginHeight = 1;
		GridData gridData = new GridData();
		gridData.horizontalAlignment = 4;
		gridData.grabExcessHorizontalSpace = true;
		gridData.grabExcessVerticalSpace = true;
		gridData.verticalAlignment = 4;
        pnlLines = new Composite(getRootPanel(), 0);
        pnlLines.setLayoutData(gridData);
        pnlLines.setLayout(gridLayout1);
        pnlLines.setData("name", "composite");
        createScrolledComposite();
//        createOrderLinesTable();
    }
	
	private void createOrderLinesTable(){
		tblOrderLines = new Table(pnlLines, SWT.WRAP | SWT.MULTI | SWT.FULL_SELECTION);
		
		tblOrderLines.setHeaderVisible(true);
	
		tblOrderLines.setLinesVisible(true);
		tblOrderLines.setData(YRCConstants.YRC_CONTROL_NAME, "tblOrderLines");
		
		GridData tblSearchResultslayoutData = new GridData();
		tblSearchResultslayoutData.horizontalAlignment = 4;
		tblSearchResultslayoutData.verticalAlignment = 4;
		tblSearchResultslayoutData.grabExcessHorizontalSpace = true;
		tblSearchResultslayoutData.grabExcessVerticalSpace = true;
		tblOrderLines.setLayoutData(tblSearchResultslayoutData);
		
		clmLineNo = new TableColumn(tblOrderLines, SWT.LEFT);
		clmLineNo.setAlignment(SWT.LEFT);
		clmLineNo.setText("Line_No");
		clmLineNo.setWidth(20);
		clmLineNo.setResizable(true);
		clmLineNo.setMoveable(false);
		
		clmItemID = new TableColumn(tblOrderLines, SWT.LEFT);
		clmItemID.setAlignment(SWT.LEFT);
		clmItemID.setText("Item_ID");
		clmItemID.setWidth(80);
		clmItemID.setResizable(true);
		clmItemID.setMoveable(false);
		
		clmLineType = new TableColumn(tblOrderLines, SWT.LEFT);
		clmLineType.setAlignment(SWT.LEFT);
		clmLineType.setText("Line_Type");
		clmLineType.setWidth(80);
		clmLineType.setResizable(true);
		clmLineType.setMoveable(false);
		
		clmQuantity = new TableColumn(tblOrderLines, SWT.LEFT);
		clmQuantity.setAlignment(SWT.RIGHT);
		clmQuantity.setText("Req_Quantity");
		clmQuantity.setWidth(50);
		clmQuantity.setResizable(true);
		clmQuantity.setMoveable(false);
		
		clmReqUOM = new TableColumn(tblOrderLines, SWT.LEFT);
		clmReqUOM.setAlignment(SWT.LEFT);
		clmReqUOM.setText("Req_UOM");
		clmReqUOM.setWidth(60);
		clmReqUOM.setResizable(true);
		clmReqUOM.setMoveable(false);
		
		clmDesc = new TableColumn(tblOrderLines, SWT.LEFT);
		clmDesc.setAlignment(SWT.LEFT);
		clmDesc.setText("Description");
		clmDesc.setWidth(130);
		clmDesc.setResizable(true);
		clmDesc.setMoveable(false);
		
		clmUnitPriceInPricingUOM = new TableColumn(tblOrderLines, SWT.LEFT);
		clmUnitPriceInPricingUOM.setAlignment(SWT.RIGHT);
		clmUnitPriceInPricingUOM.setText("Unit_Price");
		clmUnitPriceInPricingUOM.setWidth(60);
		clmUnitPriceInPricingUOM.setResizable(true);
		clmUnitPriceInPricingUOM.setMoveable(false);
		
		clmPricingUOM = new TableColumn(tblOrderLines, SWT.LEFT);
		clmPricingUOM.setAlignment(SWT.LEFT);
		clmPricingUOM.setText("Price_UOM");
		clmPricingUOM.setWidth(60);
		clmPricingUOM.setResizable(true);
		clmPricingUOM.setMoveable(false);

	}

	private void setBindingForComponents() {
		
		if(false){
		//Binding Order Lines
		// Search Results Table bindings
        YRCTableBindingData tblOrderLinesbd = new YRCTableBindingData();
		tblOrderLinesbd.setName("tblOrderLines");
		tblOrderLinesbd.setSourceBinding("OriginalOrder:XPXRefOrderHdr/XPXRefOrderLineList/XPXRefOrderLine");
	
		YRCTblClmBindingData tblOrderLinesClmBd[] = new YRCTblClmBindingData[8];
		int tblOrderLinesCounter=0;
		
		tblOrderLinesClmBd[tblOrderLinesCounter] = new YRCTblClmBindingData();
		tblOrderLinesClmBd[tblOrderLinesCounter].setName("clmLineNo");
		tblOrderLinesClmBd[tblOrderLinesCounter].setAttributeBinding("@PrimeLineNO");		
		tblOrderLinesClmBd[tblOrderLinesCounter].setFilterReqd(true);
		tblOrderLinesClmBd[tblOrderLinesCounter].setColumnBinding("Line_No");
		tblOrderLinesCounter++;
		tblOrderLinesClmBd[tblOrderLinesCounter] = new YRCTblClmBindingData();
		tblOrderLinesClmBd[tblOrderLinesCounter].setName("clmItemID");
		tblOrderLinesClmBd[tblOrderLinesCounter].setAttributeBinding("@ItemID");		
		tblOrderLinesClmBd[tblOrderLinesCounter].setFilterReqd(true);
		tblOrderLinesClmBd[tblOrderLinesCounter].setColumnBinding("Item_ID");
		tblOrderLinesCounter++;
		tblOrderLinesClmBd[tblOrderLinesCounter] = new YRCTblClmBindingData();
		tblOrderLinesClmBd[tblOrderLinesCounter].setName("clmLineType");
		tblOrderLinesClmBd[tblOrderLinesCounter].setAttributeBinding("@LineType");		
		tblOrderLinesClmBd[tblOrderLinesCounter].setFilterReqd(true);
		tblOrderLinesClmBd[tblOrderLinesCounter].setColumnBinding("Line_Type");
		tblOrderLinesCounter++;
		tblOrderLinesClmBd[tblOrderLinesCounter] = new YRCTblClmBindingData();
		tblOrderLinesClmBd[tblOrderLinesCounter].setName("clmQuantity");
		tblOrderLinesClmBd[tblOrderLinesCounter].setAttributeBinding("@OrderedQty");		
		tblOrderLinesClmBd[tblOrderLinesCounter].setFilterReqd(true);
		tblOrderLinesClmBd[tblOrderLinesCounter].setColumnBinding("Req_Quantity");
		tblOrderLinesCounter++;
		tblOrderLinesClmBd[tblOrderLinesCounter] = new YRCTblClmBindingData();
		tblOrderLinesClmBd[tblOrderLinesCounter].setName("clmReqUOM");
		tblOrderLinesClmBd[tblOrderLinesCounter].setAttributeBinding("@TransactionalUOM");		
		tblOrderLinesClmBd[tblOrderLinesCounter].setFilterReqd(true);
		tblOrderLinesClmBd[tblOrderLinesCounter].setColumnBinding("Req_UOM");
		tblOrderLinesCounter++;
		tblOrderLinesClmBd[tblOrderLinesCounter] = new YRCTblClmBindingData();
		tblOrderLinesClmBd[tblOrderLinesCounter].setName("clmDesc");
		tblOrderLinesClmBd[tblOrderLinesCounter].setAttributeBinding("@ItemDesc");		
		tblOrderLinesClmBd[tblOrderLinesCounter].setFilterReqd(true);
		tblOrderLinesClmBd[tblOrderLinesCounter].setColumnBinding("Description");
		tblOrderLinesCounter++;
		tblOrderLinesClmBd[tblOrderLinesCounter] = new YRCTblClmBindingData();
		tblOrderLinesClmBd[tblOrderLinesCounter].setName("clmUnitPriceInPricingUOM");
		tblOrderLinesClmBd[tblOrderLinesCounter].setAttributeBinding("@UnitPrice");
		tblOrderLinesClmBd[tblOrderLinesCounter].setCurrencyXPath("OriginalOrder:/XPXRefOrderHdr/@Currency");
		tblOrderLinesClmBd[tblOrderLinesCounter].setFilterReqd(true);
		tblOrderLinesClmBd[tblOrderLinesCounter].setColumnBinding("Unit_Price");
		tblOrderLinesCounter++;
		tblOrderLinesClmBd[tblOrderLinesCounter] = new YRCTblClmBindingData();
		tblOrderLinesClmBd[tblOrderLinesCounter].setName("clmPricingUOM");
		tblOrderLinesClmBd[tblOrderLinesCounter].setAttributeBinding("@PricingUOM");		
		tblOrderLinesClmBd[tblOrderLinesCounter].setFilterReqd(true);
		tblOrderLinesClmBd[tblOrderLinesCounter].setColumnBinding("Price_UOM");
		 
		tblOrderLinesbd.setTblClmBindings(tblOrderLinesClmBd) ;
		tblOrderLinesbd.setSortRequired(true);
		tblOrderLinesbd.setDefaultSort(true);
		tblOrderLines.setData(YRCConstants.YRC_TABLE_BINDING_DEFINATION, tblOrderLinesbd);
		}
	}

	private void createScrolledComposite() {
		GridData gridData1 = new GridData();
		gridData1.horizontalAlignment = 4;
		gridData1.grabExcessHorizontalSpace = true;
		gridData1.grabExcessVerticalSpace = true;
		gridData1.verticalAlignment = 4;
		scrolledPnlforLines = new ScrolledComposite(pnlLines, 512);
		scrolledPnlforLines.setLayoutData(gridData1);
		scrolledPnlforLines.setExpandHorizontal(true);
		scrolledPnlforLines.setExpandVertical(true);
		scrolledPnlforLines.setAlwaysShowScrollBars(false);
		scrolledPnlforLinesLsnr = new YRCScrolledCompositeListener(scrolledPnlforLines);

		createComposite1();
		scrolledPnlforLines.setLayout(new GridLayout());
		scrolledPnlforLines.setContent(pnlDynamicLineParent);
		scrolledPnlforLines.setData("yrc:customType", "TaskComposite");
		scrolledPnlforLines.setData("name", "scrolledComposite");
	}

	private void createComposite1() {
		GridLayout gridLayout = new GridLayout();
		gridLayout.numColumns = 1;
		gridLayout.verticalSpacing = 5;
		gridLayout.marginWidth = 0;
		gridLayout.marginHeight = 0;
		gridLayout.horizontalSpacing = 5;
		GridData gridData0 = new GridData();
		gridData0.horizontalAlignment = 4;
		gridData0.grabExcessVerticalSpace = true;
		gridData0.grabExcessHorizontalSpace = true;
		gridData0.verticalAlignment = 4;
		pnlDynamicLineParent = new Composite(scrolledPnlforLines, 0);
		pnlDynamicLineParent.setLayout(gridLayout);
		pnlDynamicLineParent.setData("name", "pnlDynamicPnlParent");
		pnlDynamicLineParent.setLayoutData(gridData0);
		pnlDynamicLineParent.setData("yrc:customType", "TaskComposite");
		XPXUtils.paintPanel(pnlDynamicLineParent);

	}

	public void createLines(ArrayList listOrderLine) {
		for (int i = 0; i < listOrderLine.size(); i++){
			Element eleOrdLine = (Element) listOrderLine.get(i);
			createLine(i,eleOrdLine);
		}
		adjustScrollPnl(scrolledPnlforLines, pnlDynamicLineParent, pnlLines, false, true);

	}

	public void adjustHdrScrollPnl(ScrolledComposite scrPnl, Composite scrChild, Composite scrParent, boolean isHScrollReqd, boolean isVScrollReqd) {
		scrPnl.setMinSize(5, 1000);
		scrParent.layout(true, true);
	}
	
	public void adjustScrollPnl(ScrolledComposite scrPnl, Composite scrChild, Composite scrParent, boolean isHScrollReqd, boolean isVScrollReqd) {
		Control childIterator[] = scrChild.getChildren();
		int noOfChildren = childIterator.length;
		int HEIGHT = 5;
		int WIDTH = 5;
		int selectedHeight = 0;
		int selectedPanelHeight = 0;
		for (int k = 0; k < noOfChildren; k++) {
			int boundHeight = childIterator[k].getBounds().height;
			int boundWidth = childIterator[k].getBounds().width;
			if (isVScrollReqd) {
				HEIGHT += boundHeight + 5;
				if (WIDTH < boundWidth)
					WIDTH = boundWidth;
			}
			if (!isHScrollReqd)
				continue;
			WIDTH += boundWidth + 5;
			if (HEIGHT < boundHeight)
				HEIGHT = boundHeight;
		}

		scrPnl.setMinSize(WIDTH, HEIGHT);
		
		if (isVScrollReqd && (selectedHeight < scrPnl.getOrigin().y || selectedHeight + selectedPanelHeight > scrPnl.getSize().y + scrPnl.getOrigin().y))
			scrPnl.setOrigin(0, selectedHeight);
		scrParent.layout(true, true);
	}

	public void createHeader(Element eleOrderDetails) {
		GridData gridData0 = new GridData();
		gridData0.horizontalAlignment = 4;
		gridData0.grabExcessVerticalSpace = false;
		gridData0.grabExcessHorizontalSpace = true;
		gridData0.verticalAlignment = 4;
		eleOrderDetails = YRCXmlUtils.getCopy(eleOrderDetails);
		XPXRefOrderHeaderPanel pnlHeader = new XPXRefOrderHeaderPanel(pnlPrimaryInformation, this, SWT.NONE, inputObject, eleOrderDetails);

		pnlHeader.setData("name", "pnlHeader");
		pnlHeader.setLayoutData(gridData0);
		pnlHeader.setCompositeWidths();
		adjustScrollPnl(scrolledPnlforHdr, pnlPrimaryInformation, pnlOrderHdr, false, true);
	}
	
	private XPXRefOrderLinePanel createLine(int i, Element eleOrderLine) {
		GridData gridData0 = new GridData();
		gridData0.horizontalAlignment = 4;
		gridData0.grabExcessVerticalSpace = false;
		gridData0.grabExcessHorizontalSpace = true;
		gridData0.verticalAlignment = 4;
		Object inObject = inputObject;
		eleOrderLine = YRCXmlUtils.getCopy(eleOrderLine);
		XPXRefOrderLinePanel repeatingLinePnl1 = new XPXRefOrderLinePanel(pnlDynamicLineParent, this, SWT.NONE, inObject, pnlNo, eleOrderLine);
		pnlNo++;
		repeatingLinePnl1.setData("name", "repeatingLinePnl");
		repeatingLinePnl1.setLayoutData(gridData0);
		repeatingLinePnl1.addListener(26, scrolledPnlforLinesLsnr);
		repeatingLinePnl1.setCompositeWidths();
		return repeatingLinePnl1;
	}

	public void showRootPanel(boolean show) {
		pnlRoot.setVisible(show);
	}

	public IYRCPanelHolder getPanelHolder() {
		return null;
	}

	public String getHelpId() {
		return null;
	}

	public void setModelforOrderLines(ArrayList children, String orderHeaderKey, boolean isDraftOrder) {
		setVisible(false);
		pnlRoot.setRedraw(false);
		int k = 0;
		for (Iterator i$ = children.iterator(); i$.hasNext();) {
			Element orderLineElem = (Element) i$.next();

		}
	}

	public XPXReferenceOrderSummaryPanelBehavior getPageBehavior() {
		return myBehavior;
	}
}
