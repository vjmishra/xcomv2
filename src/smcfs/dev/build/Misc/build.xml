<?xml version="1.0" ?>
<project name="Build Script For xpedx_smcfs" default="all" basedir=".">
	
    <property file="build.properties"/>
	<property environment="env"/>

	<import file="${env.INSTALL_DIR}/bin/buildcomapplication.xml"/>
	
	<path id="implementation.class.path">
			
		<fileset dir="${env.INSTALL_DIR}/jar/smcfs/9.0">
			<include name="**/*.jar"/>
		</fileset>
		
		<fileset dir="${env.INSTALL_DIR}/jar/commons_digester/1_8">
			<include name="*.jar"/>
		</fileset>
		
		<fileset dir="${env.INSTALL_DIR}/jar/platform_afc/5_5">
			<include name="**/*.jar"/>
		</fileset>

		<fileset dir="${env.INSTALL_DIR}/jar/platform_uifwk">
			<include name="**/*.jar"/>
		</fileset>
		
		<fileset dir="${env.INSTALL_DIR}/jar/platform/5_5">
			<include name="**/*.jar"/>
		</fileset>
		
		<fileset dir="${env.INSTALL_DIR}/jar/log4j/1_2_15">
			<include name="**/*.jar"/>
		</fileset>
		
		<fileset dir="${env.INSTALL_DIR}/repository/eardata/platform/war/yfscommon">
			<include name="**/*.jar"/>
		</fileset>
		
		<fileset dir="${env.INSTALL_DIR}/jar/platform_afc_ui_impl/5_5">
			<include name="**/*.jar"/>
		</fileset>	


		<fileset dir="${env.INSTALL_DIR}/jar/scecore/9.0">
			<include name="**/*.jar"/>
		</fileset>			
		
	
		<fileset dir="${env.INSTALL_DIR}/jar">
			<include name="*.jar"/>
		</fileset>
		
		<fileset dir="${wls.dir}/wlserver_10.3/server/lib">
			<include name="wlfullclient.jar"/>
		</fileset>
		
		<fileset dir="${devhome}/Foundation/jar">
			<include name="*.jar"/>
		</fileset>
		
		<fileset dir="${env.INSTALL_DIR}/jar/commons_collections/3_2">
			<include name="*.jar"/>
		</fileset>
		
		<fileset dir="${env.INSTALL_DIR}/jar/COM_Add-in/9.0_9.0">
			<include name="*.jar"/>
		</fileset>
	</path>

	<!--<taskdef resource="checkstyletask.properties"
         classpath="${devhome}/Checkstyle/checkstyle-all-4.4.jar"/>-->
	
	<path id="project.class.path">
		<path refid="implementation.class.path" />
	</path>

	
	<target name="smcfsBuild"  depends="clean, build-jars, copy-files, deploy-extensions, build-ear" description="Executes some of the targets">

		</target>
	
	<target name="all"  depends="clean, cvs-fetch, build-jars, copy-files, deploy-extensions, cdt_import, build-ear,build-pca" description="Executes all the targets">

	</target>  
	
	<!-- Cleans the custom code in INSTALL_DIR -->
	<target name="clean" description="Deletes directories" >
		
		<!-- Delete directories -->
		<delete dir="${env.INSTALL_DIR}/repository/xapi/template/merged/xsl/extn" />
		<delete dir="${env.INSTALL_DIR}/extensions/global" />		
	    <delete dir="${devhome}"/>

		<!-- Re-create directories -->
		<mkdir dir="${env.INSTALL_DIR}/repository/xapi/template/merged/xsl/extn" />
		<mkdir dir="${devhome}"/>
		<mkdir dir="${devhome}/dist" />
	</target>
	
	<target name="cdt_import_setup" description="Cleans old files and untars latest" >
		
		<!-- Delete directories -->
		<delete dir="${cdt.import.dir}" />

		<!-- Re-create directories -->
		<mkdir dir="${cdt.import.dir}" />

		<!-- now get them from master config -->
		<unzip src="${cdt.master.zip.file}" dest="${cdt.import.dir}"/>
	</target>
	
	<target name="cdt_export_setup" description="Cleans old files and untars latest" >
		
		<!-- Delete directories -->
		<delete dir="${cdt.export.dir}" />

		<!-- Re-create directories -->
		<mkdir dir="${cdt.export.dir}" />

	</target>
	
	<!-- Fetches the smcfs save the sale modules from CVS respository -->
	<target name="cvs-fetch"  description="Fetches from CVS">
		<!-- First create the CVS fetch directory -->
		<mkdir dir="${cvs.fetch.dir}"/>
        <cvs cvsRoot=":pserver:${cvs.user}:${cvs.pass}@${cvs.server}:${cvs.root}" package="${cvs.module.name}" dest="${cvs.fetch.dir}"/> 
	</target>   

  	<target name="build-jars" description="Make Jar">
		<!-- Compile the java source files -->
        <delete dir="${devhome}/dist/Foundation/classes" />
        <mkdir dir="${devhome}/dist/Foundation/classes" />
		
		<javac classpathref="project.class.path" destdir="${devhome}/dist/Foundation/classes" executable="${env.JAVA_HOME}/bin/javac" debug="on" debuglevel="lines,vars,source">
			<src path="${devhome}/src">
			
			</src>
        </javac>

		<!-- Makes the project jar file -->
		<!--Create version file -->    		
        <tstamp>
            <format property="NOW" pattern="EEE, MMMM dd yyyy hh:mm aa z" />
        </tstamp>    	

		<echo file="${devhome}/dist/version.txt">
			Build Version: ${project.name} V ${release.version}
			Build Date: ${NOW}
		</echo>

		<!--Copy the version.txt-->
        <copy file="${devhome}/dist/version.txt" todir="${devhome}/dist/Foundation/classes"/>
	
        <jar destfile="${devhome}/dist/Foundation/${project.name}.jar" basedir="${devhome}/dist/Foundation/classes">
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <section name="version-information">
                    <attribute name="Version" value="${release.version}" />
                    <attribute name="BuildDate" value="${NOW}" />
                </section>
			</manifest>
        </jar>
   	</target>

	<target name="copy-files" description="Deploys the project files in the relevant folders of MCF Installation">

		<!--Copy templates -->
        <echo>Copy the project specific repository to repository folder of APP</echo>

        <copy todir="${env.INSTALL_DIR}/repository/">
			<fileset dir="${devhome}/Foundation/repository">
				<exclude name="**/CVS" />
			</fileset>
		</copy>


		<!--Copy resources-->
        <echo>Copy the project specific resources to resources folder of APP</echo>

        <copy todir="${env.INSTALL_DIR}/resources/">
			<fileset dir="${devhome}/Foundation/resources">
				<exclude name="**/CVS" />
			</fileset>
		</copy>

		<!--Copy properties-->
        <echo>Copy the project specific properties to properties folder of APP</echo>

		<copy todir="${env.INSTALL_DIR}/properties/" overwrite="true">
			<fileset dir="${devhome}/Foundation/properties">
				<exclude name="**/CVS" />
			</fileset>
		</copy> 

		<!--Copy extensions-->
        <echo>Copy the project specific extensions to extensions folder of APP</echo>

		<copy todir="${env.INSTALL_DIR}/extensions/" overwrite="true">
			<fileset dir="${devhome}/Foundation/extensions">
				<exclude name="**/test.txt" />
			</fileset>
		</copy>
	</target>
	<target name="deploy-extensions" description="Deploys extensions on MCF app">		

		<exec dir="${env.INSTALL_DIR}/bin" executable="${env.INSTALL_DIR}/bin/setupfiles.sh" failonerror="true" />

		<exec executable="${env.INSTALL_DIR}/bin/${install3rdPartyCommand}" failonerror="true">
		 <!-- TODO: check why this is referred as vendor -->
			  <arg value="${appserver.vendor}"/>
			  <arg value="10_3"/>
			  <arg value="-j"/>
			  <arg value="${devhome}/dist/Foundation/${project.name}.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="EVERY"/>
		</exec>					
		<exec executable="${env.INSTALL_DIR}/bin/${install3rdPartyCommand}" failonerror="true">
		 <!-- TODO: check why this is referred as vendor -->
			  <arg value="${appserver.vendor}"/>
			  <arg value="10_3"/>
			  <arg value="-j"/>
			  <arg value="${wls.dir}/wlserver_10.3/server/lib/wlfullclient.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="EVERY"/>
		</exec>
		<exec executable="${env.INSTALL_DIR}/bin/${install3rdPartyCommand}" failonerror="true">
		 <!-- TODO: check why this is referred as vendor -->
			  <arg value="${appserver.vendor}"/>
			  <arg value="10_3"/>
			  <arg value="-j"/>
			  <arg value="${devhome}/Foundation/jar/axiom-api-1.2.8.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="EVERY"/>
		</exec>
		<exec executable="${env.INSTALL_DIR}/bin/${install3rdPartyCommand}" failonerror="true">
		 <!-- TODO: check why this is referred as vendor -->
			  <arg value="${appserver.vendor}"/>
			  <arg value="10_3"/>
			  <arg value="-j"/>
			  <arg value="${devhome}/Foundation/jar/axiom-impl-1.2.8.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="EVERY"/>
		</exec>
		<exec executable="${env.INSTALL_DIR}/bin/${install3rdPartyCommand}" failonerror="true">
		 <!-- TODO: check why this is referred as vendor -->
			  <arg value="${appserver.vendor}"/>
			  <arg value="10_3"/>
			  <arg value="-j"/>
			  <arg value="${devhome}/Foundation/jar/axis.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="EVERY"/>
		</exec>
		<exec executable="${env.INSTALL_DIR}/bin/${install3rdPartyCommand}" failonerror="true">
		 <!-- TODO: check why this is referred as vendor -->
			  <arg value="${appserver.vendor}"/>
			  <arg value="10_3"/>
			  <arg value="-j"/>
			  <arg value="${devhome}/Foundation/jar/axis2-adb-1.5.1.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="EVERY"/>
		</exec>
		<exec executable="${env.INSTALL_DIR}/bin/${install3rdPartyCommand}" failonerror="true">
		 <!-- TODO: check why this is referred as vendor -->
			  <arg value="${appserver.vendor}"/>
			  <arg value="10_3"/>
			  <arg value="-j"/>
			  <arg value="${devhome}/Foundation/jar/axis2-adb-codegen-1.5.1.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="EVERY"/>
		</exec>
		<exec executable="${env.INSTALL_DIR}/bin/${install3rdPartyCommand}" failonerror="true">
		 <!-- TODO: check why this is referred as vendor -->
			  <arg value="${appserver.vendor}"/>
			  <arg value="10_3"/>
			  <arg value="-j"/>
			  <arg value="${devhome}/Foundation/jar/axis2-kernel-1.5.1.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="EVERY"/>
		</exec>
		<exec executable="${env.INSTALL_DIR}/bin/${install3rdPartyCommand}" failonerror="true">
		 <!-- TODO: check why this is referred as vendor -->
			  <arg value="${appserver.vendor}"/>
			  <arg value="10_3"/>
			  <arg value="-j"/>
			  <arg value="${devhome}/Foundation/jar/axis2-saaj-1.5.1.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="EVERY"/>
		</exec>
		<exec executable="${env.INSTALL_DIR}/bin/${install3rdPartyCommand}" failonerror="true">
		 <!-- TODO: check why this is referred as vendor -->
			  <arg value="${appserver.vendor}"/>
			  <arg value="10_3"/>
			  <arg value="-j"/>
			  <arg value="${devhome}/Foundation/jar/axis2-spring-1.5.1.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="EVERY"/>
		</exec>
		<exec executable="${env.INSTALL_DIR}/bin/${install3rdPartyCommand}" failonerror="true">
		 <!-- TODO: check why this is referred as vendor -->
			  <arg value="${appserver.vendor}"/>
			  <arg value="10_3"/>
			  <arg value="-j"/>
			  <arg value="${devhome}/Foundation/jar/axis2-transport-http-1.5.1.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="EVERY"/>
		</exec>
		<exec executable="${env.INSTALL_DIR}/bin/${install3rdPartyCommand}" failonerror="true">
		 <!-- TODO: check why this is referred as vendor -->
			  <arg value="${appserver.vendor}"/>
			  <arg value="10_3"/>
			  <arg value="-j"/>
			  <arg value="${devhome}/Foundation/jar/axis2-transport-local-1.5.1.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="EVERY"/>
		</exec>
		<exec executable="${env.INSTALL_DIR}/bin/${install3rdPartyCommand}" failonerror="true">
		 <!-- TODO: check why this is referred as vendor -->
			  <arg value="${appserver.vendor}"/>
			  <arg value="10_3"/>
			  <arg value="-j"/>
			  <arg value="${devhome}/Foundation/jar/commons-httpclient-3.1.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="EVERY"/>
		</exec>
		<exec executable="${env.INSTALL_DIR}/bin/${install3rdPartyCommand}" failonerror="true">
		 <!-- TODO: check why this is referred as vendor -->
			  <arg value="${appserver.vendor}"/>
			  <arg value="10_3"/>
			  <arg value="-j"/>
			  <arg value="${devhome}/Foundation/jar/wsdl4j-1.6.2.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="EVERY"/>
		</exec>
		<exec executable="${env.INSTALL_DIR}/bin/${install3rdPartyCommand}" failonerror="true">
		 <!-- TODO: check why this is referred as vendor -->
			  <arg value="${appserver.vendor}"/>
			  <arg value="10_3"/>
			  <arg value="-j"/>
			  <arg value="${devhome}/Foundation/jar/xmlbeans-2.3.0.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="EVERY"/>
		</exec>
		<exec executable="${env.INSTALL_DIR}/bin/${install3rdPartyCommand}" failonerror="true">
		 <!-- TODO: check why this is referred as vendor -->
			  <arg value="${appserver.vendor}"/>
			  <arg value="10_3"/>
			  <arg value="-j"/>
			  <arg value="${devhome}/Foundation/jar/commons-codec-1.1.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="EVERY"/>
		</exec>
		<exec executable="${env.INSTALL_DIR}/bin/${install3rdPartyCommand}" failonerror="true">
		 <!-- TODO: check why this is referred as vendor -->
			  <arg value="${appserver.vendor}"/>
			  <arg value="10_3"/>
			  <arg value="-j"/>
			  <arg value="${devhome}/Foundation/jar/httpcore-4.0.1.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="EVERY"/>
		</exec>
		<exec executable="${env.INSTALL_DIR}/bin/${install3rdPartyCommand}" failonerror="true">
		 <!-- TODO: check why this is referred as vendor -->
			  <arg value="${appserver.vendor}"/>
			  <arg value="10_3"/>
			  <arg value="-j"/>
			  <arg value="${devhome}/Foundation/jar/neethi-2.0.1.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="EVERY"/>
		</exec>
		<exec executable="${env.INSTALL_DIR}/bin/${install3rdPartyCommand}" failonerror="true">
		 <!-- TODO: check why this is referred as vendor -->
			  <arg value="${appserver.vendor}"/>
			  <arg value="10_3"/>
			  <arg value="-j"/>
			  <arg value="${devhome}/Foundation/jar/XmlSchema-1.1.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="EVERY"/>
		</exec>
		<exec executable="${env.INSTALL_DIR}/bin/${deployerCommand}" failonerror="true">
			<arg value="-t"/>
			<arg value="resourcejar"/>
		</exec>

		<exec executable="${env.INSTALL_DIR}/bin/${deployerCommand}" failonerror="true">
			<arg value="-t"/>
			<arg value="entitydeployer"/>
		</exec> 
	</target>
	
	<target name="cdt_import" depends="cdt_import_setup" description="Imports the CDT XML files from Master Config">

		<exec executable="${env.INSTALL_DIR}/bin/${cdtCommand_import}">
			<arg value="${cdt.file.db.import}" />
			<arg value="${cdt.dev.db}"/>
			<arg value="${cdt.dev.password}"/>							  
		</exec>
	</target>
	
	<target name="cdt_export" depends="cdt_export_setup" description="Exports the Master Config as CDT XML files">

		<exec executable="${env.INSTALL_DIR}/bin/${cdtCommand_export}">
			<arg value="${cdt.mc.db}" />
			<arg value="${cdt.mc.password}"/>
			<arg value="${cdt.file.db.export}"/>							  
		</exec>

		<!-- create a new master config zip -->
		<zip destfile="${cdt.master.zip.file}" basedir="${cdt.export.dir}" whenempty="create"/>
		
	</target>
	
	<target name="build-ear" description="Builds EAR file for deployment">		
		<exec executable="${env.INSTALL_DIR}/bin/${buildEarCommand}">
			<arg value="-Dappserver=${appserver.vendor}"/>
			<arg value="-Dwarfiles=smcfs,sma,sbc"/>
			<arg value="-Dearfile=smcfs.ear"/>
			<arg value="-Dnodocear=true"/>
			<arg value="-Ddevmode=true"/>							  
			<!--arg value="-Dnowebservice=true"/-->
			<arg value="create-ear"/>							  
		</exec>
		
		<!--<antcall target="deploy-ear"/>-->
	</target>
	
	<!--<target name="deploy-ear">
		<copy file="${env.INSTALL_DIR}/external_deployments/smcfs.ear" todir="${wls.deploy.dir}" /> 
	</target>-->
	
	
	<target name="convertEARtoWAR">
		 <unzip src="${earpath}/${earname}.ear" dest="${tempdir}/ear-tmp"/>
		 <zip update="true" destfile="${tempdir}/ear-tmp/${earname}.war" >
			 <zipfileset dir="${tempdir}/ear-tmp" includes="*.jar" prefix="WEB-INF/lib"/>
		 </zip>
		 <copy todir="${smcfs_war_folder}" file="${tempdir}/ear-tmp/${warname_smcfs}.war" overwrite="true"/>
		 <delete dir="${tempdir}"/>
		 <!--<delete dir="${smcfs_war_folder_exploded}"/>-->
		 <!--<mkdir dir="${smcfs_war_folder_exploded}"/>-->
		 <unzip src="${smcfs_war_folder}/${warname_smcfs}.war" dest="${smcfs_war_folder_exploded}" overwrite="true"/>
		 <delete dir="${smcfs_war_folder}"/>
	 </target>
	 
	 	
	<target name="make-release"><!-- depends="cvs-fetch">-->
		
		<delete dir="${release.dir}"/>
		
		<mkdir dir="${release.dir}" />
		<mkdir dir="${release.dir}/temp" />
		<mkdir dir="${release.dir}/temp/Foundation" />
		<mkdir dir="${release.dir}/temp/Foundation/src" />
		<!--mkdir dir="${release.dir}/temp/Foundation/repository" /-->
		<!--mkdir dir="${release.dir}/temp/Foundation/resources" /-->
		<mkdir dir="${release.dir}/temp/Foundation/extensions" />
		<mkdir dir="${release.dir}/temp/Foundation/properties" />
		<!--<mkdir dir="${release.dir}/temp/Foundation/jar" />-->

		<copy todir="${release.dir}/temp/Foundation/src/com">
			<fileset dir="${devhome}/Foundation/src/com">
				<exclude name="**/CVS" />
				<exclude name="**/dummy.txt" />
			</fileset>
		</copy>
                
               
		<copy todir="${release.dir}/temp/Foundation/repository">
			<fileset dir="${devhome}/Foundation/repository">
				<exclude name="**/CVS" />
				<exclude name="**/dummy.txt" />
			</fileset>
		</copy>
<!--
        <copy todir="${release.dir}/temp/Foundation/resources">
			<fileset dir="${devhome}/Foundation/resources">
				<exclude name="**/CVS" />
				<exclude name="**/dummy.txt" />
			</fileset>
		</copy-->
<!--
        <copy todir="${release.dir}/temp/Foundation/jar">
			<fileset dir="${devhome}/Foundation/jar">
				<exclude name="**/CVS" />
				<exclude name="**/dummy.txt" />
				<exclude name="**/checkstyle.xsl" />
				<exclude name="**/com.atlassw.tools.eclipse.checkstyle_4.4.2-bin.zip" />
			</fileset>
		</copy>-->

        <copy todir="${release.dir}/temp/Foundation/extensions">
			<fileset dir="${devhome}/Foundation/extensions">
				<exclude name="**/CVS" />
				<exclude name="**/dummy.txt" />
			</fileset>
		</copy>
		
		<!--copy todir="${release.dir}/temp/Foundation/global">
			<fileset dir="${devhome}/Foundation/global">
				<exclude name="**/CVS" />
				<exclude name="**/dummy.txt" />
			</fileset>
		</copy-->
		
		<copy todir="${release.dir}/temp/Foundation/properties">
			<fileset dir="${devhome}/Foundation/properties">
				<exclude name="**/CVS" />
				<exclude name="**/dummy.txt" />
			</fileset>
		</copy>
		
		<copy file="${devhome}/dist/version.txt" todir="${release.dir}/temp"/>
		
		<zip destfile="${release.dir}/${project.name}_CODE_${release.version}.zip" basedir="${release.dir}/temp" >
			<exclude name="**/CVS" />
			<exclude name="**/dummy.txt" />
		</zip>

	</target>
	<path id="pca.class.path">
			<fileset dir="${env.INSTALL_DIR}/rcp/COM/9.0/platform/rcpclient" includes="**/*.jar"/>	
		    <fileset dir="${env.INSTALL_DIR}/rcp/COM/9.0/platform/rcpdependencies/windows/eclipse/plugins" includes="**/*.jar"/>	
	</path>
	
	<!-- Build PCA. -->
	<target name="build-pca">
		
		<antcall target="prepare-rcp-extn-folder" />
		<antcall target="jar-plugin-clients" />
		<antcall target="refresh-custom-plugins"/>
		<antcall target="buildCOMForWindows"/>
	</target>
	
	<!-- deletes and creates destination rcpdrop folder -->
	<target name="prepare-rcp-extn-folder">
		<delete dir="${devhome}/dist/rcpdrop" />
		<mkdir dir="${devhome}/dist/rcpdrop/plugins" />
		<mkdir dir="${devhome}/dist/rcpdrop/truststore" />
		<mkdir dir="${devhome}/dist/rcpdrop/resources" />
		<!--
		<copy todir="${devhome}/dist/rcpdrop/truststore">
			<fileset dir="${pca.extn.folder}/truststore">
				<exclude name="**/CVS/**"/>
			</fileset>
		</copy>
		
		<copy todir="${devhome}/dist/rcpdrop/resources">
			<fileset dir="${pca.extn.folder}/resources">
				<exclude name="**/CVS/**"/>
			</fileset>
		</copy>
		-->
	</target>
	
	<target name="jar-plugin-clients"  description="Compile client java code and builds jar." >
		<echo>Compiling classes</echo>
		<macro-build-pca-classes pluginid="${pca.custom.plugin.id}"/>
		<echo message="${pca.custom.plugin.id} plugin classes are built."/>
		<macro-jar-pca-client pluginid="${pca.custom.plugin.id}" version="${pca.custom.plugin.version}"/>
		<echo message="${pca.custom.plugin.id}_${pca.custom.plugin.version}.jar is built."/>
	</target>
	
	<!--This target copies the custom plugin jars to the Foundation RCP_EXTN_FOLDER.-->
	<target name="refresh-custom-plugins">
	
		<delete dir="${env.INSTALL_DIR}/rcpextnworkarea/plugins"/>
		<mkdir dir="${env.INSTALL_DIR}/rcpextnworkarea/plugins"/>
		<copy todir="${env.INSTALL_DIR}/rcpextnworkarea/plugins">
			<fileset dir="${devhome}/dist/rcpdrop/plugins">
				<exclude name="**/CVS/**"/>
				<include name="**/*.jar"/>
			</fileset>
		</copy>
	</target>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: macro-build-pca-classes
          Compiles the PCA client side code and jars the class files
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="macro-build-pca-classes">
        <attribute name="pluginid" />
    	<sequential>
    		<delete dir="${devhome}/dist/rcpdrop/plugins/@{pluginid}"/>
   			<mkdir dir="${devhome}/dist/rcpdrop/plugins/@{pluginid}"/>    		
    		<javac srcdir="${pca.extn.folder}/plugins/@{pluginid}" 
    				destdir="${devhome}/dist/rcpdrop/plugins/@{pluginid}" executable="${env.JAVA_HOME}/bin/javac" fork="true">
    			<classpath refid="pca.class.path" />
    		</javac>
    	</sequential>
    </macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: macro-jar-pca-client
          Builds the final Jar file containing the PCA client
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="macro-jar-pca-client">
        <attribute name="pluginid" />
    	<attribute name="version" />
    	<sequential>
    		<copy file="${pca.extn.folder}/plugins/@{pluginid}/META-INF/MANIFEST.MF" tofile="${pca.extn.folder}/plugins/@{pluginid}/META-INF/MANIFEST.MF.Release"/>
    		<replace file="${pca.extn.folder}/plugins/@{pluginid}/META-INF/MANIFEST.MF.Release" token="Bundle-Version: 1.0.0" value="Bundle-Version: @{version}"/>
    		<jar destfile="${devhome}/dist/rcpdrop/plugins/@{pluginid}_@{version}.jar"
    			manifest="${pca.extn.folder}/plugins/@{pluginid}/META-INF/MANIFEST.MF.Release">
    			<fileset dir="${pca.extn.folder}/plugins/@{pluginid}" >
    		 		<include name="resources/**"/>
					<include name="schema/**"/>
					<include name="icons/**"/>
    		 		<include name="*.ythm"/>
    		 		<include name="*.ycfg"/>
    				<include name="*.ywx"/>
    		 		<include name="*.yuix"/>
    		 		<include name="**/*.ycml"/>
					<include name="**/*.xml"/>
    		 		<include name="*.properties"/>
    		 		<include name="*.xml"/>
    		 	</fileset>
    			<fileset dir="${devhome}/dist/rcpdrop/plugins/@{pluginid}" >
    		 		<include name="**"/>
    		 	</fileset>
    	 	</jar>
    		<delete file="${pca.extn.folder}/plugins/@{pluginid}/META-INF/MANIFEST.MF.Release"/>
    		<delete dir="${devhome}/dist/rcpdrop/plugins/@{pluginid}"/>
    	</sequential>
    </macrodef>
</project>

