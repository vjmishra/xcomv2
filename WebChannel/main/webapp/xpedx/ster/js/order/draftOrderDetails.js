function checkOut()
{
    var otherForm = document.QuickAddForm;
    clearErrorMessages(otherForm);
    clearErrorLabels(otherForm);

    document.getElementById("validationActionName").value = "saveCartDetails";
    if(swc_validateForm("OrderDetailsForm") == false)
    {
        return;
    }

    document.OrderDetailsForm.action = document.getElementById('checkoutURL');
    document.OrderDetailsForm.submit();
}

function addProductsToOrder()
{
    if(QuickAddElems.length > 0)
    {
        document.QuickAddForm.action = document.getElementById('addProductsToOrderURL');
        document.QuickAddForm.submit();
    }
}

function update()
{
    var otherForm = document.QuickAddForm;
    clearErrorMessages(otherForm);
    clearErrorLabels(otherForm);

    document.getElementById("validationActionName").value = "draftOrderModifyLineItems";
    if(swc_validateForm("OrderDetailsForm") == false)
    {
        return;
    }
    document.OrderDetailsForm.action = document.getElementById('updateURL');
    document.OrderDetailsForm.submit();
}

function removeItems()
{
    var otherForm = document.QuickAddForm;
    clearErrorMessages(otherForm);
    clearErrorLabels(otherForm);

    document.getElementById("validationActionName").value = "draftOrderDeleteLineItems";
    if(swc_validateForm("OrderDetailsForm") == false)
    {
        return;
    }

    document.OrderDetailsForm.action = document.getElementById('removeItemsURL');
    document.OrderDetailsForm.submit();

    return;
}

function trim(src) {
    return src.replace(/^\s+|\s+$/g,"");
}

var QuickAddElems = new Array();
var deleteStringFromForm = "";
var addStringFromForm = "";

function addProductToQuickAddList(element)
{
	
	//alert("-LP10- addProductToQuickAddList ..")
    var theForm = element.form;

    var otherForm = document.OrderDetailsForm;
    clearErrorMessages(otherForm);
    clearErrorLabels(otherForm);

    var sku = trim(theForm.qaProductID.value);
    var quantity = trim(theForm.qaQuantity.value);

    if(sku == "")
    {
        alertString = theForm.localizedMissingProductIDMessage.value;
        alert(alertString);
        return;
    }
    if(quantity == "")
    {
        quantity = 1;
        theForm.qaQuantity.value = quantity;
    }

    document.getElementById("validationActionNameQA").value = "draftOrderAddOrderLines";
    if(swc_validateForm("QuickAddForm") == false)
    {
        theForm.qaQuantity.focus();
        return;
    }

    QuickAddElems[QuickAddElems.length] =
    {
            sku: sku,
            quantity: quantity
    }

    theForm.qaProductID.value = "";
    theForm.qaQuantity.value = "";

    // Kludge to get localized string from the form for use in the HTML
    // generated by redrawQuickAddList.  It counts on the fact that the
    // first time redrawQuickAddList will be called on the page is for
    // the add.  If it were to be called beforehand, there would be no
    // deleteStringFromForm set.
    if(deleteStringFromForm == "")
    {
        deleteStringFromForm = theForm.localizedDeleteLabel.value;
    }
    if(addStringFromForm == "")
    {
        addStringFromForm = theForm.localizedAddToCartLabel.value;
    }
    redrawQuickAddList(element);

    theForm.qaProductID.focus();

    return false;
}

function removeProductFromQuickAddList(index)
{
    QuickAddElems.splice(index, 1);

    redrawQuickAddList();
}

function encodeForHTML(source)
{
    return source.toString().replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;"); 
} 

function redrawQuickAddList()
{
    var tabIndex = 210;
    var code = '<table width="80%" class="listTableBody">';
    for(var i=0 ; i < QuickAddElems.length ; i++)
    {
        code += '<tr>';
        code += '<td align="left" width="60%">';
        code += encodeForHTML(QuickAddElems[i].sku);
        code += '<input type="hidden" name="enteredProductIDs" value="' + encodeForHTML(QuickAddElems[i].sku) + '"/>';
        code += '</td>';
        code += '<td align="right" width="20%">';
        code += encodeForHTML(QuickAddElems[i].quantity);
        code += '<input type="hidden" name="enteredQuantities" value="' + encodeForHTML(QuickAddElems[i].quantity) + '"/>';
        code += '</td>';
        code += '<td align="right" width="20%">';
        code += '<a href="#" onclick="javascript:removeProductFromQuickAddList(' + i + ');" tabindex="' + tabIndex++ + '">' + deleteStringFromForm + '</a>';
        code += '</td>';
    }
    code += '<tr>';
    if(QuickAddElems.length > 0)
    {
        code += '<td align="right" colspan="3">';
        code += '<input type="button" onclick="javascript:addProductsToOrder()" name="addProdsToOrder" value="' + addStringFromForm + '" class="submitBtnBg3" tabIndex="' + tabIndex++ + '"/>';
        code += '</td>';
        code += '</tr>';
    }
    code += '</table>';

    theDiv = document.getElementById("QuickAddList");
    theDiv.innerHTML = code;

    svg_classhandlers_decoratePage();
}

function showEditHeader()
{
    DialogPanel.show("editHeaderDialog");
    svg_classhandlers_decoratePage();

    var initialFocus = Ext.get("cartName");
    if(initialFocus == null)
    {
        initialFocus = Ext.get("selectedCurrency");
    }
    if(initialFocus != null)
    {
        initialFocus.focus.defer(1000, initialFocus);
    }
}

function showAllComplementaryItems(orderLineKey)
{
    for(var index=0; ; index++)
    {
        var element = Ext.get("comp" + orderLineKey + "-" + index);
        if(element == null)
        {
            break;
        }

        element.setDisplayed("");
    }

    var element = Ext.get("comp" + orderLineKey + "-more");
    element.setDisplayed("none");

    svg_classhandlers_decoratePage();
}

function addComplmentaryItemToCart(itemID, uom)
{
    document.addComplementaryItemForm.ProductID.value = itemID;
    document.addComplementaryItemForm.ProductUOM.value = uom;
    document.addComplementaryItemForm.submit();
}

function showAlternativeItems(itemIDUOM, orderLineKey, quantity)
{
    clearErrorMessages(document.addAlternativeItemForm);
    clearErrorLabels(document.addAlternativeItemForm);

    var source = document.getElementById("alternatives_" + itemIDUOM);
    var destination = document.getElementById("alternativeItemBody");
    destination.innerHTML = source.innerHTML;

    document.addAlternativeItemForm.OrderLineKey.value = orderLineKey;
    document.addAlternativeItemForm.Quantity.value = quantity;
    DialogPanel.show("alternativeItems");
    svg_classhandlers_decoratePage();
    
    var initialFocus = Ext.get("alternatives_" + itemIDUOM + "_first");
    initialFocus.focus.defer(1000, initialFocus);
}

function addAlternativeItem()
{
    clearErrorMessages(document.addAlternativeItemForm);
    clearErrorLabels(document.addAlternativeItemForm);

    if(swc_validateForm("addAlternativeItemForm") == false)
    {
        return;
    }
    document.addAlternativeItemForm.submit();
}

function configPunchIn(orderLineKey, returnURL)
{
    document.configPunchInForm.OrderLineKey.value = orderLineKey;
    document.configPunchInForm.ReturnURL.value = returnURL;
    document.configPunchInForm.submit();
}

Ext.onReady(function() {
    var initialFocus = document.getElementById("qaProductID");
    if(initialFocus == null)
    {
        initialFocus = document.getElementById("checkout1");
    }
    
    if(initialFocus != null)
    {
        initialFocus.focus();
    }
});
